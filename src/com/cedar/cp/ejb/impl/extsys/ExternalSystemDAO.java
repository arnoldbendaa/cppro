/*      */package com.cedar.cp.ejb.impl.extsys;

/*      */
/*      */import com.cedar.cp.api.base.DuplicateNameValidationException;
/*      */
import com.cedar.cp.api.base.EntityList;
/*      */
import com.cedar.cp.api.base.ValidationException;
/*      */
import com.cedar.cp.api.base.VersionValidationException;
/*      */
import com.cedar.cp.api.dataEntry.FinanceSystemCellData;
/*      */
import com.cedar.cp.api.extsys.ExternalSystemRef;
/*      */
import com.cedar.cp.dto.base.EntityListImpl;
/*      */
import com.cedar.cp.dto.dataEntry.FinanceSystemCellDataImpl;
/*      */
import com.cedar.cp.dto.extsys.AllExternalSystemsELO;
/*      */
import com.cedar.cp.dto.extsys.AllGenericExternalSystemsELO;
/*      */
import com.cedar.cp.dto.extsys.ExtSysCompanyCK;
/*      */
import com.cedar.cp.dto.extsys.ExtSysCompanyPK;
/*      */
import com.cedar.cp.dto.extsys.ExtSysPropertyCK;
/*      */
import com.cedar.cp.dto.extsys.ExtSysPropertyPK;
/*      */
import com.cedar.cp.dto.extsys.ExtSysTransactionQueryParams;
/*      */
import com.cedar.cp.dto.extsys.ExternalSystemCK;
/*      */
import com.cedar.cp.dto.extsys.ExternalSystemPK;
/*      */
import com.cedar.cp.dto.extsys.ExternalSystemRefImpl;
/*      */
import com.cedar.cp.dto.systemproperty.SystemPropertyELO;
/*      */
import com.cedar.cp.dto.user.UserPK;
/*      */
import com.cedar.cp.ejb.impl.base.AbstractDAO;
/*      */
import com.cedar.cp.ejb.impl.base.SqlExecutor;
/*      */
import com.cedar.cp.ejb.impl.model.ModelDAO;
/*      */
import com.cedar.cp.ejb.impl.systemproperty.SystemPropertyDAO;
/*      */
import com.cedar.cp.ejb.impl.user.UserDAO;
/*      */
import com.cedar.cp.ejb.impl.user.UserEVO;
/*      */
import com.cedar.cp.util.Log;
/*      */
import com.cedar.cp.util.SqlBuilder;
/*      */
import com.cedar.cp.util.Timer;
/*      */
import com.cedar.cp.util.common.JdbcUtils;
/*      */
import com.cedar.framework.encryption.LongSquirrel;
/*      */
import com.cedar.framework.encryption.ServicePasswordEncrypter;

/*      */
import java.math.BigDecimal;
/*      */
import java.sql.CallableStatement;
/*      */
import java.sql.Connection;
/*      */
import java.sql.PreparedStatement;
/*      */
import java.sql.ResultSet;
/*      */
import java.sql.ResultSetMetaData;
/*      */
import java.sql.SQLException;
import java.sql.Statement;
/*      */
import java.sql.Timestamp;
/*      */
import java.util.ArrayList;
/*      */
import java.util.Collection;
/*      */
import java.util.Collections;
/*      */
import java.util.Date;
import java.util.HashMap;
/*      */
import java.util.HashSet;
/*      */
import java.util.Iterator;
/*      */
import java.util.List;
import java.util.Map;
/*      */
import java.util.Set;

/*      */
import javax.naming.InitialContext;
/*      */
import javax.naming.NamingException;
/*      */
import javax.sql.DataSource;

import oracle.sql.ARRAY;

/*      */
/*      */public class ExternalSystemDAO extends AbstractDAO
/*      */{
    /* 47 */Log _log = new Log(getClass());
    /*      */protected static final String SQL_FIND_BY_PRIMARY_KEY = "select EXTERNAL_SYSTEM_ID from EXTERNAL_SYSTEM where    EXTERNAL_SYSTEM_ID = ? ";
    /*      */private static final String SQL_SELECT_COLUMNS = "select EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXTERNAL_SYSTEM.SYSTEM_TYPE,EXTERNAL_SYSTEM.VIS_ID,EXTERNAL_SYSTEM.DESCRIPTION,EXTERNAL_SYSTEM.LOCATION,EXTERNAL_SYSTEM.CONNECTOR_CLASS,EXTERNAL_SYSTEM.IMPORT_SOURCE,EXTERNAL_SYSTEM.EXPORT_TARGET,EXTERNAL_SYSTEM.ENABLED,EXTERNAL_SYSTEM.VERSION_NUM,EXTERNAL_SYSTEM.UPDATED_BY_USER_ID,EXTERNAL_SYSTEM.UPDATED_TIME,EXTERNAL_SYSTEM.CREATED_TIME";
    /*      */protected static final String SQL_LOAD = " from EXTERNAL_SYSTEM where    EXTERNAL_SYSTEM_ID = ? ";
    /*      */protected static final String SQL_CREATE = "insert into EXTERNAL_SYSTEM ( EXTERNAL_SYSTEM_ID,SYSTEM_TYPE,VIS_ID,DESCRIPTION,LOCATION,CONNECTOR_CLASS,IMPORT_SOURCE,EXPORT_TARGET,ENABLED,VERSION_NUM,UPDATED_BY_USER_ID,UPDATED_TIME,CREATED_TIME) values ( ?,?,?,?,?,?,?,?,?,?,?,?,?)";
    /*      */protected static final String SQL_UPDATE_SEQ_NUM = "update EXTERNAL_SYSTEM_SEQ set SEQ_NUM = SEQ_NUM + ?";
    /*      */protected static final String SQL_SELECT_SEQ_NUM = "select SEQ_NUM from EXTERNAL_SYSTEM_SEQ";
    /*      */protected static final String SQL_DUPLICATE_VALUE_CHECK_EXTERNALSYSTEMNAME = "select count(*) from EXTERNAL_SYSTEM where    VIS_ID = ? and not(    EXTERNAL_SYSTEM_ID = ? )";
    /*      */protected static final String SQL_STORE = "update EXTERNAL_SYSTEM set SYSTEM_TYPE = ?,VIS_ID = ?,DESCRIPTION = ?,LOCATION = ?,CONNECTOR_CLASS = ?,IMPORT_SOURCE = ?,EXPORT_TARGET = ?,ENABLED = ?,VERSION_NUM = ?,UPDATED_BY_USER_ID = ?,UPDATED_TIME = ?,CREATED_TIME = ? where    EXTERNAL_SYSTEM_ID = ? AND VERSION_NUM = ?";
    /*      */protected static final String SQL_CHECK_VERSION_NUM = "select VERSION_NUM from EXTERNAL_SYSTEM where EXTERNAL_SYSTEM_ID = ?";
    /*      */protected static final String SQL_REMOVE = "delete from EXTERNAL_SYSTEM where    EXTERNAL_SYSTEM_ID = ? ";
    /* 759 */protected static String SQL_ALL_EXTERNAL_SYSTEMS = "select 0       ,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID      ,EXTERNAL_SYSTEM.VIS_ID      ,EXTERNAL_SYSTEM.SYSTEM_TYPE      ,EXTERNAL_SYSTEM.VIS_ID      ,EXTERNAL_SYSTEM.DESCRIPTION      ,EXTERNAL_SYSTEM.LOCATION      ,EXTERNAL_SYSTEM.IMPORT_SOURCE      ,EXTERNAL_SYSTEM.EXPORT_TARGET      ,EXTERNAL_SYSTEM.ENABLED from EXTERNAL_SYSTEM where 1=1 ";
    /*      */
    /* 859 */protected static String SQL_ALL_GENERIC_EXTERNAL_SYSTEMS = "select 0       ,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID      ,EXTERNAL_SYSTEM.VIS_ID      ,EXTERNAL_SYSTEM.SYSTEM_TYPE      ,EXTERNAL_SYSTEM.VIS_ID      ,EXTERNAL_SYSTEM.DESCRIPTION      ,EXTERNAL_SYSTEM.LOCATION      ,EXTERNAL_SYSTEM.IMPORT_SOURCE      ,EXTERNAL_SYSTEM.EXPORT_TARGET      ,EXTERNAL_SYSTEM.ENABLED from EXTERNAL_SYSTEM where 1=1  and  SYSTEM_TYPE = 20";
    /*      */
    /* 958 */private static String[][] SQL_DELETE_CHILDREN = { { "EXT_SYS_COMPANY", "delete from EXT_SYS_COMPANY where     EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = ? " }, { "EXT_SYS_PROPERTY", "delete from EXT_SYS_PROPERTY where     EXT_SYS_PROPERTY.EXTERNAL_SYSTEM_ID = ? " } };
    /*      */
    /* 972 */private static String[][] SQL_DELETE_CHILDRENS_DEPENDANTS = {
            { "EXT_SYS_LEDGER",
                    "delete from EXT_SYS_LEDGER ExtSysLedger where exists (select * from EXT_SYS_LEDGER,EXT_SYS_COMPANY,EXTERNAL_SYSTEM where     EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and ExtSysLedger.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and ExtSysLedger.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID " },
            {
                    "EXT_SYS_DIMENSION",
                    "delete from EXT_SYS_DIMENSION ExtSysDimension where exists (select * from EXT_SYS_DIMENSION,EXT_SYS_LEDGER,EXT_SYS_COMPANY,EXTERNAL_SYSTEM where     EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_DIMENSION.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_DIMENSION.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and ExtSysDimension.EXTERNAL_SYSTEM_ID = EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID and ExtSysDimension.COMPANY_VIS_ID = EXT_SYS_DIMENSION.COMPANY_VIS_ID and ExtSysDimension.LEDGER_VIS_ID = EXT_SYS_DIMENSION.LEDGER_VIS_ID " },
            {
                    "EXT_SYS_DIM_ELEMENT",
                    "delete from EXT_SYS_DIM_ELEMENT ExtSysDimElement where exists (select * from EXT_SYS_DIM_ELEMENT,EXT_SYS_DIMENSION,EXT_SYS_LEDGER,EXT_SYS_COMPANY,EXTERNAL_SYSTEM where     EXT_SYS_DIM_ELEMENT.EXTERNAL_SYSTEM_ID = EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID and EXT_SYS_DIM_ELEMENT.COMPANY_VIS_ID = EXT_SYS_DIMENSION.COMPANY_VIS_ID and EXT_SYS_DIM_ELEMENT.LEDGER_VIS_ID = EXT_SYS_DIMENSION.LEDGER_VIS_ID and EXT_SYS_DIM_ELEMENT.DIMENSION_VIS_ID = EXT_SYS_DIMENSION.DIMENSION_VIS_ID and EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_DIMENSION.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_DIMENSION.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and ExtSysDimElement.EXTERNAL_SYSTEM_ID = EXT_SYS_DIM_ELEMENT.EXTERNAL_SYSTEM_ID and ExtSysDimElement.COMPANY_VIS_ID = EXT_SYS_DIM_ELEMENT.COMPANY_VIS_ID and ExtSysDimElement.LEDGER_VIS_ID = EXT_SYS_DIM_ELEMENT.LEDGER_VIS_ID and ExtSysDimElement.DIMENSION_VIS_ID = EXT_SYS_DIM_ELEMENT.DIMENSION_VIS_ID " },
            {
                    "EXT_SYS_HIERARCHY",
                    "delete from EXT_SYS_HIERARCHY ExtSysHierarchy where exists (select * from EXT_SYS_HIERARCHY,EXT_SYS_DIMENSION,EXT_SYS_LEDGER,EXT_SYS_COMPANY,EXTERNAL_SYSTEM where     EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID = EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID and EXT_SYS_HIERARCHY.COMPANY_VIS_ID = EXT_SYS_DIMENSION.COMPANY_VIS_ID and EXT_SYS_HIERARCHY.LEDGER_VIS_ID = EXT_SYS_DIMENSION.LEDGER_VIS_ID and EXT_SYS_HIERARCHY.DIMENSION_VIS_ID = EXT_SYS_DIMENSION.DIMENSION_VIS_ID and EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_DIMENSION.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_DIMENSION.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and ExtSysHierarchy.EXTERNAL_SYSTEM_ID = EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID and ExtSysHierarchy.COMPANY_VIS_ID = EXT_SYS_HIERARCHY.COMPANY_VIS_ID and ExtSysHierarchy.LEDGER_VIS_ID = EXT_SYS_HIERARCHY.LEDGER_VIS_ID and ExtSysHierarchy.DIMENSION_VIS_ID = EXT_SYS_HIERARCHY.DIMENSION_VIS_ID " },
            {
                    "EXT_SYS_HIER_ELEMENT",
                    "delete from EXT_SYS_HIER_ELEMENT ExtSysHierElement where exists (select * from EXT_SYS_HIER_ELEMENT,EXT_SYS_HIERARCHY,EXT_SYS_DIMENSION,EXT_SYS_LEDGER,EXT_SYS_COMPANY,EXTERNAL_SYSTEM where     EXT_SYS_HIER_ELEMENT.EXTERNAL_SYSTEM_ID = EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID and EXT_SYS_HIER_ELEMENT.COMPANY_VIS_ID = EXT_SYS_HIERARCHY.COMPANY_VIS_ID and EXT_SYS_HIER_ELEMENT.LEDGER_VIS_ID = EXT_SYS_HIERARCHY.LEDGER_VIS_ID and EXT_SYS_HIER_ELEMENT.DIMENSION_VIS_ID = EXT_SYS_HIERARCHY.DIMENSION_VIS_ID and EXT_SYS_HIER_ELEMENT.HIERARCHY_VIS_ID = EXT_SYS_HIERARCHY.HIERARCHY_VIS_ID and EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID = EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID and EXT_SYS_HIERARCHY.COMPANY_VIS_ID = EXT_SYS_DIMENSION.COMPANY_VIS_ID and EXT_SYS_HIERARCHY.LEDGER_VIS_ID = EXT_SYS_DIMENSION.LEDGER_VIS_ID and EXT_SYS_HIERARCHY.DIMENSION_VIS_ID = EXT_SYS_DIMENSION.DIMENSION_VIS_ID and EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_DIMENSION.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_DIMENSION.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and ExtSysHierElement.EXTERNAL_SYSTEM_ID = EXT_SYS_HIER_ELEMENT.EXTERNAL_SYSTEM_ID and ExtSysHierElement.COMPANY_VIS_ID = EXT_SYS_HIER_ELEMENT.COMPANY_VIS_ID and ExtSysHierElement.LEDGER_VIS_ID = EXT_SYS_HIER_ELEMENT.LEDGER_VIS_ID and ExtSysHierElement.DIMENSION_VIS_ID = EXT_SYS_HIER_ELEMENT.DIMENSION_VIS_ID and ExtSysHierElement.HIERARCHY_VIS_ID = EXT_SYS_HIER_ELEMENT.HIERARCHY_VIS_ID " },
            {
                    "EXT_SYS_HIER_ELEM_FEED",
                    "delete from EXT_SYS_HIER_ELEM_FEED ExtSysHierElemFeed where exists (select * from EXT_SYS_HIER_ELEM_FEED,EXT_SYS_HIER_ELEMENT,EXT_SYS_HIERARCHY,EXT_SYS_DIMENSION,EXT_SYS_LEDGER,EXT_SYS_COMPANY,EXTERNAL_SYSTEM where     EXT_SYS_HIER_ELEM_FEED.EXTERNAL_SYSTEM_ID = EXT_SYS_HIER_ELEMENT.EXTERNAL_SYSTEM_ID and EXT_SYS_HIER_ELEM_FEED.COMPANY_VIS_ID = EXT_SYS_HIER_ELEMENT.COMPANY_VIS_ID and EXT_SYS_HIER_ELEM_FEED.LEDGER_VIS_ID = EXT_SYS_HIER_ELEMENT.LEDGER_VIS_ID and EXT_SYS_HIER_ELEM_FEED.DIMENSION_VIS_ID = EXT_SYS_HIER_ELEMENT.DIMENSION_VIS_ID and EXT_SYS_HIER_ELEM_FEED.HIERARCHY_VIS_ID = EXT_SYS_HIER_ELEMENT.HIERARCHY_VIS_ID and EXT_SYS_HIER_ELEM_FEED.HIER_ELEMENT_VIS_ID = EXT_SYS_HIER_ELEMENT.HIER_ELEMENT_VIS_ID and EXT_SYS_HIER_ELEMENT.EXTERNAL_SYSTEM_ID = EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID and EXT_SYS_HIER_ELEMENT.COMPANY_VIS_ID = EXT_SYS_HIERARCHY.COMPANY_VIS_ID and EXT_SYS_HIER_ELEMENT.LEDGER_VIS_ID = EXT_SYS_HIERARCHY.LEDGER_VIS_ID and EXT_SYS_HIER_ELEMENT.DIMENSION_VIS_ID = EXT_SYS_HIERARCHY.DIMENSION_VIS_ID and EXT_SYS_HIER_ELEMENT.HIERARCHY_VIS_ID = EXT_SYS_HIERARCHY.HIERARCHY_VIS_ID and EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID = EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID and EXT_SYS_HIERARCHY.COMPANY_VIS_ID = EXT_SYS_DIMENSION.COMPANY_VIS_ID and EXT_SYS_HIERARCHY.LEDGER_VIS_ID = EXT_SYS_DIMENSION.LEDGER_VIS_ID and EXT_SYS_HIERARCHY.DIMENSION_VIS_ID = EXT_SYS_DIMENSION.DIMENSION_VIS_ID and EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_DIMENSION.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_DIMENSION.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and ExtSysHierElemFeed.EXTERNAL_SYSTEM_ID = EXT_SYS_HIER_ELEM_FEED.EXTERNAL_SYSTEM_ID and ExtSysHierElemFeed.COMPANY_VIS_ID = EXT_SYS_HIER_ELEM_FEED.COMPANY_VIS_ID and ExtSysHierElemFeed.LEDGER_VIS_ID = EXT_SYS_HIER_ELEM_FEED.LEDGER_VIS_ID and ExtSysHierElemFeed.DIMENSION_VIS_ID = EXT_SYS_HIER_ELEM_FEED.DIMENSION_VIS_ID and ExtSysHierElemFeed.HIERARCHY_VIS_ID = EXT_SYS_HIER_ELEM_FEED.HIERARCHY_VIS_ID and ExtSysHierElemFeed.HIER_ELEMENT_VIS_ID = EXT_SYS_HIER_ELEM_FEED.HIER_ELEMENT_VIS_ID " },
            {
                    "EXT_SYS_VALUE_TYPE",
                    "delete from EXT_SYS_VALUE_TYPE ExtSysValueType where exists (select * from EXT_SYS_VALUE_TYPE,EXT_SYS_LEDGER,EXT_SYS_COMPANY,EXTERNAL_SYSTEM where     EXT_SYS_VALUE_TYPE.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_VALUE_TYPE.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_VALUE_TYPE.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and ExtSysValueType.EXTERNAL_SYSTEM_ID = EXT_SYS_VALUE_TYPE.EXTERNAL_SYSTEM_ID and ExtSysValueType.COMPANY_VIS_ID = EXT_SYS_VALUE_TYPE.COMPANY_VIS_ID and ExtSysValueType.LEDGER_VIS_ID = EXT_SYS_VALUE_TYPE.LEDGER_VIS_ID " },
            {
                    "EXT_SYS_CURRENCY",
                    "delete from EXT_SYS_CURRENCY ExtSysCurrency where exists (select * from EXT_SYS_CURRENCY,EXT_SYS_LEDGER,EXT_SYS_COMPANY,EXTERNAL_SYSTEM where     EXT_SYS_CURRENCY.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_CURRENCY.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_CURRENCY.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and ExtSysCurrency.EXTERNAL_SYSTEM_ID = EXT_SYS_CURRENCY.EXTERNAL_SYSTEM_ID and ExtSysCurrency.COMPANY_VIS_ID = EXT_SYS_CURRENCY.COMPANY_VIS_ID and ExtSysCurrency.LEDGER_VIS_ID = EXT_SYS_CURRENCY.LEDGER_VIS_ID " },
            {
                    "EXT_SYS_CALENDAR_YEAR",
                    "delete from EXT_SYS_CALENDAR_YEAR ExtSysCalendarYear where exists (select * from EXT_SYS_CALENDAR_YEAR,EXT_SYS_COMPANY,EXTERNAL_SYSTEM where     EXT_SYS_CALENDAR_YEAR.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_CALENDAR_YEAR.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and ExtSysCalendarYear.EXTERNAL_SYSTEM_ID = EXT_SYS_CALENDAR_YEAR.EXTERNAL_SYSTEM_ID and ExtSysCalendarYear.COMPANY_VIS_ID = EXT_SYS_CALENDAR_YEAR.COMPANY_VIS_ID " },
            {
                    "EXT_SYS_CAL_ELEMENT",
                    "delete from EXT_SYS_CAL_ELEMENT ExtSysCalElement where exists (select * from EXT_SYS_CAL_ELEMENT,EXT_SYS_CALENDAR_YEAR,EXT_SYS_COMPANY,EXTERNAL_SYSTEM where     EXT_SYS_CAL_ELEMENT.EXTERNAL_SYSTEM_ID = EXT_SYS_CALENDAR_YEAR.EXTERNAL_SYSTEM_ID and EXT_SYS_CAL_ELEMENT.COMPANY_VIS_ID = EXT_SYS_CALENDAR_YEAR.COMPANY_VIS_ID and EXT_SYS_CAL_ELEMENT.CALENDAR_YEAR_VIS_ID = EXT_SYS_CALENDAR_YEAR.CALENDAR_YEAR_VIS_ID and EXT_SYS_CALENDAR_YEAR.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_CALENDAR_YEAR.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and ExtSysCalElement.EXTERNAL_SYSTEM_ID = EXT_SYS_CAL_ELEMENT.EXTERNAL_SYSTEM_ID and ExtSysCalElement.COMPANY_VIS_ID = EXT_SYS_CAL_ELEMENT.COMPANY_VIS_ID and ExtSysCalElement.CALENDAR_YEAR_VIS_ID = EXT_SYS_CAL_ELEMENT.CALENDAR_YEAR_VIS_ID " } };
    /*      */
    /* 1192 */private static String SQL_DELETE_DEPENDANT_CRITERIA = "and EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID = ?)";
    /*      */private static final String SQL_CHECK_IF_VALID = "select VERSION_NUM from EXTERNAL_SYSTEM where   EXTERNAL_SYSTEM_ID = ?";
    /*      */public static final String SQL_GET_EXT_SYS_COMPANY_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID from EXT_SYS_COMPANY,EXTERNAL_SYSTEM where 1=1 and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_COMPANY.COMPANY_VIS_ID = ? and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID";
    /*      */public static final String SQL_GET_EXT_SYS_LEDGER_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.COMPANY_VIS_ID from EXT_SYS_LEDGER,EXTERNAL_SYSTEM,EXT_SYS_COMPANY where 1=1 and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_LEDGER.COMPANY_VIS_ID = ? and EXT_SYS_LEDGER.LEDGER_VIS_ID = ? and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and EXT_SYS_COMPANY.COMPANY_VIS_ID = EXTERNAL_SYSTEM.COMPANY_VIS_ID";
    /*      */public static final String SQL_GET_EXT_SYS_DIMENSION_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.COMPANY_VIS_ID,EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID,EXT_SYS_LEDGER.COMPANY_VIS_ID,EXT_SYS_LEDGER.LEDGER_VIS_ID from EXT_SYS_DIMENSION,EXTERNAL_SYSTEM,EXT_SYS_COMPANY,EXT_SYS_LEDGER where 1=1 and EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_DIMENSION.COMPANY_VIS_ID = ? and EXT_SYS_DIMENSION.LEDGER_VIS_ID = ? and EXT_SYS_DIMENSION.DIMENSION_VIS_ID = ? and EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_DIMENSION.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_DIMENSION.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_LEDGER.LEDGER_VIS_ID = EXT_SYS_COMPANY.LEDGER_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and EXT_SYS_COMPANY.COMPANY_VIS_ID = EXTERNAL_SYSTEM.COMPANY_VIS_ID";
    /*      */public static final String SQL_GET_EXT_SYS_DIM_ELEMENT_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.COMPANY_VIS_ID,EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID,EXT_SYS_LEDGER.COMPANY_VIS_ID,EXT_SYS_LEDGER.LEDGER_VIS_ID,EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID,EXT_SYS_DIMENSION.COMPANY_VIS_ID,EXT_SYS_DIMENSION.LEDGER_VIS_ID,EXT_SYS_DIMENSION.DIMENSION_VIS_ID from EXT_SYS_DIM_ELEMENT,EXTERNAL_SYSTEM,EXT_SYS_COMPANY,EXT_SYS_LEDGER,EXT_SYS_DIMENSION where 1=1 and EXT_SYS_DIM_ELEMENT.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_DIM_ELEMENT.COMPANY_VIS_ID = ? and EXT_SYS_DIM_ELEMENT.LEDGER_VIS_ID = ? and EXT_SYS_DIM_ELEMENT.DIMENSION_VIS_ID = ? and EXT_SYS_DIM_ELEMENT.DIM_ELEMENT_VIS_ID = ? and EXT_SYS_DIM_ELEMENT.EXTERNAL_SYSTEM_ID = EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID and EXT_SYS_DIM_ELEMENT.COMPANY_VIS_ID = EXT_SYS_DIMENSION.COMPANY_VIS_ID and EXT_SYS_DIM_ELEMENT.LEDGER_VIS_ID = EXT_SYS_DIMENSION.LEDGER_VIS_ID and EXT_SYS_DIM_ELEMENT.DIMENSION_VIS_ID = EXT_SYS_DIMENSION.DIMENSION_VIS_ID and EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_DIMENSION.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_DIMENSION.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_DIMENSION.DIMENSION_VIS_ID = EXT_SYS_LEDGER.DIMENSION_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_LEDGER.LEDGER_VIS_ID = EXT_SYS_COMPANY.LEDGER_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and EXT_SYS_COMPANY.COMPANY_VIS_ID = EXTERNAL_SYSTEM.COMPANY_VIS_ID";
    /*      */public static final String SQL_GET_EXT_SYS_HIERARCHY_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.COMPANY_VIS_ID,EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID,EXT_SYS_LEDGER.COMPANY_VIS_ID,EXT_SYS_LEDGER.LEDGER_VIS_ID,EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID,EXT_SYS_DIMENSION.COMPANY_VIS_ID,EXT_SYS_DIMENSION.LEDGER_VIS_ID,EXT_SYS_DIMENSION.DIMENSION_VIS_ID from EXT_SYS_HIERARCHY,EXTERNAL_SYSTEM,EXT_SYS_COMPANY,EXT_SYS_LEDGER,EXT_SYS_DIMENSION where 1=1 and EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_HIERARCHY.COMPANY_VIS_ID = ? and EXT_SYS_HIERARCHY.LEDGER_VIS_ID = ? and EXT_SYS_HIERARCHY.DIMENSION_VIS_ID = ? and EXT_SYS_HIERARCHY.HIERARCHY_VIS_ID = ? and EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID = EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID and EXT_SYS_HIERARCHY.COMPANY_VIS_ID = EXT_SYS_DIMENSION.COMPANY_VIS_ID and EXT_SYS_HIERARCHY.LEDGER_VIS_ID = EXT_SYS_DIMENSION.LEDGER_VIS_ID and EXT_SYS_HIERARCHY.DIMENSION_VIS_ID = EXT_SYS_DIMENSION.DIMENSION_VIS_ID and EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_DIMENSION.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_DIMENSION.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_DIMENSION.DIMENSION_VIS_ID = EXT_SYS_LEDGER.DIMENSION_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_LEDGER.LEDGER_VIS_ID = EXT_SYS_COMPANY.LEDGER_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and EXT_SYS_COMPANY.COMPANY_VIS_ID = EXTERNAL_SYSTEM.COMPANY_VIS_ID";
    /*      */public static final String SQL_GET_EXT_SYS_HIER_ELEMENT_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.COMPANY_VIS_ID,EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID,EXT_SYS_LEDGER.COMPANY_VIS_ID,EXT_SYS_LEDGER.LEDGER_VIS_ID,EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID,EXT_SYS_DIMENSION.COMPANY_VIS_ID,EXT_SYS_DIMENSION.LEDGER_VIS_ID,EXT_SYS_DIMENSION.DIMENSION_VIS_ID,EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID,EXT_SYS_HIERARCHY.COMPANY_VIS_ID,EXT_SYS_HIERARCHY.LEDGER_VIS_ID,EXT_SYS_HIERARCHY.DIMENSION_VIS_ID,EXT_SYS_HIERARCHY.HIERARCHY_VIS_ID from EXT_SYS_HIER_ELEMENT,EXTERNAL_SYSTEM,EXT_SYS_COMPANY,EXT_SYS_LEDGER,EXT_SYS_DIMENSION,EXT_SYS_HIERARCHY where 1=1 and EXT_SYS_HIER_ELEMENT.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_HIER_ELEMENT.COMPANY_VIS_ID = ? and EXT_SYS_HIER_ELEMENT.LEDGER_VIS_ID = ? and EXT_SYS_HIER_ELEMENT.DIMENSION_VIS_ID = ? and EXT_SYS_HIER_ELEMENT.HIERARCHY_VIS_ID = ? and EXT_SYS_HIER_ELEMENT.HIER_ELEMENT_VIS_ID = ? and EXT_SYS_HIER_ELEMENT.EXTERNAL_SYSTEM_ID = EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID and EXT_SYS_HIER_ELEMENT.COMPANY_VIS_ID = EXT_SYS_HIERARCHY.COMPANY_VIS_ID and EXT_SYS_HIER_ELEMENT.LEDGER_VIS_ID = EXT_SYS_HIERARCHY.LEDGER_VIS_ID and EXT_SYS_HIER_ELEMENT.DIMENSION_VIS_ID = EXT_SYS_HIERARCHY.DIMENSION_VIS_ID and EXT_SYS_HIER_ELEMENT.HIERARCHY_VIS_ID = EXT_SYS_HIERARCHY.HIERARCHY_VIS_ID and EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID = EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID and EXT_SYS_HIERARCHY.COMPANY_VIS_ID = EXT_SYS_DIMENSION.COMPANY_VIS_ID and EXT_SYS_HIERARCHY.LEDGER_VIS_ID = EXT_SYS_DIMENSION.LEDGER_VIS_ID and EXT_SYS_HIERARCHY.DIMENSION_VIS_ID = EXT_SYS_DIMENSION.DIMENSION_VIS_ID and EXT_SYS_HIERARCHY.HIERARCHY_VIS_ID = EXT_SYS_DIMENSION.HIERARCHY_VIS_ID and EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_DIMENSION.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_DIMENSION.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_DIMENSION.DIMENSION_VIS_ID = EXT_SYS_LEDGER.DIMENSION_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_LEDGER.LEDGER_VIS_ID = EXT_SYS_COMPANY.LEDGER_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and EXT_SYS_COMPANY.COMPANY_VIS_ID = EXTERNAL_SYSTEM.COMPANY_VIS_ID";
    /*      */public static final String SQL_GET_EXT_SYS_HIER_ELEM_FEED_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.COMPANY_VIS_ID,EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID,EXT_SYS_LEDGER.COMPANY_VIS_ID,EXT_SYS_LEDGER.LEDGER_VIS_ID,EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID,EXT_SYS_DIMENSION.COMPANY_VIS_ID,EXT_SYS_DIMENSION.LEDGER_VIS_ID,EXT_SYS_DIMENSION.DIMENSION_VIS_ID,EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID,EXT_SYS_HIERARCHY.COMPANY_VIS_ID,EXT_SYS_HIERARCHY.LEDGER_VIS_ID,EXT_SYS_HIERARCHY.DIMENSION_VIS_ID,EXT_SYS_HIERARCHY.HIERARCHY_VIS_ID,EXT_SYS_HIER_ELEMENT.EXTERNAL_SYSTEM_ID,EXT_SYS_HIER_ELEMENT.COMPANY_VIS_ID,EXT_SYS_HIER_ELEMENT.LEDGER_VIS_ID,EXT_SYS_HIER_ELEMENT.DIMENSION_VIS_ID,EXT_SYS_HIER_ELEMENT.HIERARCHY_VIS_ID,EXT_SYS_HIER_ELEMENT.HIER_ELEMENT_VIS_ID from EXT_SYS_HIER_ELEM_FEED,EXTERNAL_SYSTEM,EXT_SYS_COMPANY,EXT_SYS_LEDGER,EXT_SYS_DIMENSION,EXT_SYS_HIERARCHY,EXT_SYS_HIER_ELEMENT where 1=1 and EXT_SYS_HIER_ELEM_FEED.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_HIER_ELEM_FEED.COMPANY_VIS_ID = ? and EXT_SYS_HIER_ELEM_FEED.LEDGER_VIS_ID = ? and EXT_SYS_HIER_ELEM_FEED.DIMENSION_VIS_ID = ? and EXT_SYS_HIER_ELEM_FEED.HIER_ELEMENT_VIS_ID = ? and EXT_SYS_HIER_ELEM_FEED.DIM_ELEMENT_VIS_ID = ? and EXT_SYS_HIER_ELEM_FEED.EXTERNAL_SYSTEM_ID = EXT_SYS_HIER_ELEMENT.EXTERNAL_SYSTEM_ID and EXT_SYS_HIER_ELEM_FEED.COMPANY_VIS_ID = EXT_SYS_HIER_ELEMENT.COMPANY_VIS_ID and EXT_SYS_HIER_ELEM_FEED.LEDGER_VIS_ID = EXT_SYS_HIER_ELEMENT.LEDGER_VIS_ID and EXT_SYS_HIER_ELEM_FEED.DIMENSION_VIS_ID = EXT_SYS_HIER_ELEMENT.DIMENSION_VIS_ID and EXT_SYS_HIER_ELEM_FEED.HIERARCHY_VIS_ID = EXT_SYS_HIER_ELEMENT.HIERARCHY_VIS_ID and EXT_SYS_HIER_ELEM_FEED.HIER_ELEMENT_VIS_ID = EXT_SYS_HIER_ELEMENT.HIER_ELEMENT_VIS_ID and EXT_SYS_HIER_ELEMENT.EXTERNAL_SYSTEM_ID = EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID and EXT_SYS_HIER_ELEMENT.COMPANY_VIS_ID = EXT_SYS_HIERARCHY.COMPANY_VIS_ID and EXT_SYS_HIER_ELEMENT.LEDGER_VIS_ID = EXT_SYS_HIERARCHY.LEDGER_VIS_ID and EXT_SYS_HIER_ELEMENT.DIMENSION_VIS_ID = EXT_SYS_HIERARCHY.DIMENSION_VIS_ID and EXT_SYS_HIER_ELEMENT.HIERARCHY_VIS_ID = EXT_SYS_HIERARCHY.HIERARCHY_VIS_ID and EXT_SYS_HIER_ELEMENT.HIER_ELEMENT_VIS_ID = EXT_SYS_HIERARCHY.HIER_ELEMENT_VIS_ID and EXT_SYS_HIERARCHY.EXTERNAL_SYSTEM_ID = EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID and EXT_SYS_HIERARCHY.COMPANY_VIS_ID = EXT_SYS_DIMENSION.COMPANY_VIS_ID and EXT_SYS_HIERARCHY.LEDGER_VIS_ID = EXT_SYS_DIMENSION.LEDGER_VIS_ID and EXT_SYS_HIERARCHY.DIMENSION_VIS_ID = EXT_SYS_DIMENSION.DIMENSION_VIS_ID and EXT_SYS_HIERARCHY.HIERARCHY_VIS_ID = EXT_SYS_DIMENSION.HIERARCHY_VIS_ID and EXT_SYS_DIMENSION.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_DIMENSION.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_DIMENSION.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_DIMENSION.DIMENSION_VIS_ID = EXT_SYS_LEDGER.DIMENSION_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_LEDGER.LEDGER_VIS_ID = EXT_SYS_COMPANY.LEDGER_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and EXT_SYS_COMPANY.COMPANY_VIS_ID = EXTERNAL_SYSTEM.COMPANY_VIS_ID";
    /*      */public static final String SQL_GET_EXT_SYS_VALUE_TYPE_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.COMPANY_VIS_ID,EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID,EXT_SYS_LEDGER.COMPANY_VIS_ID,EXT_SYS_LEDGER.LEDGER_VIS_ID from EXT_SYS_VALUE_TYPE,EXTERNAL_SYSTEM,EXT_SYS_COMPANY,EXT_SYS_LEDGER where 1=1 and EXT_SYS_VALUE_TYPE.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_VALUE_TYPE.COMPANY_VIS_ID = ? and EXT_SYS_VALUE_TYPE.LEDGER_VIS_ID = ? and EXT_SYS_VALUE_TYPE.VALUE_TYPE_VIS_ID = ? and EXT_SYS_VALUE_TYPE.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_VALUE_TYPE.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_VALUE_TYPE.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_LEDGER.LEDGER_VIS_ID = EXT_SYS_COMPANY.LEDGER_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and EXT_SYS_COMPANY.COMPANY_VIS_ID = EXTERNAL_SYSTEM.COMPANY_VIS_ID";
    /*      */public static final String SQL_GET_EXT_SYS_CURRENCY_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.COMPANY_VIS_ID,EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID,EXT_SYS_LEDGER.COMPANY_VIS_ID,EXT_SYS_LEDGER.LEDGER_VIS_ID from EXT_SYS_CURRENCY,EXTERNAL_SYSTEM,EXT_SYS_COMPANY,EXT_SYS_LEDGER where 1=1 and EXT_SYS_CURRENCY.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_CURRENCY.COMPANY_VIS_ID = ? and EXT_SYS_CURRENCY.LEDGER_VIS_ID = ? and EXT_SYS_CURRENCY.CURRENCY_VIS_ID = ? and EXT_SYS_CURRENCY.EXTERNAL_SYSTEM_ID = EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID and EXT_SYS_CURRENCY.COMPANY_VIS_ID = EXT_SYS_LEDGER.COMPANY_VIS_ID and EXT_SYS_CURRENCY.LEDGER_VIS_ID = EXT_SYS_LEDGER.LEDGER_VIS_ID and EXT_SYS_LEDGER.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_LEDGER.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_LEDGER.LEDGER_VIS_ID = EXT_SYS_COMPANY.LEDGER_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and EXT_SYS_COMPANY.COMPANY_VIS_ID = EXTERNAL_SYSTEM.COMPANY_VIS_ID";
    /*      */public static final String SQL_GET_EXT_SYS_CALENDAR_YEAR_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.COMPANY_VIS_ID from EXT_SYS_CALENDAR_YEAR,EXTERNAL_SYSTEM,EXT_SYS_COMPANY where 1=1 and EXT_SYS_CALENDAR_YEAR.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_CALENDAR_YEAR.COMPANY_VIS_ID = ? and EXT_SYS_CALENDAR_YEAR.CALENDAR_YEAR_VIS_ID = ? and EXT_SYS_CALENDAR_YEAR.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_CALENDAR_YEAR.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and EXT_SYS_COMPANY.COMPANY_VIS_ID = EXTERNAL_SYSTEM.COMPANY_VIS_ID";
    /*      */public static final String SQL_GET_EXT_SYS_CAL_ELEMENT_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID,EXT_SYS_COMPANY.COMPANY_VIS_ID,EXT_SYS_CALENDAR_YEAR.EXTERNAL_SYSTEM_ID,EXT_SYS_CALENDAR_YEAR.COMPANY_VIS_ID,EXT_SYS_CALENDAR_YEAR.CALENDAR_YEAR_VIS_ID from EXT_SYS_CAL_ELEMENT,EXTERNAL_SYSTEM,EXT_SYS_COMPANY,EXT_SYS_CALENDAR_YEAR where 1=1 and EXT_SYS_CAL_ELEMENT.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_CAL_ELEMENT.COMPANY_VIS_ID = ? and EXT_SYS_CAL_ELEMENT.CALENDAR_YEAR_VIS_ID = ? and EXT_SYS_CAL_ELEMENT.CAL_ELEMENT_VIS_ID = ? and EXT_SYS_CAL_ELEMENT.EXTERNAL_SYSTEM_ID = EXT_SYS_CALENDAR_YEAR.EXTERNAL_SYSTEM_ID and EXT_SYS_CAL_ELEMENT.COMPANY_VIS_ID = EXT_SYS_CALENDAR_YEAR.COMPANY_VIS_ID and EXT_SYS_CAL_ELEMENT.CALENDAR_YEAR_VIS_ID = EXT_SYS_CALENDAR_YEAR.CALENDAR_YEAR_VIS_ID and EXT_SYS_CALENDAR_YEAR.EXTERNAL_SYSTEM_ID = EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID and EXT_SYS_CALENDAR_YEAR.COMPANY_VIS_ID = EXT_SYS_COMPANY.COMPANY_VIS_ID and EXT_SYS_CALENDAR_YEAR.CALENDAR_YEAR_VIS_ID = EXT_SYS_COMPANY.CALENDAR_YEAR_VIS_ID and EXT_SYS_COMPANY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID and EXT_SYS_COMPANY.COMPANY_VIS_ID = EXTERNAL_SYSTEM.COMPANY_VIS_ID";
    /*      */public static final String SQL_GET_EXT_SYS_PROPERTY_REF = "select 0,EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID from EXT_SYS_PROPERTY,EXTERNAL_SYSTEM where 1=1 and EXT_SYS_PROPERTY.EXTERNAL_SYSTEM_ID = ? and EXT_SYS_PROPERTY.PROPERTY_NAME = ? and EXT_SYS_PROPERTY.EXTERNAL_SYSTEM_ID = EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID";
    /* 2109 */protected static final JdbcUtils.ColType[] COMPANIES_COL_INFO = { new JdbcUtils.ColType("CMPY", 1), new JdbcUtils.ColType("DESCR", 1), new JdbcUtils.ColType("IS_DUMMY", 1), new JdbcUtils.ColType("ACCTYPES", 1), new JdbcUtils.ColType("HIERTYPES", 1) };
    /*      */
    /* 2167 */protected static final JdbcUtils.ColType[] CALENDARS_COL_INFO = { new JdbcUtils.ColType("YEAR", 0), new JdbcUtils.ColType("DESCR", 1) };

    protected static final JdbcUtils.ColType[] GLOBAL_CALENDARS_COL_INFO = { new JdbcUtils.ColType("CMPY", 1), new JdbcUtils.ColType("YEAR", 0), new JdbcUtils.ColType("DESCR", 1) };

    /* 2223 */protected static final JdbcUtils.ColType[] PERIODS_COL_INFO = { new JdbcUtils.ColType("PERIOD", 0), new JdbcUtils.ColType("DESCR", 1), new JdbcUtils.ColType("VIS_ID", 1) };
    /*      */
    /* 2281 */protected static final JdbcUtils.ColType[] LEDGERS_COL_INFO = { new JdbcUtils.ColType("LEDGER", 1), new JdbcUtils.ColType("DESCR", 1), new JdbcUtils.ColType("IS_DUMMY", 1) };
    /*      */
    /* 2338 */protected static final JdbcUtils.ColType[] DIMENSIONS_COL_INFO = { new JdbcUtils.ColType("DIM", 1), new JdbcUtils.ColType("DIM_TYPE", 0), new JdbcUtils.ColType("EXT_SYS_DIM_TYPE", 1), new JdbcUtils.ColType("DIM_MASK", 1), new JdbcUtils.ColType("DIM_MASK_LEN", 0), new JdbcUtils.ColType("DESCR", 1), new JdbcUtils.ColType("IS_DUMMY", 1), new JdbcUtils.ColType("SUGGESTED_CP_VIS_ID", 1), new JdbcUtils.ColType("IS_MANDATORY", 1) };

    protected static final JdbcUtils.ColType[] GLOBAL_DIMENSIONS_COL_INFO = { new JdbcUtils.ColType("CMPY", 1), new JdbcUtils.ColType("DIM", 1), new JdbcUtils.ColType("DIM_TYPE", 0), new JdbcUtils.ColType("EXT_SYS_DIM_TYPE", 1), new JdbcUtils.ColType("DIM_MASK", 1), new JdbcUtils.ColType("DIM_MASK_LEN", 0), new JdbcUtils.ColType("DESCR", 1), new JdbcUtils.ColType("IS_DUMMY", 1), new JdbcUtils.ColType("SUGGESTED_CP_VIS_ID", 1), new JdbcUtils.ColType("IS_MANDATORY", 1) };

    /* 2403 */protected static final JdbcUtils.ColType[] VALUE_TYPES_COL_INFO = { new JdbcUtils.ColType("RTYPE", 0), new JdbcUtils.ColType("BAL", 1), new JdbcUtils.ColType("CURR", 1), new JdbcUtils.ColType("DESCR", 1), new JdbcUtils.ColType("IS_NON_BASE", 0), new JdbcUtils.ColType("IS_CURRENCY_APPLICABLE", 0), new JdbcUtils.ColType("IS_CURRENCY_USAGE_SUPPLIED", 0), new JdbcUtils.ColType("IS_BALTYPE_APPLICABLE", 0) };
    /*      */
    /* 2468 */protected static final JdbcUtils.ColType[] HIERARCHIES_COL_INFO = { new JdbcUtils.ColType("HIERARCHY_NAME", 1), new JdbcUtils.ColType("HIERARCHY_TYPE", 1), new JdbcUtils.ColType("DESCR", 1), new JdbcUtils.ColType("SUGGESTED_CP_VIS_ID", 1), new JdbcUtils.ColType("IS_DUMMY", 0) };

    protected static final JdbcUtils.ColType[] GLOBAL_HIERARCHIES_COL_INFO = { new JdbcUtils.ColType("CMPY", 1), new JdbcUtils.ColType("HIERARCHY_NAME", 1), new JdbcUtils.ColType("HIERARCHY_TYPE", 1), new JdbcUtils.ColType("DESCR", 1), new JdbcUtils.ColType("SUGGESTED_CP_VIS_ID", 1), new JdbcUtils.ColType("IS_DUMMY", 0) };

    /* 2529 */protected static final JdbcUtils.ColType[] GROUPS_COL_INFO = { new JdbcUtils.ColType("ELEM", 1), new JdbcUtils.ColType("IS_LEAF", 1), new JdbcUtils.ColType("NODE_TYPE", 0), new JdbcUtils.ColType("MAP_TYPE", 0), new JdbcUtils.ColType("ACC_TYPE", 1), new JdbcUtils.ColType("DESCR", 1) };

    protected static final JdbcUtils.ColType[] GLOBAL_GROUPS_COL_INFO = { new JdbcUtils.ColType("CMPY", 1), new JdbcUtils.ColType("ELEM", 1), new JdbcUtils.ColType("IS_LEAF", 1), new JdbcUtils.ColType("NODE_TYPE", 0), new JdbcUtils.ColType("MAP_TYPE", 0), new JdbcUtils.ColType("ACC_TYPE", 1), new JdbcUtils.ColType("DESCR", 1) };

    /* 2595 */protected static final JdbcUtils.ColType[] HIER_ELEMS_COL_INFO = { new JdbcUtils.ColType("ELEM", 1), new JdbcUtils.ColType("IS_LEAF", 1), new JdbcUtils.ColType("DESCR", 1) };

    protected static final JdbcUtils.ColType[] GLOBAL_HIER_ELEMS_COL_INFO = { new JdbcUtils.ColType("CMPY", 1), new JdbcUtils.ColType("ELEM", 1), new JdbcUtils.ColType("IS_LEAF", 1), new JdbcUtils.ColType("DESCR", 1) };
    /*      */
    /* 2660 */protected static final JdbcUtils.ColType[] COMPARE_DIMENSION = { new JdbcUtils.ColType("TYPE", 1), new JdbcUtils.ColType("ACTION", 1), new JdbcUtils.ColType("VIS_ID", 1), new JdbcUtils.ColType("DESCR", 1), new JdbcUtils.ColType("NOT_PLANNABLE", 1), new JdbcUtils.ColType("DISABLED", 1), new JdbcUtils.ColType("IS_CREDIT", 1), new JdbcUtils.ColType("CHILD_INDEX", 1), new JdbcUtils.ColType("OWNING_VIS_ID", 1), new JdbcUtils.ColType("KEY1", 1), new JdbcUtils.ColType("KEY2", 1),
            new JdbcUtils.ColType("KEY3", 1), new JdbcUtils.ColType("KEY4", 1), new JdbcUtils.ColType("KEY5", 1), new JdbcUtils.ColType("KEY6", 1) };
    /*      */
    /* 3921 */private static final JdbcUtils.ColType[] E5_DB2_PUSH_DATA_QUERY_COL_INFO = { new JdbcUtils.FinanceCubeRefColType("FINANCE_CUBE_REF", "FINANCE_CUBE_ID", "FINANCE_CUBE_VIS_ID"), new JdbcUtils.ColType("FINANCE_CUBE_DESCR", 1), new JdbcUtils.ColType("CMPY", 1), new JdbcUtils.ColType("BAL", 1), new JdbcUtils.ColType("CURR", 1), new JdbcUtils.ColType("BAL_TYPE", 1) };
    /*      */private static final String E5_DB2_PUSH_DATA_QUERY = " select  distinct\t\t\t\t\t\t\t\t\t\t \n          FINANCE_CUBE_ID\t\t\t\t\t\t\t\t \n         ,FINANCE_CUBE_VIS_ID\t\t\t\t\t\t\t \n         ,FINANCE_CUBE_DESCR\t\t\t\t\t\t\t \n         ,COMPANY_VIS_ID           as CMPY\t\t\t\t \n         ,VALUE_TYPE               as BAL\t\t\t\t \n         ,nvl(CURRENCY_CODE,'   ') as CURR\t\t\t\t \n         ,CURRENCY_TYPE            as BAL_TYPE\t\t\t \n  from   EXPORT_VIEW_LIST\t\t\t\t\t\t\t\t \n  where  EXTERNAL_SYSTEM_TYPE = 5\t\t\t\t\t\t \n  and    VIEWNAME is not null\t\t\t\t\t\t\t \n  order by FINANCE_CUBE_VIS_ID, CMPY, BAL, CURR, BAL_TYPE   ";
    /*      */protected static final int OA_PROGRESS_DATABASE = 0;
    /*      */protected static final int OA_ORACLE_DATABASE = 1;
    /*      */protected static final int OA_SQLSERVER_DATABASE = 2;
    /*      */private OaAccessorDAO mOaAccessorDAO;
    /*      */private AdAccessorDAO mAdAccessorDAO;
    /*      */private Integer mDBType;
    /*      */protected ExtSysCompanyDAO mExtSysCompanyDAO;
    /*      */protected ExtSysPropertyDAO mExtSysPropertyDAO;
    /*      */protected ExternalSystemEVO mDetails;

    /*      */
    /*      */public ExternalSystemDAO(Connection connection)
    /*      */{
        /* 54 */super(connection);
        /*      */}

    /*      */
    /*      */public ExternalSystemDAO()
    /*      */{
        /*      */}

    /*      */
    /*      */public ExternalSystemDAO(DataSource ds)
    /*      */{
        /* 70 */super(ds);
        /*      */}

    /*      */
    /*      */protected ExternalSystemPK getPK()
    /*      */{
        /* 78 */return this.mDetails.getPK();
        /*      */}

    /*      */
    /*      */public void setDetails(ExternalSystemEVO details)
    /*      */{
        /* 87 */this.mDetails = details.deepClone();
        /*      */}

    /*      */
    /*      */public ExternalSystemEVO setAndGetDetails(ExternalSystemEVO details, String dependants)
    /*      */{
        /* 98 */setDetails(details);
        /* 99 */generateKeys();
        /* 100 */getDependants(this.mDetails, dependants);
        /* 101 */return this.mDetails.deepClone();
        /*      */}

    /*      */
    /*      */public ExternalSystemPK create()
    /*      */throws DuplicateNameValidationException, ValidationException
    /*      */{
        /* 110 */doCreate();
        /*      */
        /* 112 */return this.mDetails.getPK();
        /*      */}

    /*      */
    /*      */public void load(ExternalSystemPK pk)
    /*      */throws ValidationException
    /*      */{
        /* 122 */doLoad(pk);
        /*      */}

    /*      */
    /*      */public void store()
    /*      */throws DuplicateNameValidationException, VersionValidationException, ValidationException
    /*      */{
        /* 131 */doStore();
        /*      */}

    /*      */
    /*      */public void remove()
    /*      */{
        /* 140 */doRemove();
        /*      */}

    /*      */
    /*      */public ExternalSystemPK findByPrimaryKey(ExternalSystemPK pk_)
    /*      */throws ValidationException
    /*      */{
        /* 149 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 150 */if (exists(pk_))
        /*      */{
            /* 152 */if (timer != null) {
                /* 153 */timer.logDebug("findByPrimaryKey", pk_);
                /*      */}
            /* 155 */return pk_;
            /*      */}
        /*      */
        /* 158 */throw new ValidationException(new StringBuilder().append(pk_).append(" not found").toString());
        /*      */}

    /*      */
    /*      */protected boolean exists(ExternalSystemPK pk)
    /*      */{
        /* 176 */PreparedStatement stmt = null;
        /* 177 */ResultSet resultSet = null;
        /* 178 */boolean returnValue = false;
        /*      */try
        /*      */{
            /* 182 */stmt = getConnection().prepareStatement("select EXTERNAL_SYSTEM_ID from EXTERNAL_SYSTEM where    EXTERNAL_SYSTEM_ID = ? ");
            /*      */
            /* 184 */int col = 1;
            /* 185 */stmt.setInt(col++, pk.getExternalSystemId());
            /*      */
            /* 187 */resultSet = stmt.executeQuery();
            /*      */
            /* 189 */if (!resultSet.next())
                /* 190 */returnValue = false;
            /*      */else
                /* 192 */returnValue = true;
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 196 */throw handleSQLException(pk, "select EXTERNAL_SYSTEM_ID from EXTERNAL_SYSTEM where    EXTERNAL_SYSTEM_ID = ? ", sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 200 */closeResultSet(resultSet);
            /* 201 */closeStatement(stmt);
            /* 202 */closeConnection();
            /*      */}
        /* 204 */return returnValue;
        /*      */}

    /*      */
    /*      */private ExternalSystemEVO getEvoFromJdbc(ResultSet resultSet_)
    /*      */throws SQLException
    /*      */{
        /* 228 */int col = 1;
        /* 229 */ExternalSystemEVO evo = new ExternalSystemEVO(resultSet_.getInt(col++), resultSet_.getInt(col++), resultSet_.getString(col++), resultSet_.getString(col++), resultSet_.getString(col++), resultSet_.getString(col++), resultSet_.getString(col++), resultSet_.getString(col++), resultSet_.getString(col++).equals("Y"), resultSet_.getInt(col++), null, null);
        /*      */
        /* 244 */evo.setUpdatedByUserId(resultSet_.getInt(col++));
        /* 245 */evo.setUpdatedTime(resultSet_.getTimestamp(col++));
        /* 246 */evo.setCreatedTime(resultSet_.getTimestamp(col++));
        /* 247 */return evo;
        /*      */}

    /*      */
    /*      */private int putEvoKeysToJdbc(ExternalSystemEVO evo_, PreparedStatement stmt_, int startCol_) throws SQLException
    /*      */{
        /* 252 */int col = startCol_;
        /* 253 */stmt_.setInt(col++, evo_.getExternalSystemId());
        /* 254 */return col;
        /*      */}

    /*      */
    /*      */private int putEvoDataToJdbc(ExternalSystemEVO evo_, PreparedStatement stmt_, int startCol_) throws SQLException
    /*      */{
        /* 259 */int col = startCol_;
        /* 260 */stmt_.setInt(col++, evo_.getSystemType());
        /* 261 */stmt_.setString(col++, evo_.getVisId());
        /* 262 */stmt_.setString(col++, evo_.getDescription());
        /* 263 */stmt_.setString(col++, evo_.getLocation());
        /* 264 */stmt_.setString(col++, evo_.getConnectorClass());
        /* 265 */stmt_.setString(col++, evo_.getImportSource());
        /* 266 */stmt_.setString(col++, evo_.getExportTarget());
        /* 267 */if (evo_.getEnabled())
            /* 268 */stmt_.setString(col++, "Y");
        /*      */else
            /* 270 */stmt_.setString(col++, " ");
        /* 271 */stmt_.setInt(col++, evo_.getVersionNum());
        /* 272 */stmt_.setInt(col++, evo_.getUpdatedByUserId());
        /* 273 */stmt_.setTimestamp(col++, evo_.getUpdatedTime());
        /* 274 */stmt_.setTimestamp(col++, evo_.getCreatedTime());
        /* 275 */return col;
        /*      */}

    /*      */
    /*      */protected void doLoad(ExternalSystemPK pk)
    /*      */throws ValidationException
    /*      */{
        /* 291 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /*      */
        /* 293 */PreparedStatement stmt = null;
        /* 294 */ResultSet resultSet = null;
        /*      */try
        /*      */{
            /* 298 */stmt = getConnection()
                    .prepareStatement("select EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXTERNAL_SYSTEM.SYSTEM_TYPE,EXTERNAL_SYSTEM.VIS_ID,EXTERNAL_SYSTEM.DESCRIPTION,EXTERNAL_SYSTEM.LOCATION,EXTERNAL_SYSTEM.CONNECTOR_CLASS,EXTERNAL_SYSTEM.IMPORT_SOURCE,EXTERNAL_SYSTEM.EXPORT_TARGET,EXTERNAL_SYSTEM.ENABLED,EXTERNAL_SYSTEM.VERSION_NUM,EXTERNAL_SYSTEM.UPDATED_BY_USER_ID,EXTERNAL_SYSTEM.UPDATED_TIME,EXTERNAL_SYSTEM.CREATED_TIME from EXTERNAL_SYSTEM where    EXTERNAL_SYSTEM_ID = ? ");
            /*      */
            /* 301 */int col = 1;
            /* 302 */stmt.setInt(col++, pk.getExternalSystemId());
            /*      */
            /* 304 */resultSet = stmt.executeQuery();
            /*      */
            /* 306 */if (!resultSet.next()) {
                /* 307 */throw new ValidationException(new StringBuilder().append(getEntityName()).append(" select of ").append(pk).append(" not found").toString());
                /*      */}
            /*      */
            /* 310 */this.mDetails = getEvoFromJdbc(resultSet);
            /* 311 */if (this.mDetails.isModified())
                /* 312 */this._log.info("doLoad", this.mDetails);
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 316 */throw handleSQLException(pk, "select EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID,EXTERNAL_SYSTEM.SYSTEM_TYPE,EXTERNAL_SYSTEM.VIS_ID,EXTERNAL_SYSTEM.DESCRIPTION,EXTERNAL_SYSTEM.LOCATION,EXTERNAL_SYSTEM.CONNECTOR_CLASS,EXTERNAL_SYSTEM.IMPORT_SOURCE,EXTERNAL_SYSTEM.EXPORT_TARGET,EXTERNAL_SYSTEM.ENABLED,EXTERNAL_SYSTEM.VERSION_NUM,EXTERNAL_SYSTEM.UPDATED_BY_USER_ID,EXTERNAL_SYSTEM.UPDATED_TIME,EXTERNAL_SYSTEM.CREATED_TIME from EXTERNAL_SYSTEM where    EXTERNAL_SYSTEM_ID = ? ", sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 320 */closeResultSet(resultSet);
            /* 321 */closeStatement(stmt);
            /* 322 */closeConnection();
            /*      */
            /* 324 */if (timer != null)
                /* 325 */timer.logDebug("doLoad", pk);
            /*      */}
        /*      */}

    /*      */
    /*      */protected void doCreate()
    /*      */throws DuplicateNameValidationException, ValidationException
    /*      */{
        /* 368 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 369 */generateKeys();
        /*      */
        /* 371 */this.mDetails.postCreateInit();
        /*      */
        /* 373 */PreparedStatement stmt = null;
        /*      */try
        /*      */{
            /* 378 */duplicateValueCheckExternalSystemName();
            /*      */
            /* 380 */this.mDetails.setCreatedTime(new Timestamp(new Date().getTime()));
            /* 381 */this.mDetails.setUpdatedTime(new Timestamp(new Date().getTime()));
            /* 382 */stmt = getConnection().prepareStatement("insert into EXTERNAL_SYSTEM ( EXTERNAL_SYSTEM_ID,SYSTEM_TYPE,VIS_ID,DESCRIPTION,LOCATION,CONNECTOR_CLASS,IMPORT_SOURCE,EXPORT_TARGET,ENABLED,VERSION_NUM,UPDATED_BY_USER_ID,UPDATED_TIME,CREATED_TIME) values ( ?,?,?,?,?,?,?,?,?,?,?,?,?)");
            /*      */
            /* 385 */int col = 1;
            /* 386 */col = putEvoKeysToJdbc(this.mDetails, stmt, col);
            /* 387 */col = putEvoDataToJdbc(this.mDetails, stmt, col);
            /*      */
            /* 390 */int resultCount = stmt.executeUpdate();
            /* 391 */if (resultCount != 1)
            /*      */{
                /* 393 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" insert failed (").append(this.mDetails.getPK()).append("): resultCount=").append(resultCount).toString());
                /*      */}
            /*      */
            /* 396 */this.mDetails.reset();
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 400 */throw handleSQLException(this.mDetails.getPK(), "insert into EXTERNAL_SYSTEM ( EXTERNAL_SYSTEM_ID,SYSTEM_TYPE,VIS_ID,DESCRIPTION,LOCATION,CONNECTOR_CLASS,IMPORT_SOURCE,EXPORT_TARGET,ENABLED,VERSION_NUM,UPDATED_BY_USER_ID,UPDATED_TIME,CREATED_TIME) values ( ?,?,?,?,?,?,?,?,?,?,?,?,?)", sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 404 */closeStatement(stmt);
            /* 405 */closeConnection();
            /*      */
            /* 407 */if (timer != null) {
                /* 408 */timer.logDebug("doCreate", this.mDetails.toString());
                /*      */}
            /*      */}
        /*      */
        /*      */try
        /*      */{
            /* 414 */getExtSysCompanyDAO().update(this.mDetails.getExtSysCompaniesMap());
            /*      */
            /* 416 */getExtSysPropertyDAO().update(this.mDetails.getExtSysPropertiesMap());
            /*      */}
        /*      */catch (Exception e)
        /*      */{
            /* 422 */throw new RuntimeException("unexpected exception", e);
            /*      */}
        /*      */}

    /*      */
    /*      */public int reserveIds(int insertCount)
    /*      */{
        /* 442 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /*      */
        /* 444 */PreparedStatement stmt = null;
        /* 445 */ResultSet resultSet = null;
        /* 446 */String sqlString = null;
        /*      */try
        /*      */{
            /* 451 */sqlString = "update EXTERNAL_SYSTEM_SEQ set SEQ_NUM = SEQ_NUM + ?";
            /* 452 */stmt = getConnection().prepareStatement("update EXTERNAL_SYSTEM_SEQ set SEQ_NUM = SEQ_NUM + ?");
            /* 453 */stmt.setInt(1, insertCount);
            /*      */
            /* 455 */int resultCount = stmt.executeUpdate();
            /* 456 */if (resultCount != 1) {
                /* 457 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" reserveIds: update failed: resultCount=").append(resultCount).toString());
                /*      */}
            /* 459 */closeStatement(stmt);
            /*      */
            /* 462 */sqlString = "select SEQ_NUM from EXTERNAL_SYSTEM_SEQ";
            /* 463 */stmt = getConnection().prepareStatement("select SEQ_NUM from EXTERNAL_SYSTEM_SEQ");
            /* 464 */resultSet = stmt.executeQuery();
            /* 465 */if (!resultSet.next())
                /* 466 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" reserveIds: select failed").toString());
            /* 467 */int latestKey = resultSet.getInt(1);
            /*      */
            /* 469 */int i = latestKey - insertCount;
            /*      */return i;
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 473 */throw handleSQLException(sqlString, sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 477 */closeResultSet(resultSet);
            /* 478 */closeStatement(stmt);
            /* 479 */closeConnection();
            /*      */
            /* 481 */if (timer != null)
                /* 482 */timer.logDebug("reserveIds", new StringBuilder().append("keys=").append(insertCount).toString());
            /* 482 */}
        /*      */}

    /*      */
    /*      */public ExternalSystemPK generateKeys()
    /*      */{
        /* 492 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /*      */
        /* 494 */int insertCount = this.mDetails.getInsertCount(0);
        /*      */
        /* 497 */if (insertCount == 0) {
            /* 498 */return this.mDetails.getPK();
            /*      */}
        /* 500 */this.mDetails.assignNextKey(reserveIds(insertCount));
        /*      */
        /* 502 */return this.mDetails.getPK();
        /*      */}

    /*      */
    /*      */protected void duplicateValueCheckExternalSystemName()
    /*      */throws DuplicateNameValidationException
    /*      */{
        /* 515 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 516 */PreparedStatement stmt = null;
        /* 517 */ResultSet resultSet = null;
        /*      */try
        /*      */{
            /* 521 */stmt = getConnection().prepareStatement("select count(*) from EXTERNAL_SYSTEM where    VIS_ID = ? and not(    EXTERNAL_SYSTEM_ID = ? )");
            /*      */
            /* 524 */int col = 1;
            /* 525 */stmt.setString(col++, this.mDetails.getVisId());
            /* 526 */col = putEvoKeysToJdbc(this.mDetails, stmt, col);
            /*      */
            /* 529 */resultSet = stmt.executeQuery();
            /*      */
            /* 531 */if (!resultSet.next()) {
                /* 532 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" select of ").append(getPK()).append(" not found").toString());
                /*      */}
            /*      */
            /* 536 */col = 1;
            /* 537 */int count = resultSet.getInt(col++);
            /* 538 */if (count > 0) {
                /* 539 */throw new DuplicateNameValidationException(new StringBuilder().append(getEntityName()).append(" ").append(getPK()).append(" ExternalSystemName").toString());
                /*      */}
            /*      */
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 545 */throw handleSQLException(getPK(), "select count(*) from EXTERNAL_SYSTEM where    VIS_ID = ? and not(    EXTERNAL_SYSTEM_ID = ? )", sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 549 */closeResultSet(resultSet);
            /* 550 */closeStatement(stmt);
            /* 551 */closeConnection();
            /*      */
            /* 553 */if (timer != null)
                /* 554 */timer.logDebug("duplicateValueCheckExternalSystemName", "");
            /*      */}
        /*      */}

    /*      */
    /*      */protected void doStore()
    /*      */throws DuplicateNameValidationException, VersionValidationException, ValidationException
    /*      */{
        /* 585 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /*      */
        /* 587 */generateKeys();
        /*      */
        /* 592 */PreparedStatement stmt = null;
        /*      */
        /* 594 */boolean mainChanged = this.mDetails.isModified();
        /* 595 */boolean dependantChanged = false;
        /*      */try
        /*      */{
            /* 599 */if (mainChanged) {
                /* 600 */duplicateValueCheckExternalSystemName();
                /*      */}
            /* 602 */if (getExtSysCompanyDAO().update(this.mDetails.getExtSysCompaniesMap())) {
                /* 603 */dependantChanged = true;
                /*      */}
            /*      */
            /* 606 */if (getExtSysPropertyDAO().update(this.mDetails.getExtSysPropertiesMap())) {
                /* 607 */dependantChanged = true;
                /*      */}
            /* 609 */if ((mainChanged) || (dependantChanged))
            /*      */{
                /* 612 */this.mDetails.setVersionNum(this.mDetails.getVersionNum() + 1);
                /*      */
                /* 615 */this.mDetails.setUpdatedTime(new Timestamp(new Date().getTime()));
                /* 616 */stmt = getConnection().prepareStatement("update EXTERNAL_SYSTEM set SYSTEM_TYPE = ?,VIS_ID = ?,DESCRIPTION = ?,LOCATION = ?,CONNECTOR_CLASS = ?,IMPORT_SOURCE = ?,EXPORT_TARGET = ?,ENABLED = ?,VERSION_NUM = ?,UPDATED_BY_USER_ID = ?,UPDATED_TIME = ?,CREATED_TIME = ? where    EXTERNAL_SYSTEM_ID = ? AND VERSION_NUM = ?");
                /*      */
                /* 619 */int col = 1;
                /* 620 */col = putEvoDataToJdbc(this.mDetails, stmt, col);
                /* 621 */col = putEvoKeysToJdbc(this.mDetails, stmt, col);
                /*      */
                /* 623 */stmt.setInt(col++, this.mDetails.getVersionNum() - 1);
                /*      */
                /* 626 */int resultCount = stmt.executeUpdate();
                /*      */
                /* 628 */if (resultCount == 0) {
                    /* 629 */checkVersionNum();
                    /*      */}
                /* 631 */if (resultCount != 1) {
                    /* 632 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" update failed (").append(getPK()).append("): resultCount=").append(resultCount).toString());
                    /*      */}
                /*      */
                /* 635 */this.mDetails.reset();
                /*      */}
            /*      */
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 644 */throw handleSQLException(getPK(), "update EXTERNAL_SYSTEM set SYSTEM_TYPE = ?,VIS_ID = ?,DESCRIPTION = ?,LOCATION = ?,CONNECTOR_CLASS = ?,IMPORT_SOURCE = ?,EXPORT_TARGET = ?,ENABLED = ?,VERSION_NUM = ?,UPDATED_BY_USER_ID = ?,UPDATED_TIME = ?,CREATED_TIME = ? where    EXTERNAL_SYSTEM_ID = ? AND VERSION_NUM = ?", sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 648 */closeStatement(stmt);
            /* 649 */closeConnection();
            /*      */
            /* 651 */if ((timer != null) && (
            /* 652 */(mainChanged) || (dependantChanged)))
                /* 653 */timer.logDebug("store", new StringBuilder().append(this.mDetails.getPK()).append("(").append(mainChanged).append(",").append(dependantChanged).append(")").toString());
            /*      */}
        /*      */}

    /*      */
    /*      */private void checkVersionNum()
    /*      */throws VersionValidationException
    /*      */{
        /* 665 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 666 */PreparedStatement stmt = null;
        /* 667 */ResultSet resultSet = null;
        /*      */try
        /*      */{
            /* 671 */stmt = getConnection().prepareStatement("select VERSION_NUM from EXTERNAL_SYSTEM where EXTERNAL_SYSTEM_ID = ?");
            /*      */
            /* 674 */int col = 1;
            /* 675 */stmt.setInt(col++, this.mDetails.getExternalSystemId());
            /*      */
            /* 678 */resultSet = stmt.executeQuery();
            /*      */
            /* 680 */if (!resultSet.next()) {
                /* 681 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" checkVersionNum: select of ").append(getPK()).append(" not found").toString());
                /*      */}
            /*      */
            /* 684 */col = 1;
            /* 685 */int dbVersionNumber = resultSet.getInt(col++);
            /* 686 */if (this.mDetails.getVersionNum() - 1 != dbVersionNumber) {
                /* 687 */throw new VersionValidationException(new StringBuilder().append(getEntityName()).append(" ").append(getPK()).append(" expected:").append(this.mDetails.getVersionNum() - 1).append(" found:").append(dbVersionNumber).toString());
                /*      */}
            /*      */
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 693 */throw handleSQLException(getPK(), "select VERSION_NUM from EXTERNAL_SYSTEM where EXTERNAL_SYSTEM_ID = ?", sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 697 */closeStatement(stmt);
            /* 698 */closeResultSet(resultSet);
            /*      */
            /* 700 */if (timer != null)
                /* 701 */timer.logDebug("checkVersionNum", this.mDetails.getPK());
            /*      */}
        /*      */}

    /*      */
    /*      */protected void doRemove()
    /*      */{
        /* 718 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 719 */deleteDependants(this.mDetails.getPK());
        /*      */
        /* 724 */PreparedStatement stmt = null;
        /*      */try
        /*      */{
            /* 729 */stmt = getConnection().prepareStatement("delete from EXTERNAL_SYSTEM where    EXTERNAL_SYSTEM_ID = ? ");
            /*      */
            /* 732 */int col = 1;
            /* 733 */stmt.setInt(col++, this.mDetails.getExternalSystemId());
            /*      */
            /* 735 */int resultCount = stmt.executeUpdate();
            /*      */
            /* 737 */if (resultCount != 1) {
                /* 738 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" delete failed (").append(getPK()).append("): resultCount=").append(resultCount).toString());
                /*      */}
            /*      */
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 744 */throw handleSQLException(getPK(), "delete from EXTERNAL_SYSTEM where    EXTERNAL_SYSTEM_ID = ? ", sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 748 */closeStatement(stmt);
            /* 749 */closeConnection();
            /*      */
            /* 751 */if (timer != null)
                /* 752 */timer.logDebug("remove", this.mDetails.getPK());
            /*      */}
        /*      */}

    /*      */
    /*      */public AllExternalSystemsELO getAllExternalSystems()
    /*      */{
        /* 788 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 789 */PreparedStatement stmt = null;
        /* 790 */ResultSet resultSet = null;
        /* 791 */AllExternalSystemsELO results = new AllExternalSystemsELO();
        /*      */try
        /*      */{
            /* 794 */stmt = getConnection().prepareStatement(SQL_ALL_EXTERNAL_SYSTEMS);
            /* 795 */int col = 1;
            /* 796 */resultSet = stmt.executeQuery();
            /* 797 */while (resultSet.next())
            /*      */{
                /* 799 */col = 2;
                /*      */
                /* 802 */ExternalSystemPK pkExternalSystem = new ExternalSystemPK(resultSet.getInt(col++));
                /*      */
                /* 805 */String textExternalSystem = resultSet.getString(col++);
                /*      */
                /* 809 */ExternalSystemRefImpl erExternalSystem = new ExternalSystemRefImpl(pkExternalSystem, textExternalSystem);
                /*      */
                /* 814 */int col1 = resultSet.getInt(col++);
                /* 815 */String col2 = resultSet.getString(col++);
                /* 816 */String col3 = resultSet.getString(col++);
                /* 817 */String col4 = resultSet.getString(col++);
                /* 818 */String col5 = resultSet.getString(col++);
                /* 819 */String col6 = resultSet.getString(col++);
                /* 820 */String col7 = resultSet.getString(col++);
                /* 821 */if (resultSet.wasNull()) {
                    /* 822 */col7 = "";
                    /*      */}
                /*      */
                /* 825 */results.add(erExternalSystem, col1, col2, col3, col4, col5, col6, col7.equals("Y"));
                /*      */}
            /*      */
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 839 */throw handleSQLException(SQL_ALL_EXTERNAL_SYSTEMS, sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 843 */closeResultSet(resultSet);
            /* 844 */closeStatement(stmt);
            /* 845 */closeConnection();
            /*      */}
        /*      */
        /* 848 */if (timer != null) {
            /* 849 */timer.logDebug("getAllExternalSystems", new StringBuilder().append(" items=").append(results.size()).toString());
            /*      */}
        /*      */
        /* 853 */return results;
        /*      */}

    /*      */
    /*      */public AllGenericExternalSystemsELO getAllGenericExternalSystems()
    /*      */{
        /* 888 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 889 */PreparedStatement stmt = null;
        /* 890 */ResultSet resultSet = null;
        /* 891 */AllGenericExternalSystemsELO results = new AllGenericExternalSystemsELO();
        /*      */try
        /*      */{
            /* 894 */stmt = getConnection().prepareStatement(SQL_ALL_GENERIC_EXTERNAL_SYSTEMS);
            /* 895 */int col = 1;
            /* 896 */resultSet = stmt.executeQuery();
            /* 897 */while (resultSet.next())
            /*      */{
                /* 899 */col = 2;
                /*      */
                /* 902 */ExternalSystemPK pkExternalSystem = new ExternalSystemPK(resultSet.getInt(col++));
                /*      */
                /* 905 */String textExternalSystem = resultSet.getString(col++);
                /*      */
                /* 909 */ExternalSystemRefImpl erExternalSystem = new ExternalSystemRefImpl(pkExternalSystem, textExternalSystem);
                /*      */
                /* 914 */int col1 = resultSet.getInt(col++);
                /* 915 */String col2 = resultSet.getString(col++);
                /* 916 */String col3 = resultSet.getString(col++);
                /* 917 */String col4 = resultSet.getString(col++);
                /* 918 */String col5 = resultSet.getString(col++);
                /* 919 */String col6 = resultSet.getString(col++);
                /* 920 */String col7 = resultSet.getString(col++);
                /* 921 */if (resultSet.wasNull()) {
                    /* 922 */col7 = "";
                    /*      */}
                /*      */
                /* 925 */results.add(erExternalSystem, col1, col2, col3, col4, col5, col6, col7.equals("Y"));
                /*      */}
            /*      */
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 939 */throw handleSQLException(SQL_ALL_GENERIC_EXTERNAL_SYSTEMS, sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 943 */closeResultSet(resultSet);
            /* 944 */closeStatement(stmt);
            /* 945 */closeConnection();
            /*      */}
        /*      */
        /* 948 */if (timer != null) {
            /* 949 */timer.logDebug("getAllGenericExternalSystems", new StringBuilder().append(" items=").append(results.size()).toString());
            /*      */}
        /*      */
        /* 953 */return results;
        /*      */}

    /*      */
    /*      */private void deleteDependants(ExternalSystemPK pk)
    /*      */{
        /* 1201 */Set emptyStrings = Collections.emptySet();
        /* 1202 */deleteDependants(pk, emptyStrings);
        /*      */}

    /*      */
    /*      */private void deleteDependants(ExternalSystemPK pk, Set<String> exclusionTables)
    /*      */{
        /* 1208 */for (int i = SQL_DELETE_CHILDRENS_DEPENDANTS.length - 1; i > -1; i--)
        /*      */{
            /* 1210 */if (exclusionTables.contains(SQL_DELETE_CHILDRENS_DEPENDANTS[i][0]))
                /*      */continue;
            /* 1212 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
            /*      */
            /* 1214 */PreparedStatement stmt = null;
            /*      */
            /* 1216 */int resultCount = 0;
            /* 1217 */String s = null;
            /*      */try
            /*      */{
                /* 1220 */s = new StringBuilder().append(SQL_DELETE_CHILDRENS_DEPENDANTS[i][1]).append(SQL_DELETE_DEPENDANT_CRITERIA).toString();
                /*      */
                /* 1222 */if (this._log.isDebugEnabled()) {
                    /* 1223 */this._log.debug("deleteDependants", s);
                    /*      */}
                /* 1225 */stmt = getConnection().prepareStatement(s);
                /*      */
                /* 1228 */int col = 1;
                /* 1229 */stmt.setInt(col++, pk.getExternalSystemId());
                /*      */
                /* 1232 */resultCount = stmt.executeUpdate();
                /*      */}
            /*      */catch (SQLException sqle)
            /*      */{
                /* 1236 */throw handleSQLException(pk, s, sqle);
                /*      */}
            /*      */finally
            /*      */{
                /* 1240 */closeStatement(stmt);
                /* 1241 */closeConnection();
                /*      */
                /* 1243 */if (timer != null) {
                    /* 1244 */timer.logDebug("deleteDependants", new StringBuilder().append("A[").append(i).append("] count=").append(resultCount).toString());
                    /*      */}
                /*      */}
            /*      */}
        /* 1248 */for (int i = SQL_DELETE_CHILDREN.length - 1; i > -1; i--)
        /*      */{
            /* 1250 */if (exclusionTables.contains(SQL_DELETE_CHILDREN[i][0]))
                /*      */continue;
            /* 1252 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
            /*      */
            /* 1254 */PreparedStatement stmt = null;
            /*      */
            /* 1256 */int resultCount = 0;
            /* 1257 */String s = null;
            /*      */try
            /*      */{
                /* 1260 */s = SQL_DELETE_CHILDREN[i][1];
                /*      */
                /* 1262 */if (this._log.isDebugEnabled()) {
                    /* 1263 */this._log.debug("deleteDependants", s);
                    /*      */}
                /* 1265 */stmt = getConnection().prepareStatement(s);
                /*      */
                /* 1268 */int col = 1;
                /* 1269 */stmt.setInt(col++, pk.getExternalSystemId());
                /*      */
                /* 1272 */resultCount = stmt.executeUpdate();
                /*      */}
            /*      */catch (SQLException sqle)
            /*      */{
                /* 1276 */throw handleSQLException(pk, s, sqle);
                /*      */}
            /*      */finally
            /*      */{
                /* 1280 */closeStatement(stmt);
                /* 1281 */closeConnection();
                /*      */
                /* 1283 */if (timer != null)
                    /* 1284 */timer.logDebug("deleteDependants", new StringBuilder().append("B[").append(i).append("] count=").append(resultCount).toString());
                /*      */}
            /*      */}
        /*      */}

    /*      */
    /*      */public ExternalSystemEVO getDetails(ExternalSystemPK pk, String dependants)
    /*      */throws ValidationException
    /*      */{
        /* 1314 */return getDetails(new ExternalSystemCK(pk), dependants);
        /*      */}

    /*      */
    /*      */public ExternalSystemEVO getDetails(ExternalSystemCK paramCK, String dependants)
    /*      */throws ValidationException
    /*      */{
        /* 1353 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /*      */
        /* 1356 */if (this.mDetails == null) {
            /* 1357 */doLoad(paramCK.getExternalSystemPK());
            /*      */}
        /* 1359 */else if (!this.mDetails.getPK().equals(paramCK.getExternalSystemPK())) {
            /* 1360 */doLoad(paramCK.getExternalSystemPK());
            /*      */}
        /* 1362 */else if (!checkIfValid())
        /*      */{
            /* 1364 */this._log.info("getDetails", new StringBuilder().append("[ALERT] ExternalSystemEVO ").append(this.mDetails.getPK()).append(" no longer valid - reloading").toString());
            /*      */
            /* 1366 */doLoad(paramCK.getExternalSystemPK());
            /*      */}
        /*      */
        /* 1382 */if ((dependants.indexOf("<0>") > -1) && (!this.mDetails.isExtSysCompaniesAllItemsLoaded()))
        /*      */{
            /* 1387 */this.mDetails.setExtSysCompanies(getExtSysCompanyDAO().getAll(this.mDetails.getExternalSystemId(), dependants, this.mDetails.getExtSysCompanies()));
            /*      */
            /* 1394 */this.mDetails.setExtSysCompaniesAllItemsLoaded(true);
            /*      */}
        /*      */
        /* 1398 */if ((dependants.indexOf("<11>") > -1) && (!this.mDetails.isExtSysPropertiesAllItemsLoaded()))
        /*      */{
            /* 1403 */this.mDetails.setExtSysProperties(getExtSysPropertyDAO().getAll(this.mDetails.getExternalSystemId(), dependants, this.mDetails.getExtSysProperties()));
            /*      */
            /* 1410 */this.mDetails.setExtSysPropertiesAllItemsLoaded(true);
            /*      */}
        /*      */
        /* 1413 */if ((paramCK instanceof ExtSysCompanyCK))
        /*      */{
            /* 1415 */if (this.mDetails.getExtSysCompanies() == null) {
                /* 1416 */this.mDetails.loadExtSysCompaniesItem(getExtSysCompanyDAO().getDetails(paramCK, dependants));
                /*      */}
            /*      */else {
                /* 1419 */ExtSysCompanyPK pk = ((ExtSysCompanyCK) paramCK).getExtSysCompanyPK();
                /* 1420 */ExtSysCompanyEVO evo = this.mDetails.getExtSysCompaniesItem(pk);
                /* 1421 */if (evo == null)
                    /* 1422 */this.mDetails.loadExtSysCompaniesItem(getExtSysCompanyDAO().getDetails(paramCK, dependants));
                /*      */else {
                    /* 1424 */getExtSysCompanyDAO().getDetails(paramCK, evo, dependants);
                    /*      */}
                /*      */}
            /*      */}
        /* 1428 */else if ((paramCK instanceof ExtSysPropertyCK))
        /*      */{
            /* 1430 */if (this.mDetails.getExtSysProperties() == null) {
                /* 1431 */this.mDetails.loadExtSysPropertiesItem(getExtSysPropertyDAO().getDetails(paramCK, dependants));
                /*      */}
            /*      */else {
                /* 1434 */ExtSysPropertyPK pk = ((ExtSysPropertyCK) paramCK).getExtSysPropertyPK();
                /* 1435 */ExtSysPropertyEVO evo = this.mDetails.getExtSysPropertiesItem(pk);
                /* 1436 */if (evo == null) {
                    /* 1437 */this.mDetails.loadExtSysPropertiesItem(getExtSysPropertyDAO().getDetails(paramCK, dependants));
                    /*      */}
                /*      */}
            /*      */}
        /*      */
        /* 1442 */ExternalSystemEVO details = new ExternalSystemEVO();
        /* 1443 */details = this.mDetails.deepClone();
        /*      */
        /* 1445 */if (timer != null) {
            /* 1446 */timer.logDebug("getDetails", new StringBuilder().append(paramCK).append(" ").append(dependants).toString());
            /*      */}
        /* 1448 */return details;
        /*      */}

    /*      */
    /*      */private boolean checkIfValid()
    /*      */{
        /* 1458 */boolean stillValid = false;
        /* 1459 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 1460 */PreparedStatement stmt = null;
        /* 1461 */ResultSet resultSet = null;
        /*      */try
        /*      */{
            /* 1464 */stmt = getConnection().prepareStatement("select VERSION_NUM from EXTERNAL_SYSTEM where   EXTERNAL_SYSTEM_ID = ?");
            /* 1465 */int col = 1;
            /* 1466 */stmt.setInt(col++, this.mDetails.getExternalSystemId());
            /*      */
            /* 1468 */resultSet = stmt.executeQuery();
            /*      */
            /* 1470 */if (!resultSet.next()) {
                /* 1471 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" checkIfValid ").append(this.mDetails.getPK()).append(" not found").toString());
                /*      */}
            /* 1473 */col = 1;
            /* 1474 */int dbVersionNum = resultSet.getInt(col++);
            /*      */
            /* 1476 */if (dbVersionNum == this.mDetails.getVersionNum())
                /* 1477 */stillValid = true;
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 1481 */throw handleSQLException(this.mDetails.getPK(), "select VERSION_NUM from EXTERNAL_SYSTEM where   EXTERNAL_SYSTEM_ID = ?", sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 1485 */closeResultSet(resultSet);
            /* 1486 */closeStatement(stmt);
            /* 1487 */closeConnection();
            /*      */
            /* 1489 */if (timer != null) {
                /* 1490 */timer.logDebug("checkIfValid", this.mDetails.getPK());
                /*      */}
            /*      */}
        /* 1493 */return stillValid;
        /*      */}

    /*      */
    /*      */public ExternalSystemEVO getDetails(String dependants)
    /*      */throws ValidationException
    /*      */{
        /* 1499 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /*      */
        /* 1501 */if (!checkIfValid())
        /*      */{
            /* 1503 */this._log.info("getDetails", new StringBuilder().append("ExternalSystem ").append(this.mDetails.getPK()).append(" no longer valid - reloading").toString());
            /* 1504 */doLoad(this.mDetails.getPK());
            /*      */}
        /*      */
        /* 1508 */getDependants(this.mDetails, dependants);
        /*      */
        /* 1511 */ExternalSystemEVO details = this.mDetails.deepClone();
        /*      */
        /* 1513 */if (timer != null) {
            /* 1514 */timer.logDebug("getDetails", new StringBuilder().append(this.mDetails.getPK()).append(" ").append(dependants).toString());
            /*      */}
        /* 1516 */return details;
        /*      */}

    /*      */
    /*      */protected ExtSysCompanyDAO getExtSysCompanyDAO()
    /*      */{
        /* 1525 */if (this.mExtSysCompanyDAO == null)
        /*      */{
            /* 1527 */if (this.mDataSource != null)
                /* 1528 */this.mExtSysCompanyDAO = new ExtSysCompanyDAO(this.mDataSource);
            /*      */else {
                /* 1530 */this.mExtSysCompanyDAO = new ExtSysCompanyDAO(getConnection());
                /*      */}
            /*      */}
        /* 1533 */return this.mExtSysCompanyDAO;
        /*      */}

    /*      */
    /*      */protected ExtSysPropertyDAO getExtSysPropertyDAO()
    /*      */{
        /* 1542 */if (this.mExtSysPropertyDAO == null)
        /*      */{
            /* 1544 */if (this.mDataSource != null)
                /* 1545 */this.mExtSysPropertyDAO = new ExtSysPropertyDAO(this.mDataSource);
            /*      */else {
                /* 1547 */this.mExtSysPropertyDAO = new ExtSysPropertyDAO(getConnection());
                /*      */}
            /*      */}
        /* 1550 */return this.mExtSysPropertyDAO;
        /*      */}

    /*      */
    /*      */public String getEntityName()
    /*      */{
        /* 1555 */return "ExternalSystem";
        /*      */}

    /*      */
    /*      */public ExternalSystemRef getRef(ExternalSystemPK paramExternalSystemPK)
    /*      */throws ValidationException
    /*      */{
        /* 1561 */ExternalSystemEVO evo = getDetails(paramExternalSystemPK, "");
        /* 1562 */return evo.getEntityRef();
        /*      */}

    /*      */
    /*      */public void getDependants(Collection c, String dependants)
    /*      */{
        /* 1981 */if (c == null)
            /* 1982 */return;
        /* 1983 */Iterator iter = c.iterator();
        /* 1984 */while (iter.hasNext())
        /*      */{
            /* 1986 */ExternalSystemEVO evo = (ExternalSystemEVO) iter.next();
            /* 1987 */getDependants(evo, dependants);
            /*      */}
        /*      */}

    /*      */
    /*      */public void getDependants(ExternalSystemEVO evo, String dependants)
    /*      */{
        /* 2001 */if (evo.getExternalSystemId() < 1) {
            /* 2002 */return;
            /*      */}
        /*      */
        /* 2014 */if ((dependants.indexOf("<0>") > -1) || (dependants.indexOf("<1>") > -1) || (dependants.indexOf("<2>") > -1) || (dependants.indexOf("<3>") > -1) || (dependants.indexOf("<4>") > -1) || (dependants.indexOf("<5>") > -1) || (dependants.indexOf("<6>") > -1) || (dependants.indexOf("<7>") > -1) || (dependants.indexOf("<8>") > -1) || (dependants.indexOf("<9>") > -1) || (dependants.indexOf("<10>") > -1))
        /*      */{
            /* 2027 */if (!evo.isExtSysCompaniesAllItemsLoaded())
            /*      */{
                /* 2029 */evo.setExtSysCompanies(getExtSysCompanyDAO().getAll(evo.getExternalSystemId(), dependants, evo.getExtSysCompanies()));
                /*      */
                /* 2036 */evo.setExtSysCompaniesAllItemsLoaded(true);
                /*      */}
            /* 2038 */getExtSysCompanyDAO().getDependants(evo.getExtSysCompanies(), dependants);
            /*      */}
        /*      */
        /* 2042 */if (dependants.indexOf("<11>") > -1)
        /*      */{
            /* 2045 */if (!evo.isExtSysPropertiesAllItemsLoaded())
            /*      */{
                /* 2047 */evo.setExtSysProperties(getExtSysPropertyDAO().getAll(evo.getExternalSystemId(), dependants, evo.getExtSysProperties()));
                /*      */
                /* 2054 */evo.setExtSysPropertiesAllItemsLoaded(true);
                /*      */}
            /*      */}
        /*      */}

    /*      */
    /*      */private String getMappingSql(int systemType, String function, int nParams)
    /*      */{
        /* 2073 */StringBuffer params = new StringBuffer();
        /* 2074 */params.append('(');
        /* 2075 */for (int i = 0; i < nParams; i++)
        /*      */{
            /* 2077 */if (i > 0)
                /* 2078 */params.append(',');
            /* 2079 */params.append('?');
            /*      */}
        /* 2081 */if (isOracleSql(systemType))
            /* 2082 */params.append(",?");
        /* 2083 */params.append(')');
        /*      */
        /* 2085 */if (isOracleSql(systemType)) {
            /* 2086 */return new StringBuilder().append("begin ExtSysAccessor.").append(function).append(params).append("; end;").toString();
            /*      */}
        /* 2088 */return new StringBuilder().append("begin ? := OaAccessor.").append(function).append(params).append("; end;").toString();
        /*      */}

    /*      */
    /*      */private boolean isOracleSql(int systemType)
    /*      */{
        /* 2096 */if (systemType == 5)
            /* 2097 */return true;
        /* 2098 */if (systemType == 3)
            /* 2099 */return true;
        /* 2100 */if (systemType == 20) {
            /* 2101 */return true;
            /*      */}
        /* 2103 */return getDBType() == 1;
        /*      */}

    /*      */
    /*      */public EntityList getCompanies(int systemId, int systemType)
    /*      */{
        /* 2123 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 2124 */CallableStatement stmt = null;
        /* 2125 */ResultSet resultSet = null;
        /* 2126 */EntityList returnList = null;
        /* 2127 */String sql = getMappingSql(systemType, "getCompanies", 2);
        /* 2128 */int col = 1;
        /*      */try
        /*      */{
            /* 2131 */stmt = getConnection().prepareCall(sql);
            /* 2132 */stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            /* 2133 */stmt.setInt(col++, systemId);
            /* 2134 */stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            /* 2135 */stmt.execute();
            /* 2136 */if (isOracleSql(systemType))
            /*      */{
                /* 2138 */resultSet = (ResultSet) stmt.getObject(1);
                /* 2139 */returnList = JdbcUtils.extractToEntityListImpl(COMPANIES_COL_INFO, resultSet);
                /*      */}
            /*      */else
            /*      */{
                /* 2143 */sql = stmt.getString(1);
                /* 2144 */returnList = getOaAccessorDAO().getCompanies(sql);
                /*      */}
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 2149 */this._log.debug(sql);
            /* 2150 */System.err.println(sqle);
            /* 2151 */sqle.printStackTrace();
            /* 2152 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getCompanies").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 2156 */closeResultSet(resultSet);
            /* 2157 */closeStatement(stmt);
            /* 2158 */closeConnection();
            /*      */}
        /* 2160 */if (timer != null) {
            /* 2161 */timer.logDebug("getCompanies", new StringBuilder().append("extsys=").append(systemType).append(" rows=").append(returnList.getNumRows()).toString());
            /*      */}
        /*      */
        /* 2164 */return returnList;
        /*      */}

    /*      */
    /*      */public EntityList getFinanceCalendarYears(int systemId, int systemType, String company)
    /*      */{
        /* 2178 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 2179 */CallableStatement stmt = null;
        /* 2180 */ResultSet resultSet = null;
        /* 2181 */EntityList returnList = null;
        /* 2182 */String sql = getMappingSql(systemType, "getFinanceCalendarYears", 3);
        /* 2183 */int col = 1;
        /*      */try
        /*      */{
            /* 2186 */stmt = getConnection().prepareCall(sql);
            /* 2187 */stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            /* 2188 */stmt.setInt(col++, systemId);
            /* 2189 */stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            /* 2190 */stmt.setString(col++, company);
            /* 2191 */stmt.execute();
            /* 2192 */if (isOracleSql(systemType))
            /*      */{
                /* 2194 */resultSet = (ResultSet) stmt.getObject(1);
                /* 2195 */returnList = JdbcUtils.extractToEntityListImpl(CALENDARS_COL_INFO, resultSet);
                /*      */}
            /*      */else
            /*      */{
                /* 2199 */sql = stmt.getString(1);
                /* 2200 */returnList = getOaAccessorDAO().getFinanceCalendarYears(sql, company);
                /*      */}
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 2205 */this._log.debug(sql);
            /* 2206 */System.err.println(sqle);
            /* 2207 */sqle.printStackTrace();
            /* 2208 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceCalendarYears").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 2212 */closeResultSet(resultSet);
            /* 2213 */closeStatement(stmt);
            /* 2214 */closeConnection();
            /* 2215 */if (timer != null) {
                /* 2216 */timer.logDebug("getFinanceCalendarYears", new StringBuilder().append("extsys=").append(systemType).append(" company=").append(company).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
                /*      */}
            /*      */}
        /*      */
        /* 2220 */return returnList;
        /*      */}

    public EntityList getGlobalFinanceCalendarYears(int systemId, int systemType, List<String> companies) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        ResultSet resultSet = null;
        EntityList returnList = null;
        String sql = getMappingSql(systemType, "getFinanceCalendarYears", 3);
        int col = 1;
        try {
            stmt = getConnection().prepareCall(sql);
            stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            stmt.setInt(col++, systemId);
            stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            stmt.setString(col++, "?");
            stmt.execute();
            if (isOracleSql(systemType)) {
                resultSet = (ResultSet) stmt.getObject(1);
                returnList = JdbcUtils.extractToEntityListImpl(CALENDARS_COL_INFO, resultSet);
            } else {
                sql = stmt.getString(1);
                returnList = getOaAccessorDAO().getGlobalFinanceCalendarYears(sql, companies);
            }
        } catch (SQLException sqle) {
            this._log.debug(sql);
            System.err.println(sqle);
            sqle.printStackTrace();
            throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceCalendarYears").toString(), sqle);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
            if (timer != null) {
                timer.logDebug("getFinanceCalendarYears", new StringBuilder().append("extsys=").append(systemType).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
            }
        }

        return returnList;
    }

    /*      */public EntityList getFinancePeriods(int systemId, int systemType, String company, int year)
    /*      */{
        /* 2235 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 2236 */CallableStatement stmt = null;
        /* 2237 */ResultSet resultSet = null;
        /* 2238 */EntityList returnList = null;
        /* 2239 */String sql = getMappingSql(systemType, "getFinancePeriods", 4);
        /* 2240 */int col = 1;
        /*      */try
        /*      */{
            /* 2243 */stmt = getConnection().prepareCall(sql);
            /* 2244 */stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            /* 2245 */stmt.setInt(col++, systemId);
            /* 2246 */stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            /* 2247 */stmt.setString(col++, company);
            /* 2248 */stmt.setInt(col++, year);
            /* 2249 */stmt.execute();
            /* 2250 */if (isOracleSql(systemType))
            /*      */{
                /* 2252 */resultSet = (ResultSet) stmt.getObject(1);
                /* 2253 */returnList = JdbcUtils.extractToEntityListImpl(PERIODS_COL_INFO, resultSet);
                /*      */}
            /*      */else
            /*      */{
                /* 2257 */sql = stmt.getString(1);
                /* 2258 */returnList = getOaAccessorDAO().getFinancePeriods(sql, company, year);
                /*      */}
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 2263 */this._log.debug(sql);
            /* 2264 */System.err.println(sqle);
            /* 2265 */sqle.printStackTrace();
            /* 2266 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinancePeriods").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 2270 */closeResultSet(resultSet);
            /* 2271 */closeStatement(stmt);
            /* 2272 */closeConnection();
            /* 2273 */if (timer != null) {
                /* 2274 */timer.logDebug("getFinancePeriods", new StringBuilder().append("extsys=").append(systemType).append(" company=").append(company).append(" year=").append(year).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
                /*      */}
            /*      */}
        /*      */
        /* 2278 */return returnList;
        /*      */}

    /*      */
    /*      */public EntityList getFinanceLedgers(int systemId, int systemType, String company)
    /*      */{
        /* 2293 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 2294 */CallableStatement stmt = null;
        /* 2295 */ResultSet resultSet = null;
        /* 2296 */EntityList returnList = null;
        /* 2297 */String sql = getMappingSql(systemType, "getFinanceLedgers", 3);
        /* 2298 */int col = 1;
        /*      */try
        /*      */{
            /* 2301 */stmt = getConnection().prepareCall(sql);
            /* 2302 */stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            /* 2303 */stmt.setInt(col++, systemId);
            /* 2304 */stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            /* 2305 */stmt.setString(col++, company);
            /* 2306 */stmt.execute();
            /* 2307 */if (isOracleSql(systemType))
            /*      */{
                /* 2309 */resultSet = (ResultSet) stmt.getObject(1);
                /* 2310 */returnList = JdbcUtils.extractToEntityListImpl(LEDGERS_COL_INFO, resultSet);
                /*      */}
            /*      */else
            /*      */{
                /* 2314 */sql = stmt.getString(1);
                /* 2315 */returnList = getOaAccessorDAO().getFinanceLedgers(sql, company);
                /*      */}
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 2320 */this._log.debug(sql);
            /* 2321 */System.err.println(sqle);
            /* 2322 */sqle.printStackTrace();
            /* 2323 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceLedgers").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 2327 */closeResultSet(resultSet);
            /* 2328 */closeStatement(stmt);
            /* 2329 */closeConnection();
            /* 2330 */if (timer != null) {
                /* 2331 */timer.logDebug("getFinanceLedgers", new StringBuilder().append("extsys=").append(systemType).append(" company=").append(company).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
                /*      */}
            /*      */}
        /*      */
        /* 2335 */return returnList;
        /*      */}

    /*      */
    /*      */public EntityList getFinanceDimensions(int systemId, int systemType, String company, String ledger)
    /*      */{
        /* 2356 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 2357 */CallableStatement stmt = null;
        /* 2358 */ResultSet resultSet = null;
        /* 2359 */EntityList returnList = null;
        /* 2360 */String sql = getMappingSql(systemType, "getFinanceDimensions", 4);
        /* 2361 */this._log.debug("getFinanceDimensions", new StringBuilder().append("sysId=").append(systemId).append(" sysType=").append(systemType).append(" cmpy=").append(company).append(" ledger=").append(ledger).toString());
        /* 2362 */int col = 1;
        /*      */try
        /*      */{
            /* 2365 */stmt = getConnection().prepareCall(sql);
            /* 2366 */stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            /* 2367 */stmt.setInt(col++, systemId);
            /* 2368 */stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            /* 2369 */stmt.setString(col++, company);
            /* 2370 */stmt.setString(col++, ledger);
            /* 2371 */stmt.execute();
            /* 2372 */if (isOracleSql(systemType))
            /*      */{
                /* 2374 */resultSet = (ResultSet) stmt.getObject(1);
                /* 2375 */returnList = JdbcUtils.extractToEntityListImpl(DIMENSIONS_COL_INFO, resultSet);
                /*      */}
            /*      */else
            /*      */{
                /* 2379 */sql = stmt.getString(1);
                /* 2380 */returnList = getOaAccessorDAO().getFinanceDimensions(sql, company, ledger);
                /*      */}
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 2385 */this._log.debug(sql);
            /* 2386 */System.err.println(sqle);
            /* 2387 */sqle.printStackTrace();
            /* 2388 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceDimensions").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 2392 */closeResultSet(resultSet);
            /* 2393 */closeStatement(stmt);
            /* 2394 */closeConnection();
            /* 2395 */if (timer != null) {
                /* 2396 */timer.logDebug("getFinanceDimensions", new StringBuilder().append("extsys=").append(systemType).append(" company=").append(company).append(" ledger=").append(ledger).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
                /*      */}
            /*      */}
        /*      */
        /* 2400 */return returnList;
        /*      */}

    public EntityList getGlobalFinanceDimensions(int systemId, int systemType, List<String> companies, String ledger) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        ResultSet resultSet = null;
        EntityList returnList = null;
        String sql = getMappingSql(systemType, "getFinanceDimensions", 4);
        this._log.debug("getGlobalFinanceDimensions", new StringBuilder().append("sysId=").append(systemId).append(" sysType=").append(systemType).append(" ledger=").append(ledger).toString());
        int col = 1;
        try {
            stmt = getConnection().prepareCall(sql);
            stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            stmt.setInt(col++, systemId);
            stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            stmt.setString(col++, companies.get(0));
            stmt.setString(col++, ledger);
            stmt.execute();
            if (isOracleSql(systemType)) {
                resultSet = (ResultSet) stmt.getObject(1);
                returnList = JdbcUtils.extractToEntityListImpl(DIMENSIONS_COL_INFO, resultSet);
            } else {
                sql = stmt.getString(1);
                returnList = getOaAccessorDAO().getGlobalFinanceDimensions(sql, companies, ledger);
            }
        } catch (SQLException sqle) {
            this._log.debug(sql);
            System.err.println(sqle);
            sqle.printStackTrace();
            throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getGlobalFinanceDimensions").toString(), sqle);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
            if (timer != null) {
                timer.logDebug("getFinanceDimensions", new StringBuilder().append("extsys=").append(systemType).append(" ledger=").append(ledger).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
            }
        }

        return returnList;
    }

    /*      */public EntityList getFinanceValueTypes(int systemId, int systemType, String company, String ledger, String dimCodes, int startYear, int cursorNum)
    /*      */{
        /* 2417 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 2418 */CallableStatement stmt = null;
        /* 2419 */ResultSet resultSet = null;
        /* 2420 */EntityList returnList = null;
        /* 2421 */String sql = getMappingSql(systemType, "getFinanceValueTypes", 7);
        /* 2422 */int col = 1;
        /*      */try
        /*      */{
            /* 2425 */stmt = getConnection().prepareCall(sql);
            /* 2426 */stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            /* 2427 */stmt.setInt(col++, systemId);
            /* 2428 */stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            /* 2429 */stmt.setString(col++, company);
            /* 2430 */stmt.setString(col++, ledger);
            /* 2431 */stmt.setString(col++, dimCodes);
            /* 2432 */stmt.setInt(col++, startYear);
            /* 2433 */stmt.setInt(col++, cursorNum);
            /* 2434 */stmt.execute();
            /* 2435 */if (isOracleSql(systemType))
            /*      */{
                /* 2437 */resultSet = (ResultSet) stmt.getObject(1);
                /* 2438 */returnList = JdbcUtils.extractToEntityListImpl(VALUE_TYPES_COL_INFO, resultSet);
                /*      */}
            /*      */else
            /*      */{
                /* 2442 */sql = stmt.getString(1);
                /* 2443 */returnList = getOaAccessorDAO().getFinanceValueTypes(sql, company, ledger, dimCodes);
                /*      */}
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 2448 */this._log.debug(sql);
            /* 2449 */System.err.println(sqle);
            /* 2450 */sqle.printStackTrace();
            /* 2451 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceValueTypes").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 2455 */closeResultSet(resultSet);
            /* 2456 */closeStatement(stmt);
            /* 2457 */closeConnection();
            /* 2458 */if (timer != null) {
                /* 2459 */timer.logDebug("getFinanceValueTypes", new StringBuilder().append("extsys=").append(systemType).append(" company=").append(company).append(" ledger=").append(ledger).append(" dimCodes=").append(dimCodes).append(" startYear=").append(startYear).append(" cursorNum=").append(cursorNum).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
                /*      */}
            /*      */
            /*      */}
        /*      */
        /* 2465 */return returnList;
        /*      */}

    public EntityList getGlobalFinanceValueTypes(int systemId, int systemType, List<String> companies, String ledger, String dimCodes, int startYear, int cursorNum) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        ResultSet resultSet = null;
        EntityList returnList = null;
        String sql = getMappingSql(systemType, "getFinanceValueTypes", 7);
        int col = 1;
        try {
            stmt = getConnection().prepareCall(sql);
            stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            stmt.setInt(col++, systemId);
            stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            stmt.setString(col++, "?");
            stmt.setString(col++, ledger);
            stmt.setString(col++, dimCodes);
            stmt.setInt(col++, startYear);
            stmt.setInt(col++, cursorNum);
            stmt.execute();
            if (isOracleSql(systemType)) {
                resultSet = (ResultSet) stmt.getObject(1);
                returnList = JdbcUtils.extractToEntityListImpl(VALUE_TYPES_COL_INFO, resultSet);
            } else {
                sql = stmt.getString(1);
                returnList = getOaAccessorDAO().getGlobalFinanceValueTypes(sql, companies, ledger, dimCodes);
            }
        } catch (SQLException sqle) {
            this._log.debug(sql);
            System.err.println(sqle);
            sqle.printStackTrace();
            throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceValueTypes").toString(), sqle);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
            if (timer != null) {
                timer.logDebug("getFinanceValueTypes", new StringBuilder().append("extsys=").append(systemType).append(" company=").append(companies).append(" ledger=").append(ledger).append(" dimCodes=").append(dimCodes).append(" startYear=").append(startYear).append(" cursorNum=").append(cursorNum).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
            }

        }

        return returnList;
    }

    /*      */public EntityList getFinanceHierarchies(int systemId, int systemType, String company, String ledger, String extSysDimType, String dimCode)
    /*      */{
        /* 2480 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 2481 */CallableStatement stmt = null;
        /* 2482 */ResultSet resultSet = null;
        /* 2483 */EntityList returnList = null;
        /* 2484 */String sql = getMappingSql(systemType, "getFinanceHierarchies", 6);
        /* 2485 */int col = 1;
        /*      */try
        /*      */{
            /* 2488 */stmt = getConnection().prepareCall(sql);
            /* 2489 */stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            /* 2490 */stmt.setInt(col++, systemId);
            /* 2491 */stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            /* 2492 */stmt.setString(col++, company);
            /* 2493 */stmt.setString(col++, ledger);
            /* 2494 */stmt.setString(col++, extSysDimType);
            /* 2495 */stmt.setString(col++, dimCode);
            /* 2496 */stmt.execute();
            /* 2497 */if (isOracleSql(systemType))
            /*      */{
                /* 2499 */resultSet = (ResultSet) stmt.getObject(1);
                /* 2500 */returnList = JdbcUtils.extractToEntityListImpl(HIERARCHIES_COL_INFO, resultSet);
                /*      */}
            /*      */else
            /*      */{
                /* 2504 */sql = stmt.getString(1);
                /* 2505 */returnList = getOaAccessorDAO().getFinanceHierarchies(sql, company, ledger, extSysDimType, dimCode);
                /*      */}
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 2510 */this._log.debug(sql);
            /* 2511 */System.err.println(sqle);
            /* 2512 */sqle.printStackTrace();
            /* 2513 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceHierarchies").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 2517 */closeResultSet(resultSet);
            /* 2518 */closeStatement(stmt);
            /* 2519 */closeConnection();
            /* 2520 */if (timer != null) {
                /* 2521 */timer.logDebug("getFinanceHierarchies", new StringBuilder().append("extsys=").append(systemType).append(" company=").append(company).append(" ledger=").append(ledger).append(" extsysDimType=").append(extSysDimType).append(" dimCode=").append(dimCode).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
                /*      */}
            /*      */
            /*      */}
        /*      */
        /* 2526 */return returnList;
        /*      */}

    public EntityList getGlobalFinanceHierarchies(int systemId, int systemType, List<String> companies, String ledger, String extSysDimType, String dimCode) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        ResultSet resultSet = null;
        EntityList returnList = null;
        String sql = getMappingSql(systemType, "getFinanceHierarchies", 6);
        int col = 1;
        try {
            stmt = getConnection().prepareCall(sql);
            stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            stmt.setInt(col++, systemId);
            stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            stmt.setString(col++, "?");
            stmt.setString(col++, ledger);
            stmt.setString(col++, extSysDimType);
            stmt.setString(col++, dimCode);
            stmt.execute();
            if (isOracleSql(systemType)) {
                resultSet = (ResultSet) stmt.getObject(1);
                returnList = JdbcUtils.extractToEntityListImpl(HIERARCHIES_COL_INFO, resultSet);
            } else {
                sql = stmt.getString(1);
                returnList = getOaAccessorDAO().getGlobalFinanceHierarchies(sql, companies, ledger, extSysDimType, dimCode);
            }
        } catch (SQLException sqle) {
            this._log.debug(sql);
            System.err.println(sqle);
            sqle.printStackTrace();
            throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getGlobalFinanceHierarchies").toString(), sqle);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
            if (timer != null) {
                timer.logDebug("getFinanceHierarchies", new StringBuilder().append("extsys=").append(systemType).append(" ledger=").append(ledger).append(" extsysDimType=").append(extSysDimType).append(" dimCode=").append(dimCode).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
            }
        }

        return returnList;
    }

    /*      */public EntityList getFinanceDimElementGroups(int systemId, int systemType, String company, String ledger, String extSysDimType, String dimCode, int parentType, String parent, String accType)
    /*      */{
        /* 2542 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 2543 */CallableStatement stmt = null;
        /* 2544 */ResultSet resultSet = null;
        /* 2545 */EntityList returnList = null;
        /* 2546 */String sql = getMappingSql(systemType, "getFinanceDimElementGroups", 9);
        /* 2547 */int col = 1;
        /*      */try
        /*      */{
            /* 2550 */stmt = getConnection().prepareCall(sql);
            /* 2551 */stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            /* 2552 */stmt.setInt(col++, systemId);
            /* 2553 */stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            /* 2554 */stmt.setString(col++, company);
            /* 2555 */stmt.setString(col++, ledger);
            /* 2556 */stmt.setString(col++, extSysDimType);
            /* 2557 */stmt.setString(col++, dimCode);
            /* 2558 */stmt.setInt(col++, parentType);
            /* 2559 */stmt.setString(col++, parent);
            /* 2560 */stmt.setString(col++, accType);
            /* 2561 */stmt.execute();
            /* 2562 */if (isOracleSql(systemType))
            /*      */{
                /* 2564 */resultSet = (ResultSet) stmt.getObject(1);
                /* 2565 */returnList = JdbcUtils.extractToEntityListImpl(GROUPS_COL_INFO, resultSet);
                /*      */}
            /*      */else
            /*      */{
                /* 2569 */sql = stmt.getString(1);
                /* 2570 */returnList = getOaAccessorDAO().getFinanceDimElementGroups(sql, company, ledger, extSysDimType, dimCode, parentType, parent, accType);
                /*      */}
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 2575 */this._log.debug(sql);
            /* 2576 */System.err.println(sqle);
            /* 2577 */sqle.printStackTrace();
            /* 2578 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceDimElementGroups").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 2582 */closeResultSet(resultSet);
            /* 2583 */closeStatement(stmt);
            /* 2584 */closeConnection();
            /* 2585 */if (timer != null) {
                /* 2586 */timer.logDebug("getFinanceDimElementGroups",
                        new StringBuilder().append("extsys=").append(systemType).append(" company=").append(company).append(" ledger=").append(ledger).append(" extsysDimType=").append(extSysDimType).append(" dimCode=").append(dimCode).append(" parentType=").append(parentType).append(" parent=").append(parent).append(" accType=").append(accType).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
                /*      */}
            /*      */
            /*      */}
        /*      */
        /* 2592 */return returnList;
        /*      */}

    public EntityList getGlobalFinanceDimElementGroups(int systemId, int systemType, List<String> companies, String ledger, String extSysDimType, String dimCode, int parentType, String parent, String accType) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        ResultSet resultSet = null;
        EntityList returnList = null;
        String sql = getMappingSql(systemType, "getFinanceDimElementGroups", 9);
        int col = 1;
        try {
            stmt = getConnection().prepareCall(sql);
            stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            stmt.setInt(col++, systemId);
            stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            stmt.setString(col++, "?");
            stmt.setString(col++, ledger);
            stmt.setString(col++, extSysDimType);
            stmt.setString(col++, dimCode);
            stmt.setInt(col++, parentType);
            stmt.setString(col++, parent);
            stmt.setString(col++, accType);
            stmt.execute();
            if (isOracleSql(systemType)) {
                resultSet = (ResultSet) stmt.getObject(1);
                returnList = JdbcUtils.extractToEntityListImpl(GROUPS_COL_INFO, resultSet);
            } else {
                sql = stmt.getString(1);
                returnList = getOaAccessorDAO().getGlobalFinanceDimElementGroups(sql, companies, ledger, extSysDimType, dimCode, parentType, parent, accType);
            }
        } catch (SQLException sqle) {
            this._log.debug(sql);
            System.err.println(sqle);
            sqle.printStackTrace();
            throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceDimElementGroups").toString(), sqle);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
            if (timer != null) {
                timer.logDebug("getFinanceDimElementGroups", new StringBuilder().append("extsys=").append(systemType).append(" ledger=").append(ledger).append(" extsysDimType=").append(extSysDimType).append(" dimCode=").append(dimCode).append(" parentType=").append(parentType).append(" parent=").append(parent).append(" accType=").append(accType).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
            }

        }
        return returnList;
    }

    /*      */public EntityList getFinanceHierarchyElems(int systemId, int systemType, String company, String ledger, String extSysDimType, String dimCode, String hierName, String hierType, String parent)
    /*      */{
        /* 2605 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 2606 */CallableStatement stmt = null;
        /* 2607 */ResultSet resultSet = null;
        /* 2608 */EntityList returnList = null;
        /* 2609 */String sql = getMappingSql(systemType, "getFinanceHierarchyElems", 9);
        /* 2610 */int col = 1;
        /*      */try
        /*      */{
            /* 2613 */stmt = getConnection().prepareCall(sql);
            /* 2614 */stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            /* 2615 */stmt.setInt(col++, systemId);
            /* 2616 */stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            /* 2617 */stmt.setString(col++, company);
            /* 2618 */stmt.setString(col++, ledger);
            /* 2619 */stmt.setString(col++, extSysDimType);
            /* 2620 */stmt.setString(col++, dimCode);
            /* 2621 */stmt.setString(col++, hierName);
            /* 2622 */stmt.setString(col++, hierType);
            /* 2623 */stmt.setString(col++, parent);
            /* 2624 */stmt.execute();
            /* 2625 */if (isOracleSql(systemType))
            /*      */{
                /* 2627 */resultSet = (ResultSet) stmt.getObject(1);
                /* 2628 */returnList = JdbcUtils.extractToEntityListImpl(HIER_ELEMS_COL_INFO, resultSet);
                /*      */}
            /*      */else
            /*      */{
                /* 2632 */sql = stmt.getString(1);
                /* 2633 */returnList = getOaAccessorDAO().getFinanceHierarchyElems(sql, company, ledger, extSysDimType, dimCode, hierName, hierType, parent);
                /*      */}
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 2638 */this._log.debug(sql);
            /* 2639 */System.err.println(sqle);
            /* 2640 */sqle.printStackTrace();
            /* 2641 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceHierarchyElems").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 2645 */closeResultSet(resultSet);
            /* 2646 */closeStatement(stmt);
            /* 2647 */closeConnection();
            /* 2648 */if (timer != null) {
                /* 2649 */timer.logDebug("getFinanceHierarchyElems", new StringBuilder().append("extsys=").append(systemType).append(" company=").append(company).append(" ledger=").append(ledger).append(" extsysDimType=").append(extSysDimType).append(" dimCode=").append(dimCode).append(" hier=").append(hierName).append(" hierType=").append(hierType).append(" parent=").append(parent).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "")
                        .toString());
                /*      */}
            /*      */
            /*      */}
        /*      */
        /* 2656 */return returnList;
        /*      */}

    public EntityList getGlobalFinanceHierarchyElems(int systemId, int systemType, List<String> companies, String ledger, String extSysDimType, String dimCode, String hierName, String hierType, String parent) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        ResultSet resultSet = null;
        EntityList returnList = null;
        String sql = getMappingSql(systemType, "getFinanceHierarchyElems", 9);
        int col = 1;
        try {
            stmt = getConnection().prepareCall(sql);
            stmt.registerOutParameter(col++, isOracleSql(systemType) ? -10 : 12);
            stmt.setInt(col++, systemId);
            stmt.setInt(col++, isOracleSql(systemType) ? systemType : getDBType());
            stmt.setString(col++, "?");
            stmt.setString(col++, ledger);
            stmt.setString(col++, extSysDimType);
            stmt.setString(col++, dimCode);
            stmt.setString(col++, hierName);
            stmt.setString(col++, hierType);
            stmt.setString(col++, parent);
            stmt.execute();
            if (isOracleSql(systemType)) {
                resultSet = (ResultSet) stmt.getObject(1);
                returnList = JdbcUtils.extractToEntityListImpl(HIER_ELEMS_COL_INFO, resultSet);
            } else {
                sql = stmt.getString(1);
                returnList = getOaAccessorDAO().getGlobalFinanceHierarchyElems(sql, companies, ledger, extSysDimType, dimCode, hierName, hierType, parent);
            }
        } catch (SQLException sqle) {
            this._log.debug(sql);
            System.err.println(sqle);
            sqle.printStackTrace();
            throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceHierarchyElems").toString(), sqle);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
            if (timer != null) {
                timer.logDebug("getFinanceHierarchyElems", new StringBuilder().append("extsys=").append(systemType).append(" ledger=").append(ledger).append(" extsysDimType=").append(extSysDimType).append(" dimCode=").append(dimCode).append(" hier=").append(hierName).append(" hierType=").append(hierType).append(" parent=").append(parent).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
            }
        }

        return returnList;
    }

    public EntityList importDimension(int taskId, int systemType, int dimensionId) {
        return this.importDimension(taskId, systemType, dimensionId, 0);
    }

    public EntityList importDimension(int taskId, int systemType, int dimensionId, int companyId) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        ResultSet resultSet = null;
        EntityList returnList = null;
        String sql = null, sql1, sql2;
        
        // Get your database connection (session)
        //Connection conn = getConnection();
        // Start Oracle Debugger
        //startOracleDebugger(conn);

        int col = 1;
        try {
            if (!isOracleSql(systemType)) {
                if (companyId > 0) {
                    sql = "begin OaAccessor.getDimensionGlobalImportSQL(?,?,?,?);end;";
                    stmt = getConnection().prepareCall(sql);
                    stmt.setInt(col++, dimensionId);
                    stmt.setInt(col++, companyId);
                    stmt.registerOutParameter(col++, 12);
                    stmt.registerOutParameter(col++, 12);
                    stmt.execute();
                    sql1 = stmt.getString(3);
                    sql2 = stmt.getString(4);
                } else {
                    sql = "begin OaAccessor.getDimensionImportSQL(?,?,?);end;";
                    stmt = getConnection().prepareCall(sql);
                    stmt.setInt(col++, dimensionId);
                    stmt.registerOutParameter(col++, 12);
                    stmt.registerOutParameter(col++, 12);
                    stmt.execute();
                    sql1 = stmt.getString(2);
                    sql2 = stmt.getString(3);
                }
                getOaAccessorDAO().getUnfilteredDimension(sql1, sql2);
            }
            col = 1;
            
//            getConnection().prepareCall("begin COMMIT; end;").execute();
//            
//            getConnection().prepareCall("begin delete from FS_DE; delete from FS_HE; delete from FS_HEF; end;").execute();
            
//            if (companyId > 0) {
//                sql = "begin import_utils.getDimensionGlobal(?,?,?,?); end;";
//                stmt = getConnection().prepareCall(sql);
//                stmt.setInt(col++, taskId);
//                stmt.setInt(col++, dimensionId);
//                stmt.setInt(col++, companyId);
//                stmt.registerOutParameter(col++, -10);
//                stmt.execute();
//                resultSet = (ResultSet) stmt.getObject(4);
//            } else {
                sql = "begin import_utils.getDimension(?,?,?); end;";
                stmt = getConnection().prepareCall(sql);
                stmt.setInt(col++, taskId);
                stmt.setInt(col++, dimensionId);
                stmt.registerOutParameter(col++, -10);
                stmt.execute();
                resultSet = (ResultSet) stmt.getObject(3);
//            }
            returnList = JdbcUtils.extractToEntityListImpl(COMPARE_DIMENSION, resultSet);
        } catch (SQLException sqle) {
            this._log.debug(sql);
            System.err.println(sqle);
            sqle.printStackTrace();
            throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" importDimension").toString(), sqle);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
            if (timer != null) {
                timer.logDebug("importDimension", new StringBuilder().append("extsys=").append(systemType).append(" dimension=").append(dimensionId).append(returnList != null ? new StringBuilder().append(" rows=").append(returnList.getNumRows()).toString() : "").toString());
            }
        }

        // Informacyjnie
        for (int i = 0; i < returnList.getNumRows(); ++i) {
            String type = (String) returnList.getValueAt(i, "TYPE");
            String action = (String) returnList.getValueAt(i, "ACTION");
            String visId = (String) returnList.getValueAt(i, "VIS_ID");
            String descr = (String) returnList.getValueAt(i, "DESCR");
            String notPlannableStr = (String) returnList.getValueAt(i, "NOT_PLANNABLE");
            String disabledStr = (String) returnList.getValueAt(i, "DISABLED");
            String isCreditStr = (String) returnList.getValueAt(i, "IS_CREDIT");
            String childIndexStr = (String) returnList.getValueAt(i, "CHILD_INDEX");
            String owningVisId = (String) returnList.getValueAt(i, "OWNING_VIS_ID");
            String key1 = (String) returnList.getValueAt(i, "KEY1");
            String key2 = (String) returnList.getValueAt(i, "KEY2");
            String key3 = (String) returnList.getValueAt(i, "KEY3");
            String key4 = (String) returnList.getValueAt(i, "KEY4");
            String key5 = (String) returnList.getValueAt(i, "KEY5");
            String key6 = (String) returnList.getValueAt(i, "KEY6");
            String diagSequence = key1 + "," + key2 + "," + key3 + "," + key4 + "," + key5 + "," + key6;
            System.out.println("importDimension " + i + " " + type + " " + action + " " + visId + (descr != null ? " descr=" + descr : "") + (notPlannableStr != null ? " notPlannable=" + notPlannableStr : "") + (disabledStr != null ? " disabled=" + disabledStr : "") + (isCreditStr != null ? " isCredit=" + isCreditStr : "") + (owningVisId != null ? " owningVisId=" + owningVisId : "") + (childIndexStr != null ? " childIndex=" + childIndexStr : "") + " (seq=" + diagSequence + ")");
        }
        

        // Stop Oracle Debugger
        //stopOracleDebugger(conn);

        return returnList;
    }

    public void insertOaDimElemBatch(List<Object[]> rowList) {
        String sql = "insert into OA_DE (VIS_ID,DESCR,ACCOUNT_TYPE,DISABLED) values(?,?,?,?)";

        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        try {
            stmt = getConnection().prepareStatement(sql);

            for (Object[] dets: rowList) {
                int col = 0;
                String visId = (String) dets[(col++)];
                String descr = (String) dets[(col++)];
                String accountType = (String) dets[(col++)];
                String disabled = (String) dets[(col++)];

                col = 1;
                stmt.setString(col++, visId);
                stmt.setString(col++, descr);
                stmt.setString(col++, accountType);
                stmt.setString(col++, disabled);

                this._log.debug(new StringBuilder().append("insert into OA_DE values('").append(visId).append("'").append(",'").append(descr).append("'").append(",").append(accountType == null ? "" : new StringBuilder().append("'").append(accountType).append("'").toString()).append(",'").append(disabled).append("');").toString());

                stmt.addBatch();
            }

            stmt.executeBatch();
        } catch (SQLException e) {
            this._log.debug(sql);
            System.err.println(e);
            e.printStackTrace();
            throw new RuntimeException("insertOaDimElemBatch", e);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
            if (timer != null)
                timer.logDebug("insertOaDimElemBatch", new StringBuilder().append("rows=").append(rowList.size()).toString());
        }
    }

    public void insertOaHierElemBatch(List<Object[]> rowList) {
        String sql = "insert into OA_HE (HIERARCHY_NAME,VIS_ID,OWNING_VIS_ID,DESCR,IS_LEAF) values(?,?,?,?,?)";

        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        try {
            stmt = getConnection().prepareStatement(sql);

            for (Object[] dets: rowList) {
                int col = 0;
                String hierName = (String) dets[(col++)];
                String visId = (String) dets[(col++)];
                String owningVisId = (String) dets[(col++)];
                String descr = (String) dets[(col++)];
                String isLeaf = (String) dets[(col++)];

                if ((owningVisId != null) && (owningVisId.length() == 0)) {
                    owningVisId = null;
                }
                col = 1;
                stmt.setString(col++, hierName);
                stmt.setString(col++, visId);
                stmt.setString(col++, owningVisId);
                stmt.setString(col++, descr);
                stmt.setString(col++, isLeaf);

                this._log.debug(new StringBuilder().append("insert into OA_HE values('").append(hierName).append("'").append(",'").append(visId).append("'").append(",").append(owningVisId == null ? "" : new StringBuilder().append("'").append(owningVisId).append("'").toString()).append(",'").append(descr).append("'").append(",'").append(isLeaf).append("');").toString());

                stmt.addBatch();
            }

            stmt.executeBatch();
        } catch (SQLException e) {
            this._log.debug(sql);
            System.err.println(e);
            e.printStackTrace();
            throw new RuntimeException("insertOaHierElemBatch", e);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
            if (timer != null)
                timer.logDebug("insertOaHierElemBatch", new StringBuilder().append("rows=").append(rowList.size()).toString());
        }
    }

    public void importValues(int systemType, int stepNumber, int taskId, int financeCubeId) {
        importValues(systemType, stepNumber, taskId, financeCubeId, 0);
    }

    /*      */public void importValues(int systemType, int stepNumber, int taskId, int financeCubeId, int companyId)
    /*      */{
        /* 2854 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /*      */
        /* 2856 */String info = "";
        /*      */
        /* 2858 */if ((stepNumber == 2) &&
        /* 2859 */(systemType == 10) &&
        /* 2860 */(getDBType() != 1)) {
            /* 2861 */info = prepareOaImportValues(taskId, financeCubeId, companyId);
            /*      */}
        /* 2863 */CallableStatement stmt = null;
        /*      */try
        /*      */{
            /* 2866 */stmt = getConnection().prepareCall("{ call import_utils.getValues_step(?,?,?) }");
            /* 2867 */stmt.setInt(1, stepNumber);
            /* 2868 */stmt.setInt(2, taskId);
            /* 2869 */stmt.setInt(3, financeCubeId);
            /*      */
            /* 2871 */stmt.execute();
            /*      */}
        /*      */catch (SQLException e)
        /*      */{
            /* 2875 */e.printStackTrace();
            /* 2876 */throw new RuntimeException(e);
            /*      */}
        /*      */finally
        /*      */{
            /* 2880 */if (timer != null)
                /* 2881 */timer.logDebug("importValues", new StringBuilder().append("step ").append(stepNumber).toString());
            /* 2882 */closeStatement(stmt);
            /* 2883 */closeConnection();
            /*      */}
        /*      */}

    public void importValuesGlobal(int systemType, int stepNumber, int taskId, int financeCubeId, int companyId) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;

        String info = "";

        if ((stepNumber == 2) && (systemType == 10) && (getDBType() != 1)) {
            info = prepareOaImportValues(taskId, financeCubeId, companyId);
        }
        CallableStatement stmt = null;
        try {
            // // Get your database connection (session)
            // Connection conn = getConnection();
            // // Start Oracle Debugger
            // startOracleDebugger(conn);

            stmt = getConnection().prepareCall("{ call import_utils.getValues_step_global(?,?,?,?) }");
            stmt.setInt(1, stepNumber);
            stmt.setInt(2, taskId);
            stmt.setInt(3, financeCubeId);
            stmt.setInt(4, companyId);

            stmt.execute();

            // // Stop Oracle Debugger
            // stopOracleDebugger(conn);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            if (timer != null)
                timer.logDebug("importValues", new StringBuilder().append("step ").append(stepNumber).toString());
            closeStatement(stmt);
            closeConnection();
        }
    }

    /*      */private String prepareOaImportValues(int taskId, int financeCubeId, int companyId) {
        /* 2889 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /* 2890 */CallableStatement stmt = null;
        /* 2891 */String sql = null;
        /*      */
        /* 2894 */int numPeriodColumns = 0;
        /*      */int col;
        /*      */try {
            if (companyId == 0) {
                sql = "begin ? := OaAccessor.getNumPeriodColumnsSql(?,?);end;";
                /* 2898 */stmt = getConnection().prepareCall(sql);
                /* 2899 */col = 1;
                /* 2900 */stmt.registerOutParameter(col++, 12);
                /* 2901 */stmt.setInt(col++, getDBType());
                /* 2902 */stmt.setInt(col++, financeCubeId);
                /* 2903 */stmt.execute();
                /* 2904 */sql = stmt.getString(1);
                /* 2905 */numPeriodColumns = getOaAccessorDAO().getNumPeriodColumns(sql); // TODO: select maxPer from pub.oa_companies where company = 5
            } else {
                sql = "begin ? := OaAccessor.getNumPeriodColumnsSql(?,?,?);end;";
                /* 2898 */stmt = getConnection().prepareCall(sql);
                /* 2899 */col = 1;
                /* 2900 */stmt.registerOutParameter(col++, 12);
                /* 2901 */stmt.setInt(col++, getDBType());
                /* 2902 */stmt.setInt(col++, financeCubeId);
                stmt.setInt(col++, companyId);
                /* 2903 */stmt.execute();
                /* 2904 */sql = stmt.getString(1);
                /* 2905 */numPeriodColumns = getOaAccessorDAO().getNumPeriodColumns(sql); // TODO: select maxPer from pub.oa_companies where company = 5
            }
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 2909 */this._log.debug(sql);
            /* 2910 */System.err.println(sqle);
            /* 2911 */sqle.printStackTrace();
            /* 2912 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" prepareOaImportValues - getNumPeriodColumnsSql").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 2916 */closeStatement(stmt);
            /* 2917 */closeConnection();
            /* 2918 */if (timer != null) {
                /* 2919 */timer.logDebug("prepareOaImportValues", new StringBuilder().append("numPeriodColumns=").append(numPeriodColumns).toString());
                /*      */}
            /*      */}
        /*      */
        /*      */try
        /*      */{
            if (companyId == 0) {
                /* 2925 */sql = "begin OaAccessor.getValueImportSql(?,?,?,?,?,?); end;";
                /* 2926 */stmt = getConnection().prepareCall(sql);
                /* 2927 */col = 1;
                /* 2928 */stmt.setInt(col++, getDBType());
                /* 2929 */stmt.setInt(col++, taskId);
                /* 2930 */stmt.setInt(col++, financeCubeId);
                /* 2931 */stmt.setInt(col++, numPeriodColumns);
                /* 2932 */stmt.registerOutParameter(col++, 12);
                /* 2933 */stmt.registerOutParameter(col++, 12);
                /* 2934 */stmt.execute();
                /* 2935 */sql = (String) stmt.getObject(5);
                /* 2936 */if (stmt.getObject(6) != null) {
                    /* 2937 */sql = new StringBuilder().append(sql).append((String) stmt.getObject(6)).toString();
                    /*      */}
            } else {
                sql = "begin OaAccessor.getValueGlobalImportSql(?,?,?,?,?,?,?); end;";
                stmt = getConnection().prepareCall(sql);
                col = 1;
                stmt.setInt(col++, getDBType());
                stmt.setInt(col++, taskId);
                stmt.setInt(col++, financeCubeId);
                stmt.setInt(col++, numPeriodColumns);
                stmt.setInt(col++, companyId);
                stmt.registerOutParameter(col++, 12);
                stmt.registerOutParameter(col++, 12);
                stmt.execute();
                sql = (String) stmt.getObject(6);
                if (stmt.getObject(7) != null) {
                    sql = new StringBuilder().append(sql).append((String) stmt.getObject(7)).toString();
                }
            }

            String info = getOaAccessorDAO().getValues(taskId, financeCubeId, sql);
            String str1 = info;
            return str1;
            /*      */}
        /*      */catch (SQLException sqle)
        /*      */{
            /* 2944 */this._log.debug(sql);
            /* 2945 */System.err.println(sqle);
            /* 2946 */sqle.printStackTrace();
            /* 2947 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" prepareOaImportValues - getValueImportSql").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 2951 */closeStatement(stmt);
            /* 2952 */closeConnection();
            /* 2953 */if (timer != null)
                /* 2954 */timer.logDebug("prepareOaImportValues", "prepareOaImportValues");
            /* 2954 */}// throw localObject2;
        /*      */
    }

    /*      */
    /*      */public void insertOaValueBatch(int taskId, int financeCubeId, List<Object[]> rowList)
    /*      */{
        /* 2960 */int numCols = ((Object[]) rowList.get(0)).length;
        /*      */
        /* 2962 */String sql = new StringBuilder().append("insert into FS_").append(taskId).append("_").append(financeCubeId).append(" values (\n").toString();
        /*      */
        /* 2964 */for (int i = 0; i < numCols; i++)
        /*      */{
            /* 2966 */if (i > 0)
                /* 2967 */sql = new StringBuilder().append(sql).append(",").toString();
            /* 2968 */sql = new StringBuilder().append(sql).append("?").toString();
            /*      */}
        /* 2970 */sql = new StringBuilder().append(sql).append("\n)").toString();
        /*      */
        /* 2972 */PreparedStatement stmt = null;
        /* 2973 */ResultSet resultSet = null;
        /* 2974 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /*      */try
        /*      */{
            /* 2978 */stmt = getConnection().prepareStatement(sql);
            /*      */
            /* 2980 */for (Object[] dets: rowList)
            /*      */{
                /* 2982 */StringBuffer trace = new StringBuffer();
                /* 2983 */for (int i = 0; i < dets.length; i++)
                /*      */{
                    /* 2985 */stmt.setObject(i + 1, dets[i]);
                    /* 2986 */if (trace.length() > 0)
                        /* 2987 */trace.append(',');
                    /* 2988 */trace.append(dets[i]);
                    /*      */}
                /* 2990 */this._log.debug("insertOaValueBatch", new StringBuilder().append("insert into FS_").append(taskId).append("_").append(financeCubeId).append(" values (").append(trace).append(")").toString());
                /*      */
                /* 2993 */stmt.addBatch();
                /*      */}
            /*      */
            /* 2996 */stmt.executeBatch();
            /*      */}
        /*      */catch (SQLException e)
        /*      */{
            /* 3000 */this._log.debug(sql);
            /* 3001 */System.err.println(e);
            /* 3002 */e.printStackTrace();
            /* 3003 */throw new RuntimeException("insertOaValueBatch", e);
            /*      */}
        /*      */finally
        /*      */{
            /* 3007 */closeResultSet(resultSet);
            /* 3008 */closeStatement(stmt);
            /* 3009 */closeConnection();
            /* 3010 */if (timer != null)
                /* 3011 */timer.logDebug("insertOaValueBatch", new StringBuilder().append("rows=").append(rowList.size()).toString());
            /*      */}
        /*      */}

    /*      */

    public int importOaPctrans(int company) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        int added = 0;
        String sql = "SELECT costcentre, project, expensecode, yearno, period, SUM(baseval) as baseval, SUM(qty) as qty FROM PUB.oa_pctrans where company = ? group by company, costcentre, project, expensecode, yearno, period order by company, costcentre, project, expensecode, yearno, period";
        try {
            added = getOaAccessorDAO().importPctransBatch(sql, company);
        } catch (SQLException sqle) {
            this._log.debug(sql);
            System.err.println(sqle);
            sqle.printStackTrace();
            throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" importOaPctrans").toString(), sqle);
        }
        if (timer != null) {
            timer.logDebug("importOaPctrans", "");
        }

        return added;
    }

    public void deleteFromOaPctrans(int company) {
        PreparedStatement ps = null;
        try {
            ps = getConnection().prepareStatement("delete from OA_PCTRANS where company = ?");
            ps.setInt(1, company);
            ps.executeUpdate();
        } catch (SQLException e) {
            throw handleSQLException(new StringBuilder().append("delete from table OA_PCTRANS").toString(), e);
        } finally {
            closeStatement(ps);
            closeConnection();
        }
    }

    public List<Integer> getCompanyList() {
        List<Integer> companyList = new ArrayList<Integer>();
        ResultSet resultSet = null;
        PreparedStatement pss = null;
        try {
            pss = getConnection().prepareStatement("select distinct VIS_ID from MODEL");
            pss.setFetchSize(1);
            resultSet = pss.executeQuery();

            while (resultSet.next()) {
                String company = resultSet.getString("VIS_ID");
                String result = company.split("/")[0];
                if (!result.contains("global")) {
                    try {
                        int cmp = Integer.parseInt(result);

                        if (!companyList.contains(cmp)) {
                            companyList.add(cmp);
                        }
                    } catch (NumberFormatException e) {
                        // TODO Poprawic obsluge bledu
                    }
                }
            }
            return companyList;
        } catch (SQLException e) {
            throw new RuntimeException("Failed to select distinct VIS_ID from MODEL", e);
        } finally {
            closeStatement(pss);
            closeConnection();
        }
    }

    public void insertOaPctransElem(Object[] row) {
        String sql = "insert /*+ IGNORE_ROW_ON_DUPKEY_INDEX(OA_PCTRANS,OA_PCTRANS_PK) */ into OA_PCTRANS (COMPANY, COSTCENTRE, PROJECT, EXPENSECODE, YEARNO, PERIOD, BASEVAL, QTY, CUMBASEVAL, CUMQTY) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        try {
            stmt = getConnection().prepareStatement(sql);

            int col = 0;

            int company = (Integer) row[(col++)];
            String costCentre = (String) row[(col++)];
            String project = (String) row[(col++)];
            String expenseCode = (String) row[(col++)];
            int yearNo = (Integer) row[(col++)];
            int period = (Integer) row[(col++)];
            BigDecimal baseVal = (BigDecimal) row[(col++)];
            BigDecimal qty = (BigDecimal) row[(col++)];

            col = 1;
            stmt.setInt(col++, company);
            stmt.setString(col++, costCentre);
            stmt.setString(col++, project);
            stmt.setString(col++, expenseCode);
            stmt.setInt(col++, yearNo);
            stmt.setInt(col++, period);
            stmt.setBigDecimal(col++, baseVal);
            stmt.setBigDecimal(col++, qty);
            stmt.setBigDecimal(col++, baseVal);
            stmt.setBigDecimal(col++, qty);

            stmt.executeQuery();
        } catch (SQLException e) {
            this._log.debug(sql);
            throw new RuntimeException("insertOaPctransElem", e);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
        }
    }

    public void insertOaPctransElemBatch(List<Object[]> rowList) {
        String sql = "insert /*+ IGNORE_ROW_ON_DUPKEY_INDEX(OA_PCTRANS,OA_PCTRANS_PK) */ into OA_PCTRANS (COMPANY, COSTCENTRE, PROJECT, EXPENSECODE, YEARNO, PERIOD, BASEVAL, QTY, CUMBASEVAL, CUMQTY) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        try {
            stmt = getConnection().prepareStatement(sql);

            for (Object[] row: rowList) {
                int col = 0;
                int company = (Integer) row[(col++)];
                String costCentre = (String) row[(col++)];
                String project = (String) row[(col++)];
                String expenseCode = (String) row[(col++)];
                int yearNo = (Integer) row[(col++)];
                int period = (Integer) row[(col++)];
                BigDecimal baseVal = (BigDecimal) row[(col++)];
                BigDecimal qty = (BigDecimal) row[(col++)];

                col = 1;
                stmt.setInt(col++, company);
                stmt.setString(col++, costCentre);
                stmt.setString(col++, project);
                stmt.setString(col++, expenseCode);
                stmt.setInt(col++, yearNo);
                stmt.setInt(col++, period);
                stmt.setBigDecimal(col++, baseVal);
                stmt.setBigDecimal(col++, qty);
                stmt.setBigDecimal(col++, baseVal);
                stmt.setBigDecimal(col++, qty);

                stmt.addBatch();
            }
            stmt.executeBatch();
        } catch (SQLException e) {
            this._log.debug(sql);
            throw new RuntimeException("insertOaPctransElem", e);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
        }
    }

    public int getMaxId(String tableName) throws SQLException {
        String sql = "";
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        try {
            if (tableName.equals("SaleLot")) {
                sql = "SELECT MAX(ISALELOTNOUNIQUE)  FROM AUCTION_SALELOT";
            } else if (tableName.equals("SaleItem")) {
                sql = "SELECT MAX(ISALEITEMNO)  FROM AUCTION_SALEITEM";
            } else if (tableName.equals("Sale")) {
                sql = "SELECT MAX(ISALENO)  FROM AUCTION_SALE";
            } else if (tableName.equals("SaleBid")) {
                sql = "SELECT MAX(ISALEBIDNO)  FROM AUCTION_SALEBID";
            } else if (tableName.equals("SaleLotCancel")) {
                sql = "SELECT MAX(ISEQNO)  FROM AUCTION_SALELOTCANCEL";
            } else if (tableName.equals("SaleLotA")) {
                sql = "SELECT MAX(ISALELOTNOUNIQUE)  FROM AUCTION_SALELOTA";
            }
            stmt = getConnection().prepareStatement(sql);
            resultSet = stmt.executeQuery();
            int max = 0;
            while (resultSet.next()) {
                max = resultSet.getInt(1);
            }
            return max;
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
        }
    }

    public void insertIntoSaleLotTable(List<Object[]> rowList) {

        String sql = "insert into AUCTION_SALELOT (      iSaleLotNoUnique,      iSaleSectionNo,      iSaleNo,      iSaleLotNo,      iSaleItemNo,      sLotStatus,      dCurrRateSale,      dCurrRateSettlement,      dHammerPrice,      iPaddleNo,      iClientNo,      dPassPrice,      dCommAmt,      dCommPer,      dPremAmt,      dPremPer,      dInsAmt,      dInsPer,      lExtraLot,      iInvoiceNo,      iInvoiceLineNo,      iSettlementNo,      iSettlementLineNo,      dOtherChargeAmt,      dChargeAmtBuy,      dIllustrationFee,      sSaleLotNoA,      dHammerTax,      dPremTax,      dCommTax,      dSalesTax,      dInsTax,      dHammerTaxRate,      dPremTaxRate,      dCommTaxRate,      dSalesTaxRate,      dInsTaxRate,      dChargeAmtBuyTax,      dChargeAmtBuyTaxRate,      iVendorNo,      iCommTaxCode,      iHammerTaxCode,      iPremTaxCode,      dVendorTotal,      dBuyerTotal,      dBuyerNett,      dBuyerTax,      dVendorTax,      dVendorNett,      dBIFee,      dWDFee,      sLotDesc,      lBonded,      dBondValue,      iPaymentNo,      iPaymentLineNo,      dImportDutyRate,      dImportDuty,      dVendorHammerTax,      iProformaInvNo,      iProformaInvLineNo,      iInsTaxCode,      sSalesTaxFN,      iImportDutyCode,      iSalesTaxCode,      dVendorHammerPrice,      dBIFeeTax,      dWDFeeTax,      iReceiptNo,      iReceiptLineNo,      dICTax,      iICSettlementNo,      iVendorPaymentNo,      iICClientNo,      sICRepUserID,      dICCommPer,      dICAmt,      lHeldLot,      iVendorHammerTaxCode,      dVendorHammerTaxRate,      dFaceValue,      iChargeAmtBuyTaxCode,      iHeldLotJobLogNo,      lWDFeeCharged,      dOtherChargeTax,      dIllustrationFeeTax,      dVendorNettAdj,      dVendorTaxAdj,      dVendorNettRefund,      dVendorTaxRefund,      sSaleDivision,      sSaleDepartment,      sReceiptDivision,      sRecDepartment,      iICSettlementLineNo,      dICTaxRate,      iAddressNoShipTo,      iClientResaleNoUnique,      iSalesTaxNo,      lManualBuyerCalc,      lUseResaleLicence,      sResaleItemType,      dICHammerPer,      dICPremPer,      dICFlatFee,      dVendorMerchandiseFeeRate,      dVendorMerchandiseFee,      dVendorImportDutyRate,      dVendorImportDuty,             dVendorSalesTaxRate,      dVendorSalesTaxAmt,                 iCompanyNo,      dBIFeeRate,      sResaleLicenceNo,      sARLType,      lBuyerOptOut,      lAfterSale,      dDiscNet,      dDiscTax,      dDiscAmt,      lDiscFlag,      lARLFlag,      dARLAmt,      iRoyaltyNo,      sLotSymbols,      dHammerPriceGroup,      cBidType,      iClientDealerNoUnique,      lUseDealerLicence,      sDealerLicenceNo) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?)";
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        try {
            stmt = getConnection().prepareStatement(sql);

            for (Object[] dets: rowList) {
                int col = 0;

                int iSaleLotNoUnique = (Integer) dets[(col++)];
                int iSaleSectionNo = (Integer) dets[(col++)];
                int iSaleNo = (Integer) dets[(col++)];
                int iSaleLotNo = (Integer) dets[(col++)];
                int iSaleItemNo = (Integer) dets[(col++)];
                String sLotStatus = (String) dets[(col++)];
                double dCurrRateSale = (Double) dets[(col++)];
                double dCurrRateSettlement = (Double) dets[(col++)];
                double dHammerPrice = (Double) dets[(col++)];
                int iPaddleNo = (Integer) dets[(col++)];
                int iClientNo = (Integer) dets[(col++)];
                double dPassPrice = (Double) dets[(col++)];
                double dCommAmt = (Double) dets[(col++)];
                double dCommPer = (Double) dets[(col++)];
                double dPremAmt = (Double) dets[(col++)];
                double dPremPer = (Double) dets[(col++)];
                double dInsAmt = (Double) dets[(col++)];
                double dInsPer = (Double) dets[(col++)];
                boolean lExtraLot = (Boolean) dets[(col++)];
                int iInvoiceNo = (Integer) dets[(col++)];
                int iInvoiceLineNo = (Integer) dets[(col++)];
                int iSettlementNo = (Integer) dets[(col++)];
                int iSettlementLineNo = (Integer) dets[(col++)];
                int dOtherChargeAmt = (Integer) dets[(col++)];
                double dChargeAmtBuy = (Double) dets[(col++)];
                double dIllustrationFee = (Double) dets[(col++)];
                String sSaleLotNoA = (String) dets[(col++)];
                double dHammerTax = (Double) dets[(col++)];
                double dPremTax = (Double) dets[(col++)];
                double dCommTax = (Double) dets[(col++)];
                double dSalesTax = (Double) dets[(col++)];
                double dInsTax = (Double) dets[(col++)];
                double dHammerTaxRate = (Double) dets[(col++)];
                double dPremTaxRate = (Double) dets[(col++)];
                double dCommTaxRate = (Double) dets[(col++)];
                double dSalesTaxRate = (Double) dets[(col++)];
                double dInsTaxRate = (Double) dets[(col++)];
                double dChargeAmtBuyTax = (Double) dets[(col++)];
                double dChargeAmtBuyTaxRate = (Double) dets[(col++)];
                int iVendorNo = (Integer) dets[(col++)];
                int iCommTaxCode = (Integer) dets[(col++)];
                int iHammerTaxCode = (Integer) dets[(col++)];
                int iPremTaxCode = (Integer) dets[(col++)];
                double dVendorTotal = (Double) dets[(col++)];
                double dBuyerTotal = (Double) dets[(col++)];
                double dBuyerNett = (Double) dets[(col++)];
                double dBuyerTax = (Double) dets[(col++)];
                double dVendorTax = (Double) dets[(col++)];
                double dVendorNett = (Double) dets[(col++)];
                double dBIFee = (Double) dets[(col++)];
                double dWDFee = (Double) dets[(col++)];
                String sLotDesc = (String) dets[(col++)];
                boolean lBonded = (Boolean) dets[(col++)];
                double dBondValue = (Double) dets[(col++)];
                int iPaymentNo = (Integer) dets[(col++)];
                int iPaymentLineNo = (Integer) dets[(col++)];
                double dImportDutyRate = (Double) dets[(col++)];
                double dImportDuty = (Double) dets[(col++)];
                double dVendorHammerTax = (Double) dets[(col++)];
                int iProformaInvNo = (Integer) dets[(col++)];
                int iProformaInvLineNo = (Integer) dets[(col++)];
                int iInsTaxCode = (Integer) dets[(col++)];
                String sSalesTaxFN = (String) dets[(col++)];
                int iImportDutyCode = (Integer) dets[(col++)];
                int iSalesTaxCode = (Integer) dets[(col++)];
                double dVendorHammerPrice = (Double) dets[(col++)];
                double dBIFeeTax = (Double) dets[(col++)];
                double dWDFeeTax = (Double) dets[(col++)];
                int iReceiptNo = (Integer) dets[(col++)];
                int iReceiptLineNo = (Integer) dets[(col++)];
                double dICTax = (Double) dets[(col++)];
                int iICSettlementNo = (Integer) dets[(col++)];
                int iVendorPaymentNo = (Integer) dets[(col++)];
                int iICClientNo = (Integer) dets[(col++)];
                String sICRepUserID = (String) dets[(col++)];
                double dICCommPer = (Double) dets[(col++)];
                double dICAmt = (Double) dets[(col++)];
                boolean lHeldLot = (Boolean) dets[(col++)];
                int iVendorHammerTaxCode = (Integer) dets[(col++)];
                double dVendorHammerTaxRate = (Double) dets[(col++)];
                double dFaceValue = (Double) dets[(col++)];
                int iChargeAmtBuyTaxCode = (Integer) dets[(col++)];
                int iHeldLotJobLogNo = (Integer) dets[(col++)];
                boolean lWDFeeCharged = (Boolean) dets[(col++)];
                double dOtherChargeTax = (Double) dets[(col++)];
                double dIllustrationFeeTax = (Double) dets[(col++)];
                double dVendorNettAdj = (Double) dets[(col++)];
                double dVendorTaxAdj = (Double) dets[(col++)];
                double dVendorNettRefund = (Double) dets[(col++)];
                double dVendorTaxRefund = (Double) dets[(col++)];
                String sSaleDivision = (String) dets[(col++)];
                String sSaleDepartment = (String) dets[(col++)];
                String sReceiptDivision = (String) dets[(col++)];
                String sRecDepartment = (String) dets[(col++)];
                int iICSettlementLineNo = (Integer) dets[(col++)];
                int dICTaxRate = (Integer) dets[(col++)];
                int iAddressNoShipTo = (Integer) dets[(col++)];
                int iClientResaleNoUnique = (Integer) dets[(col++)];
                int iSalesTaxNo = (Integer) dets[(col++)];
                boolean lManualBuyerCalc = (Boolean) dets[(col++)];
                boolean lUseResaleLicence = (Boolean) dets[(col++)];
                String sResaleItemType = (String) dets[(col++)];
                double dICHammerPer = (Double) dets[(col++)];
                double dICPremPer = (Double) dets[(col++)];
                double dICFlatFee = (Double) dets[(col++)];
                double dVendorMerchandiseFeeRate = (Double) dets[(col++)];
                double dVendorMerchandiseFee = (Double) dets[(col++)];
                double dVendorImportDutyRate = (Double) dets[(col++)];
                double dVendorImportDuty = (Double) dets[(col++)];
                double dVendorSalesTaxRate = (Double) dets[(col++)];
                double dVendorSalesTaxAmt = (Double) dets[(col++)];
                int iCompanyNo = (Integer) dets[(col++)];
                double dBIFeeRate = (Double) dets[(col++)];
                String sResaleLicenceNo = (String) dets[(col++)];
                String sARLType = (String) dets[(col++)];
                boolean lBuyerOptOut = (Boolean) dets[(col++)];
                boolean lAfterSale = (Boolean) dets[(col++)];
                double dDiscNet = (Double) dets[(col++)];
                double dDiscTax = (Double) dets[(col++)];
                double dDiscAmt = (Double) dets[(col++)];
                boolean lDiscFlag = (Boolean) dets[(col++)];
                boolean lARLFlag = (Boolean) dets[(col++)];
                double dARLAmt = (Double) dets[(col++)];
                int iRoyaltyNo = (Integer) dets[(col++)];
                String sLotSymbols = (String) dets[(col++)];
                double dHammerPriceGroup = (Double) dets[(col++)];
                String cBidType = (String) dets[(col++)];
                int iClientDealerNoUnique = (Integer) dets[(col++)];
                boolean lUseDealerLicence = (Boolean) dets[(col++)];
                String sDealerLicenceNo = (String) dets[(col++)];

                col = 1;
                stmt.setInt(col++, iSaleLotNoUnique);
                stmt.setInt(col++, iSaleSectionNo);
                stmt.setInt(col++, iSaleNo);
                stmt.setInt(col++, iSaleLotNo);
                stmt.setInt(col++, iSaleItemNo);
                stmt.setString(col++, sLotStatus);
                stmt.setDouble(col++, dCurrRateSale);
                stmt.setDouble(col++, dCurrRateSettlement);
                stmt.setDouble(col++, dHammerPrice);
                stmt.setInt(col++, iPaddleNo);
                stmt.setInt(col++, iClientNo);
                stmt.setDouble(col++, dPassPrice);
                stmt.setDouble(col++, dCommAmt);
                stmt.setDouble(col++, dCommPer);
                stmt.setDouble(col++, dPremAmt);
                stmt.setDouble(col++, dPremPer);
                stmt.setDouble(col++, dInsAmt);
                stmt.setDouble(col++, dInsPer);
                stmt.setBoolean(col++, lExtraLot);
                stmt.setInt(col++, iInvoiceNo);
                stmt.setInt(col++, iInvoiceLineNo);
                stmt.setInt(col++, iSettlementNo);
                stmt.setInt(col++, iSettlementLineNo);
                stmt.setInt(col++, dOtherChargeAmt);
                stmt.setDouble(col++, dChargeAmtBuy);
                stmt.setDouble(col++, dIllustrationFee);
                stmt.setString(col++, sSaleLotNoA);
                stmt.setDouble(col++, dHammerTax);
                stmt.setDouble(col++, dPremTax);
                stmt.setDouble(col++, dCommTax);
                stmt.setDouble(col++, dSalesTax);
                stmt.setDouble(col++, dInsTax);
                stmt.setDouble(col++, dHammerTaxRate);
                stmt.setDouble(col++, dPremTaxRate);
                stmt.setDouble(col++, dCommTaxRate);
                stmt.setDouble(col++, dSalesTaxRate);
                stmt.setDouble(col++, dInsTaxRate);
                stmt.setDouble(col++, dChargeAmtBuyTax);
                stmt.setDouble(col++, dChargeAmtBuyTaxRate);
                stmt.setInt(col++, iVendorNo);
                stmt.setInt(col++, iCommTaxCode);
                stmt.setInt(col++, iHammerTaxCode);
                stmt.setInt(col++, iPremTaxCode);
                stmt.setDouble(col++, dVendorTotal);
                stmt.setDouble(col++, dBuyerTotal);
                stmt.setDouble(col++, dBuyerNett);
                stmt.setDouble(col++, dBuyerTax);
                stmt.setDouble(col++, dVendorTax);
                stmt.setDouble(col++, dVendorNett);
                stmt.setDouble(col++, dBIFee);
                stmt.setDouble(col++, dWDFee);
                stmt.setString(col++, sLotDesc);
                stmt.setBoolean(col++, lBonded);
                stmt.setDouble(col++, dBondValue);
                stmt.setInt(col++, iPaymentNo);
                stmt.setInt(col++, iPaymentLineNo);
                stmt.setDouble(col++, dImportDutyRate);
                stmt.setDouble(col++, dImportDuty);
                stmt.setDouble(col++, dVendorHammerTax);
                stmt.setInt(col++, iProformaInvNo);
                stmt.setInt(col++, iProformaInvLineNo);
                stmt.setInt(col++, iInsTaxCode);
                stmt.setString(col++, sSalesTaxFN);
                stmt.setInt(col++, iImportDutyCode);
                stmt.setInt(col++, iSalesTaxCode);
                stmt.setDouble(col++, dVendorHammerPrice);
                stmt.setDouble(col++, dBIFeeTax);
                stmt.setDouble(col++, dWDFeeTax);
                stmt.setInt(col++, iReceiptNo);
                stmt.setInt(col++, iReceiptLineNo);
                stmt.setDouble(col++, dICTax);
                stmt.setInt(col++, iICSettlementNo);
                stmt.setInt(col++, iVendorPaymentNo);
                stmt.setInt(col++, iICClientNo);
                stmt.setString(col++, sICRepUserID);
                stmt.setDouble(col++, dICCommPer);
                stmt.setDouble(col++, dICAmt);
                stmt.setBoolean(col++, lHeldLot);
                stmt.setInt(col++, iVendorHammerTaxCode);
                stmt.setDouble(col++, dVendorHammerTaxRate);
                stmt.setDouble(col++, dFaceValue);
                stmt.setInt(col++, iChargeAmtBuyTaxCode);
                stmt.setInt(col++, iHeldLotJobLogNo);
                stmt.setBoolean(col++, lWDFeeCharged);
                stmt.setDouble(col++, dOtherChargeTax);
                stmt.setDouble(col++, dIllustrationFeeTax);
                stmt.setDouble(col++, dVendorNettAdj);
                stmt.setDouble(col++, dVendorTaxAdj);
                stmt.setDouble(col++, dVendorNettRefund);
                stmt.setDouble(col++, dVendorTaxRefund);
                stmt.setString(col++, sSaleDivision);
                stmt.setString(col++, sSaleDepartment);
                stmt.setString(col++, sReceiptDivision);
                stmt.setString(col++, sRecDepartment);
                stmt.setInt(col++, iICSettlementLineNo);
                stmt.setInt(col++, dICTaxRate);
                stmt.setInt(col++, iAddressNoShipTo);
                stmt.setInt(col++, iClientResaleNoUnique);
                stmt.setInt(col++, iSalesTaxNo);
                stmt.setBoolean(col++, lManualBuyerCalc);
                stmt.setBoolean(col++, lUseResaleLicence);
                stmt.setString(col++, sResaleItemType);
                stmt.setDouble(col++, dICHammerPer);
                stmt.setDouble(col++, dICPremPer);
                stmt.setDouble(col++, dICFlatFee);
                stmt.setDouble(col++, dVendorMerchandiseFeeRate);
                stmt.setDouble(col++, dVendorMerchandiseFee);
                stmt.setDouble(col++, dVendorImportDutyRate);
                stmt.setDouble(col++, dVendorImportDuty);
                stmt.setDouble(col++, dVendorSalesTaxRate);
                stmt.setDouble(col++, dVendorSalesTaxAmt);
                stmt.setInt(col++, iCompanyNo);
                stmt.setDouble(col++, dBIFeeRate);
                stmt.setString(col++, sResaleLicenceNo);
                stmt.setString(col++, sARLType);
                stmt.setBoolean(col++, lBuyerOptOut);
                stmt.setBoolean(col++, lAfterSale);
                stmt.setDouble(col++, dDiscNet);
                stmt.setDouble(col++, dDiscTax);
                stmt.setDouble(col++, dDiscAmt);
                stmt.setBoolean(col++, lDiscFlag);
                stmt.setBoolean(col++, lARLFlag);
                stmt.setDouble(col++, dARLAmt);
                stmt.setInt(col++, iRoyaltyNo);
                stmt.setString(col++, sLotSymbols);
                stmt.setDouble(col++, dHammerPriceGroup);
                stmt.setString(col++, cBidType);
                stmt.setInt(col++, iClientDealerNoUnique);
                stmt.setBoolean(col++, lUseDealerLicence);
                stmt.setString(col++, sDealerLicenceNo);

                stmt.addBatch();
            }
            stmt.executeBatch();

        } catch (SQLException e) {
            this._log.debug(sql);
            System.err.println(e);
            e.printStackTrace();
            throw new RuntimeException("insertIntoSaleLotTable", e);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
        }

    }

    public void insertIntoSaleLotCancelTable(List<Object[]> rowList) {

        String sql = "insert into AUCTION_SALELOTCANCEL (  iSaleNo,          iSaleLotNo,      sSaleLotNoA,      iReceiptNo,      iReceiptLineNo,      iInvoiceNo,         iInvoiceLineNo,      iSettlementNo,      iSettlementLineNo,             iReceiptNoNew,      iReceiptLineNoNew,         sCancelType,      sCancelNotes,      iSaleLotNoUnique,      iSeqNo,      iCompanyNo,      sDivision,        sDepartment,      iClientNo,      iVendorNo,      iCreditNo,      iCreditLineNo,      iProformaInvNo,      iProformaInvLineNo,         iClientNoNew) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        try {
            stmt = getConnection().prepareStatement(sql);

            for (Object[] dets: rowList) {
                int col = 0;

                int iSaleNo = (Integer) dets[(col++)];
                int iSaleLotNo = (Integer) dets[(col++)];
                String sSaleLotNoA = (String) dets[(col++)];
                int iReceiptNo = (Integer) dets[(col++)];
                int iReceiptLineNo = (Integer) dets[(col++)];
                int iInvoiceNo = (Integer) dets[(col++)];
                int iInvoiceLineNo = (Integer) dets[(col++)];
                int iSettlementNo = (Integer) dets[(col++)];
                int iSettlementLineNo = (Integer) dets[(col++)];
                int iReceiptNoNew = (Integer) dets[(col++)];
                int iReceiptLineNoNew = (Integer) dets[(col++)];
                String sCancelType = (String) dets[(col++)];
                String sCancelNotes = (String) dets[(col++)];
                int iSaleLotNoUnique = (Integer) dets[(col++)];
                int iSeqNo = (Integer) dets[(col++)];
                int iCompanyNo = (Integer) dets[(col++)];
                String sDivision = (String) dets[(col++)];
                String sDepartment = (String) dets[(col++)];
                int iClientNo = (Integer) dets[(col++)];
                int iVendorNo = (Integer) dets[(col++)];
                int iCreditNo = (Integer) dets[(col++)];
                int iCreditLineNo = (Integer) dets[(col++)];
                int iProformaInvNo = (Integer) dets[(col++)];
                int iProformaInvLineNo = (Integer) dets[(col++)];
                int iClientNoNew = (Integer) dets[(col++)];

                col = 1;
                stmt.setInt(col++, iSaleNo);
                stmt.setInt(col++, iSaleLotNo);
                stmt.setString(col++, sSaleLotNoA);
                stmt.setInt(col++, iReceiptNo);
                stmt.setInt(col++, iReceiptLineNo);
                stmt.setInt(col++, iInvoiceNo);
                stmt.setInt(col++, iInvoiceLineNo);
                stmt.setInt(col++, iSettlementNo);
                stmt.setInt(col++, iSettlementLineNo);
                stmt.setInt(col++, iReceiptNoNew);
                stmt.setInt(col++, iReceiptLineNoNew);
                stmt.setString(col++, sCancelType);
                stmt.setString(col++, sCancelNotes);
                stmt.setInt(col++, iSaleLotNoUnique);
                stmt.setInt(col++, iSeqNo);
                stmt.setInt(col++, iCompanyNo);
                stmt.setString(col++, sDivision);
                stmt.setString(col++, sDepartment);
                stmt.setInt(col++, iClientNo);
                stmt.setInt(col++, iVendorNo);
                stmt.setInt(col++, iCreditNo);
                stmt.setInt(col++, iCreditLineNo);
                stmt.setInt(col++, iProformaInvNo);
                stmt.setInt(col++, iProformaInvLineNo);
                stmt.setInt(col++, iClientNoNew);

                stmt.addBatch();
            }
            stmt.executeBatch();

        } catch (SQLException e) {
            this._log.debug(sql);
            System.err.println(e);
            e.printStackTrace();
            throw new RuntimeException("insertIntoSaleLotTable", e);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
        }

    }

    public void insertIntoAuctionLookup() {

        String sql = "{ call cube_rebuild.buildLookupAuctionView() }";
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        try {
            stmt = getConnection().prepareCall(sql);
            stmt.execute();
        } catch (SQLException e) {
            this._log.debug(sql);
            System.err.println(e);
            e.printStackTrace();
            throw new RuntimeException("insertIntoAuctionLookup", e);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
        }
    }

    public void insertIntoSaleBidTable(List<Object[]> rowList) {

        String sql = "insert into AUCTION_SALEBID (      iSaleNo,      iSaleLotNo,      iClientNo,      iAddressNo,      cBidType,      iPaddleNo,      dBidAmt,      iBidPlus,      sTelNo1,      sTelNo2,      sTelNo3,      sTelNo4,      sAuditType,      sAuditUserID,      daAuditDate,      sAuditTime,      iSaleBidNo,      sEmail,      sNotes,      iSaleLotNoUnique,      sSaleLotNoA,      daBidDate,      sBidTime,      lCancelled,      sBidDateTime,      sDivision) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        try {
            stmt = getConnection().prepareStatement(sql);

            for (Object[] dets: rowList) {
                int col = 0;

                int iSaleNo = (Integer) dets[(col++)];
                int iSaleLotNo = (Integer) dets[(col++)];
                int iClientNo = (Integer) dets[(col++)];
                int iAddressNo = (Integer) dets[(col++)];
                String cBidType = (String) dets[(col++)];
                int iPaddleNo = (Integer) dets[(col++)];
                double dBidAmt = (Double) dets[(col++)];
                int iBidPlus = (Integer) dets[(col++)];
                String sTelNo1 = (String) dets[(col++)];
                String sTelNo2 = (String) dets[(col++)];
                String sTelNo3 = (String) dets[(col++)];
                String sTelNo4 = (String) dets[(col++)];
                String sAuditType = (String) dets[(col++)];
                String sAuditUserID = (String) dets[(col++)];
                Timestamp daAuditDate = (Timestamp) dets[(col++)];
                String sAuditTime = (String) dets[(col++)];
                int iSaleBidNo = (Integer) dets[(col++)];
                String sEmail = (String) dets[(col++)];
                String sNotes = (String) dets[(col++)];
                int iSaleLotNoUnique = (Integer) dets[(col++)];
                String sSaleLotNoA = (String) dets[(col++)];
                Timestamp daBidDate = (Timestamp) dets[(col++)];
                String sBidTime = (String) dets[(col++)];
                boolean lCancelled = (Boolean) dets[(col++)];
                String sBidDateTime = (String) dets[(col++)];
                String sDivision = (String) dets[(col++)];

                col = 1;
                stmt.setInt(col++, iSaleNo);
                stmt.setInt(col++, iSaleLotNo);
                stmt.setInt(col++, iClientNo);
                stmt.setInt(col++, iAddressNo);
                stmt.setString(col++, cBidType);
                stmt.setInt(col++, iPaddleNo);
                stmt.setDouble(col++, dBidAmt);
                stmt.setInt(col++, iBidPlus);
                stmt.setString(col++, sTelNo1);
                stmt.setString(col++, sTelNo2);
                stmt.setString(col++, sTelNo3);
                stmt.setString(col++, sTelNo4);
                stmt.setString(col++, sAuditType);
                stmt.setString(col++, sAuditUserID);
                stmt.setTimestamp(col++, daAuditDate);
                stmt.setString(col++, sAuditTime);
                stmt.setInt(col++, iSaleBidNo);
                stmt.setString(col++, sEmail);
                stmt.setString(col++, sNotes);
                stmt.setInt(col++, iSaleLotNoUnique);
                stmt.setString(col++, sSaleLotNoA);
                stmt.setTimestamp(col++, daBidDate);
                stmt.setString(col++, sBidTime);
                stmt.setBoolean(col++, lCancelled);
                stmt.setString(col++, sBidDateTime);
                stmt.setString(col++, sDivision);

                stmt.addBatch();
            }
            stmt.executeBatch();

        } catch (SQLException e) {
            this._log.debug(sql);
            System.err.println(e);
            e.printStackTrace();
            throw new RuntimeException("insertIntoSaleBidTable", e);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
        }

    }

    public void insertIntoSaleItemTable(List<Object[]> rowList) {

        String sql = "insert into AUCTION_SALEITEM (  iSaleItemNo,       iSplitNo,      iReceiptNo,           iClientNo,            sClientRef,      sDesc,      iSaleItemType,      sSaleItemStatus,      iCompanyNo,      iSaleNo,      sCurrencyID,      dEstimateLow,      dEstimateHigh,      dReservePrice,      cReserveType,      iNoImages,      lCatalogued,      dIllustrationFee,      sNotes,      lLotted,      sAuditType,      dEstimateInitial,      sValuationUserID,     iReceiptLineNo,      iReOfferNo,      sOrig,      sOrigSource,      iSaleLotNo,      sSaleLotNoA,      lReOffer,      dFaceValue,      dBondValue,      lBonded,      iSaleLotNoUnique,      iSaleSectionNo,      iHammerTaxCode,         sTempGroupBy,      iTempLotNo,             sLocDepartment,      sDivision,      sDepartment,      sLocDivision,      sDeptOld,      sReserveCurrencyID,      iImportDutyCode,      sHeaderType,      iCustomsNo,      sLotStatus,      dEstimateLowCur,      dEstimateHighCur,      iSalesTaxCode,      iOtherTaxCode,      lIllustrated,      dVendorNet,      dVendorTax,      dReservePriceCur,      dReserveCurrencyRate,      daReservePriceCurDate,      dValuation,      lIllustrationChg,         dVendorTotal,      sValLoc1,      sValLoc2,      sValLoc3,      iSettlementNo,      iVendorPaymentNo,      iNumLots,      lFoldable,      iCollectionNo,      sIllustrationType,      lPrivateTreatyLot,      lNotPublishedOnWeb,      lSaleAgreed,      daImportDate,      dImportDutyRate,      dImportDutyAmt,      daLastScanDate,      iQuantity,      iReleaseNo,      lCites,      sArmsType,      dReceiptLineNo,      sReceiptLineNo,      iNewContractNo,      iNewContractLineNo,      lReferDept,      dEstimateLowCur3,         dEstimateHighCur3,      lARLFlag,      iArtistNo,      dPurchasePrice,      sLotSymbols,      dEstimateLowGroup,      dEstimateHighGroup,      lSaleGuaranteed,      lUnderCopyright,      lWithoutReserve,      lNotForMarketing,      lValued,      lPublished,      lDisplayValuer,      iNoValueRationale,      sNoValueComments,      lIvory,      lPreviewLot) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        try {
            stmt = getConnection().prepareStatement(sql);

            for (Object[] dets: rowList) {
                int col = 0;

                int iSaleItemNo = (Integer) dets[(col++)];
                int iSplitNo = (Integer) dets[(col++)];
                int iReceiptNo = (Integer) dets[(col++)];
                int iClientNo = (Integer) dets[(col++)];
                String sClientRef = (String) dets[(col++)];
                String sDesc = (String) dets[(col++)];
                int iSaleItemType = (Integer) dets[(col++)];
                String sSaleItemStatus = (String) dets[(col++)];
                int iCompanyNo = (Integer) dets[(col++)];
                int iSaleNo = (Integer) dets[(col++)];
                String sCurrencyID = (String) dets[(col++)];
                int dEstimateLow = (Integer) dets[(col++)];
                int dEstimateHigh = (Integer) dets[(col++)];
                int dReservePrice = (Integer) dets[(col++)];
                String cReserveType = (String) dets[(col++)];
                int iNoImages = (Integer) dets[(col++)];
                boolean lCatalogued = (Boolean) dets[(col++)];
                double dIllustrationFee = (Double) dets[(col++)];
                String sNotes = (String) dets[(col++)];
                boolean lLotted = (Boolean) dets[(col++)];
                String sAuditType = (String) dets[(col++)];
                double dEstimateInitial = (Double) dets[(col++)];
                String sValuationUserID = (String) dets[(col++)];
                int iReceiptLineNo = (Integer) dets[(col++)];
                int iReOfferNo = (Integer) dets[(col++)];
                String sOrig = (String) dets[(col++)];
                String sOrigSource = (String) dets[(col++)];
                int iSaleLotNo = (Integer) dets[(col++)];
                String sSaleLotNoA = (String) dets[(col++)];
                boolean lReOffer = (Boolean) dets[(col++)];
                double dFaceValue = (Double) dets[(col++)];
                double dBondValue = (Double) dets[(col++)];
                boolean lBonded = (Boolean) dets[(col++)];
                int iSaleLotNoUnique = (Integer) dets[(col++)];
                int iSaleSectionNo = (Integer) dets[(col++)];
                int iHammerTaxCode = (Integer) dets[(col++)];
                String sTempGroupBy = (String) dets[(col++)];
                int iTempLotNo = (Integer) dets[(col++)];
                String sLocDepartment = (String) dets[(col++)];
                String sDivision = (String) dets[(col++)];
                String sDepartment = (String) dets[(col++)];
                String sLocDivision = (String) dets[(col++)];
                String sDeptOld = (String) dets[(col++)];
                String sReserveCurrencyID = (String) dets[(col++)];
                int iImportDutyCode = (Integer) dets[(col++)];
                String sHeaderType = (String) dets[(col++)];
                int iCustomsNo = (Integer) dets[(col++)];
                String sLotStatus = (String) dets[(col++)];
                double dEstimateLowCur = (Double) dets[(col++)];
                double dEstimateHighCur = (Double) dets[(col++)];
                int iSalesTaxCode = (Integer) dets[(col++)];
                int iOtherTaxCode = (Integer) dets[(col++)];
                boolean lIllustrated = (Boolean) dets[(col++)];
                double dVendorNet = (Double) dets[(col++)];
                double dVendorTax = (Double) dets[(col++)];
                double dReservePriceCur = (Double) dets[(col++)];
                double dReserveCurrencyRate = (Double) dets[(col++)];
                Timestamp daReservePriceCurDate = (Timestamp) dets[(col++)];
                double dValuation = (Double) dets[(col++)];
                boolean lIllustrationChg = (Boolean) dets[(col++)];
                double dVendorTotal = (Double) dets[(col++)];
                String sValLoc1 = (String) dets[(col++)];
                String sValLoc2 = (String) dets[(col++)];
                String sValLoc3 = (String) dets[(col++)];
                int iSettlementNo = (Integer) dets[(col++)];
                int iVendorPaymentNo = (Integer) dets[(col++)];
                int iNumLots = (Integer) dets[(col++)];
                boolean lFoldable = (Boolean) dets[(col++)];
                int iCollectionNo = (Integer) dets[(col++)];
                String sIllustrationType = (String) dets[(col++)];
                boolean lPrivateTreatyLot = (Boolean) dets[(col++)];
                boolean lNotPublishedOnWeb = (Boolean) dets[(col++)];
                boolean lSaleAgreed = (Boolean) dets[(col++)];
                Timestamp daImportDate = (Timestamp) dets[(col++)];
                double dImportDutyRate = (Double) dets[(col++)];
                double dImportDutyAmt = (Double) dets[(col++)];
                Timestamp daLastScanDate = (Timestamp) dets[(col++)];
                int iQuantity = (Integer) dets[(col++)];
                int iReleaseNo = (Integer) dets[(col++)];
                boolean lCites = (Boolean) dets[(col++)];
                String sArmsType = (String) dets[(col++)];
                double dReceiptLineNo = (Double) dets[(col++)];
                String sReceiptLineNo = (String) dets[(col++)];
                int iNewContractNo = (Integer) dets[(col++)];
                int iNewContractLineNo = (Integer) dets[(col++)];
                boolean lReferDept = (Boolean) dets[(col++)];
                double dEstimateLowCur3 = (Double) dets[(col++)];
                double dEstimateHighCur3 = (Double) dets[(col++)];
                boolean lARLFlag = (Boolean) dets[(col++)];
                int iArtistNo = (Integer) dets[(col++)];
                double dPurchasePrice = (Double) dets[(col++)];
                String sLotSymbols = (String) dets[(col++)];
                int dEstimateLowGroup = (Integer) dets[(col++)];
                int dEstimateHighGroup = (Integer) dets[(col++)];
                boolean lSaleGuaranteed = (Boolean) dets[(col++)];
                boolean lUnderCopyright = (Boolean) dets[(col++)];
                boolean lWithoutReserve = (Boolean) dets[(col++)];
                boolean lNotForMarketing = (Boolean) dets[(col++)];
                boolean lValued = (Boolean) dets[(col++)];
                boolean lPublished = (Boolean) dets[(col++)];
                boolean lDisplayValuer = (Boolean) dets[(col++)];
                int iNoValueRationale = (Integer) dets[(col++)];
                String sNoValueComments = (String) dets[(col++)];
                boolean lIvory = (Boolean) dets[(col++)];
                boolean lPreviewLot = (Boolean) dets[(col++)];

                col = 1;
                stmt.setInt(col++, iSaleItemNo);
                stmt.setInt(col++, iSplitNo);
                stmt.setInt(col++, iReceiptNo);
                stmt.setInt(col++, iClientNo);
                stmt.setString(col++, sClientRef);
                stmt.setString(col++, sDesc);
                stmt.setInt(col++, iSaleItemType);
                stmt.setString(col++, sSaleItemStatus);
                stmt.setInt(col++, iCompanyNo);
                stmt.setInt(col++, iSaleNo);
                stmt.setString(col++, sCurrencyID);
                stmt.setInt(col++, dEstimateLow);
                stmt.setInt(col++, dEstimateHigh);
                stmt.setInt(col++, dReservePrice);
                stmt.setString(col++, cReserveType);
                stmt.setInt(col++, iNoImages);
                stmt.setBoolean(col++, lCatalogued);
                stmt.setDouble(col++, dIllustrationFee);
                stmt.setString(col++, sNotes);
                stmt.setBoolean(col++, lLotted);
                stmt.setString(col++, sAuditType);
                stmt.setDouble(col++, dEstimateInitial);
                stmt.setString(col++, sValuationUserID);
                stmt.setInt(col++, iReceiptLineNo);
                stmt.setInt(col++, iReOfferNo);
                stmt.setString(col++, sOrig);
                stmt.setString(col++, sOrigSource);
                stmt.setInt(col++, iSaleLotNo);
                stmt.setString(col++, sSaleLotNoA);
                stmt.setBoolean(col++, lReOffer);
                stmt.setDouble(col++, dFaceValue);
                stmt.setDouble(col++, dBondValue);
                stmt.setBoolean(col++, lBonded);
                stmt.setInt(col++, iSaleLotNoUnique);
                stmt.setInt(col++, iSaleSectionNo);
                stmt.setInt(col++, iHammerTaxCode);
                stmt.setString(col++, sTempGroupBy);
                stmt.setInt(col++, iTempLotNo);
                stmt.setString(col++, sLocDepartment);
                stmt.setString(col++, sDivision);
                stmt.setString(col++, sDepartment);
                stmt.setString(col++, sLocDivision);
                stmt.setString(col++, sDeptOld);
                stmt.setString(col++, sReserveCurrencyID);
                stmt.setInt(col++, iImportDutyCode);
                stmt.setString(col++, sHeaderType);
                stmt.setInt(col++, iCustomsNo);
                stmt.setString(col++, sLotStatus);
                stmt.setDouble(col++, dEstimateLowCur);
                stmt.setDouble(col++, dEstimateHighCur);
                stmt.setInt(col++, iSalesTaxCode);
                stmt.setInt(col++, iOtherTaxCode);
                stmt.setBoolean(col++, lIllustrated);
                stmt.setDouble(col++, dVendorNet);
                stmt.setDouble(col++, dVendorTax);
                stmt.setDouble(col++, dReservePriceCur);
                stmt.setDouble(col++, dReserveCurrencyRate);
                stmt.setTimestamp(col++, daReservePriceCurDate);
                stmt.setDouble(col++, dValuation);
                stmt.setBoolean(col++, lIllustrationChg);
                stmt.setDouble(col++, dVendorTotal);
                stmt.setString(col++, sValLoc1);
                stmt.setString(col++, sValLoc2);
                stmt.setString(col++, sValLoc3);
                stmt.setInt(col++, iSettlementNo);
                stmt.setInt(col++, iVendorPaymentNo);
                stmt.setInt(col++, iNumLots);
                stmt.setBoolean(col++, lFoldable);
                stmt.setInt(col++, iCollectionNo);
                stmt.setString(col++, sIllustrationType);
                stmt.setBoolean(col++, lPrivateTreatyLot);
                stmt.setBoolean(col++, lNotPublishedOnWeb);
                stmt.setBoolean(col++, lSaleAgreed);
                stmt.setTimestamp(col++, daImportDate);
                stmt.setDouble(col++, dImportDutyRate);
                stmt.setDouble(col++, dImportDutyAmt);
                stmt.setTimestamp(col++, daLastScanDate);
                stmt.setInt(col++, iQuantity);
                stmt.setInt(col++, iReleaseNo);
                stmt.setBoolean(col++, lCites);
                stmt.setString(col++, sArmsType);
                stmt.setDouble(col++, dReceiptLineNo);
                stmt.setString(col++, sReceiptLineNo);
                stmt.setInt(col++, iNewContractNo);
                stmt.setInt(col++, iNewContractLineNo);
                stmt.setBoolean(col++, lReferDept);
                stmt.setDouble(col++, dEstimateLowCur3);
                stmt.setDouble(col++, dEstimateHighCur3);
                stmt.setBoolean(col++, lARLFlag);
                stmt.setInt(col++, iArtistNo);
                stmt.setDouble(col++, dPurchasePrice);
                stmt.setString(col++, sLotSymbols);
                stmt.setInt(col++, dEstimateLowGroup);
                stmt.setInt(col++, dEstimateHighGroup);
                stmt.setBoolean(col++, lSaleGuaranteed);
                stmt.setBoolean(col++, lUnderCopyright);
                stmt.setBoolean(col++, lWithoutReserve);
                stmt.setBoolean(col++, lNotForMarketing);
                stmt.setBoolean(col++, lValued);
                stmt.setBoolean(col++, lPublished);
                stmt.setBoolean(col++, lDisplayValuer);
                stmt.setInt(col++, iNoValueRationale);
                stmt.setString(col++, sNoValueComments);
                stmt.setBoolean(col++, lIvory);
                stmt.setBoolean(col++, lPreviewLot);

                stmt.addBatch();
            }
            stmt.executeBatch();

        } catch (SQLException e) {
            this._log.debug(sql);
            System.err.println(e);
            e.printStackTrace();
            throw new RuntimeException("insertIntoSaleItemTable", e);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
        }

    }

    public void insertIntoSaleLotATable(List<Object[]> rowList) {

        String sql = "insert into AUCTION_SALELOTA (iSaleLotNoUnique,        dCommAmtAdj,       dCommAmtRfd,     dCommTaxAdj,     dCommTaxRfd,     dBIFeeAdj,     dBIFeeRfd,     dBIFeeTaxAdj,     dBIFeeTaxRfd,            dWDFeeAdj,     dWDFeeRfd,     dWDFeeTaxAdj,     dWDFeeTaxRfd,     dInsAmtAdj,        dInsAmtRfd,     dInsTaxAdj,     dInsTaxRfd,     dIllustrationFeeRfd,     dIllustrationFeeTaxRfd,     dOtherRefundAmt,     dOtherRefundTax,     dARLAmtAdj,     dMerchandiseFeeAdj,     dMerchandiseFeeRfd,     dARLAmtRfd,     dpremtaxrate2,     dchargeamtbuytax2,     dchargeamtbuytaxrate2,     dhammertaxrate2 ,     dhammertax2,     dpremtax2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        try {
            stmt = getConnection().prepareStatement(sql);

            for (Object[] dets: rowList) {
                int col = 0;
                int iSaleLotNoUnique = (Integer) dets[(col++)];
                double dCommAmtAdj = (Double) dets[(col++)];
                double dCommAmtRfd = (Double) dets[(col++)];
                double dCommTaxAdj = (Double) dets[(col++)];
                double dCommTaxRfd = (Double) dets[(col++)];
                double dBIFeeAdj = (Double) dets[(col++)];
                double dBIFeeRfd = (Double) dets[(col++)];
                double dBIFeeTaxAdj = (Double) dets[(col++)];
                double dBIFeeTaxRfd = (Double) dets[(col++)];
                double dWDFeeAdj = (Double) dets[(col++)];
                double dWDFeeRfd = (Double) dets[(col++)];
                double dWDFeeTaxAdj = (Double) dets[(col++)];
                double dWDFeeTaxRfd = (Double) dets[(col++)];
                double dInsAmtAdj = (Double) dets[(col++)];
                double dInsAmtRfd = (Double) dets[(col++)];
                double dInsTaxAdj = (Double) dets[(col++)];
                double dInsTaxRfd = (Double) dets[(col++)];
                double dIllustrationFeeRfd = (Double) dets[(col++)];
                double dIllustrationFeeTaxRfd = (Double) dets[(col++)];
                double dOtherRefundAmt = (Double) dets[(col++)];
                double dOtherRefundTax = (Double) dets[(col++)];
                double dARLAmtAdj = (Double) dets[(col++)];
                double dMerchandiseFeeAdj = (Double) dets[(col++)];
                double dMerchandiseFeeRfd = (Double) dets[(col++)];
                double dARLAmtRfd = (Double) dets[(col++)];
                double dpremtaxrate2 = (Double) dets[(col++)];
                double dchargeamtbuytax2 = (Double) dets[(col++)];
                double dchargeamtbuytaxrate2 = (Double) dets[(col++)];
                double dhammertaxrate2 = (Double) dets[(col++)];
                double dhammertax2 = (Double) dets[(col++)];
                double dpremtax2 = (Double) dets[(col++)];

                col = 1;
                stmt.setInt(col++, iSaleLotNoUnique);
                stmt.setDouble(col++, dCommAmtAdj);
                stmt.setDouble(col++, dCommAmtRfd);
                stmt.setDouble(col++, dCommTaxAdj);
                stmt.setDouble(col++, dCommTaxRfd);
                stmt.setDouble(col++, dBIFeeAdj);
                stmt.setDouble(col++, dBIFeeRfd);
                stmt.setDouble(col++, dBIFeeTaxAdj);
                stmt.setDouble(col++, dBIFeeTaxRfd);
                stmt.setDouble(col++, dWDFeeAdj);
                stmt.setDouble(col++, dWDFeeRfd);
                stmt.setDouble(col++, dWDFeeTaxAdj);
                stmt.setDouble(col++, dWDFeeTaxRfd);
                stmt.setDouble(col++, dInsAmtAdj);
                stmt.setDouble(col++, dInsAmtRfd);
                stmt.setDouble(col++, dInsTaxAdj);
                stmt.setDouble(col++, dInsTaxRfd);
                stmt.setDouble(col++, dIllustrationFeeRfd);
                stmt.setDouble(col++, dIllustrationFeeTaxRfd);
                stmt.setDouble(col++, dOtherRefundAmt);
                stmt.setDouble(col++, dOtherRefundTax);
                stmt.setDouble(col++, dARLAmtAdj);
                stmt.setDouble(col++, dMerchandiseFeeAdj);
                stmt.setDouble(col++, dMerchandiseFeeRfd);
                stmt.setDouble(col++, dARLAmtRfd);
                stmt.setDouble(col++, dpremtaxrate2);
                stmt.setDouble(col++, dchargeamtbuytax2);
                stmt.setDouble(col++, dchargeamtbuytaxrate2);
                stmt.setDouble(col++, dhammertaxrate2);
                stmt.setDouble(col++, dhammertax2);
                stmt.setDouble(col++, dpremtax2);

                stmt.addBatch();
            }
            stmt.executeBatch();

        } catch (SQLException e) {
            this._log.debug(sql);
            System.err.println(e);
            e.printStackTrace();
            throw new RuntimeException("insertIntoSaleLotTable", e);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
        }

    }

    public void insertIntoSaleTable(List<Object[]> rowList) {
        String sql = "insert into AUCTION_SALE (iSaleNo,   sSaleName,      sAuditType,      iCompanyNo,       daStartDate,      daEndDate,  iItemsAssigned,   iItemsLotted,   iLotsSold,      iLotsUnsold,      sCurrencyID1,      iLotsInvoiced,   iLotsSettled,      daSettlementDate,  dCurrencyRate1,      iLotsWithdrawn,      lPublishSale,      sSaleA,      lPublishLots,      lPublishResults,      lSaleCancelled,      iItemsCatalogued,       lExportDTP,   sSmartSaleNo,      iLotsCancelled,   iLotsNo,      sSaleStatus,      iNoRegs,      iNoBids,      sVenue,      sStartTime,      iLastPaddleNo,      iLastBidPaddleNo,      dPrice1, dPrice2,      dPrice3,      dPrice4,      lMailListCreated,      sOrigSource,  dMinCommAmt,      daCurrencyDate,      sCurrencyID2,      sCurrencyID3,      dCurrencyRate2,      dCurrencyRate3,      iSettlementDays,      sDivision,     lPrivateTreaty,      daDueDate,      sCatVolume,      lSaleMatched,      lFullPresale,      sDepartment,      lMinCommTaxIncl,      iItemsAgreed,      iLotsProformad,      iLotsPaid,   iLotsReoffered,      dCatPrice,      lPublishSections,      lExtraSale,      sSaleURL,     lOfferPreReg,      lOffsite,       lOfferCondition,      sSaleType,      iPublishDays,      iConsignDays,      daConsign,      lBidOnline,      lBiographies,      lUseDealerLicence,   sBidOnlineStatus) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        try {
            stmt = getConnection().prepareStatement(sql);

            for (Object[] dets: rowList) {
                int col = 0;
                int iSaleNo = (Integer) dets[(col++)];
                String sSaleName = (String) dets[(col++)];
                String sAuditType = (String) dets[(col++)];
                int iCompanyNo = (Integer) dets[(col++)];
                Timestamp daStartDate = (Timestamp) dets[(col++)];
                Timestamp daEndDate = (Timestamp) dets[(col++)];
                int iItemsAssigned = (Integer) dets[(col++)];
                int iItemsLotted = (Integer) dets[(col++)];
                int iLotsSold = (Integer) dets[(col++)];
                int iLotsUnsold = (Integer) dets[(col++)];
                String sCurrencyID1 = (String) dets[(col++)];
                int iLotsInvoiced = (Integer) dets[(col++)];
                int iLotsSettled = (Integer) dets[(col++)];
                Timestamp daSettlementDate = (Timestamp) dets[(col++)];
                double dCurrencyRate1 = (Double) dets[(col++)];
                int iLotsWithdrawn = (Integer) dets[(col++)];
                boolean lPublishSale = (Boolean) dets[(col++)];
                String sSaleA = (String) dets[(col++)];
                boolean lPublishLots = (Boolean) dets[(col++)];
                boolean lPublishResults = (Boolean) dets[(col++)];
                boolean lSaleCancelled = (Boolean) dets[(col++)];
                int iItemsCatalogued = (Integer) dets[(col++)];
                boolean lExportDTP = (Boolean) dets[(col++)];
                String sSmartSaleNo = (String) dets[(col++)];
                int iLotsCancelled = (Integer) dets[(col++)];
                int iLotsNo = (Integer) dets[(col++)];
                String sSaleStatus = (String) dets[(col++)];
                int iNoRegs = (Integer) dets[(col++)];
                int iNoBids = (Integer) dets[(col++)];
                String sVenue = (String) dets[(col++)];
                String sStartTime = (String) dets[(col++)];
                int iLastPaddleNo = (Integer) dets[(col++)];
                int iLastBidPaddleNo = (Integer) dets[(col++)];
                double dPrice1 = (Double) dets[(col++)];
                double dPrice2 = (Double) dets[(col++)];
                double dPrice3 = (Double) dets[(col++)];
                double dPrice4 = (Double) dets[(col++)];
                boolean lMailListCreated = (Boolean) dets[(col++)];
                String sOrigSource = (String) dets[(col++)];
                double dMinCommAmt = (Double) dets[(col++)];
                Timestamp daCurrencyDate = (Timestamp) dets[(col++)];
                String sCurrencyID2 = (String) dets[(col++)];
                String sCurrencyID3 = (String) dets[(col++)];
                double dCurrencyRate2 = (Double) dets[(col++)];
                double dCurrencyRate3 = (Double) dets[(col++)];
                int iSettlementDays = (Integer) dets[(col++)];
                String sDivision = (String) dets[(col++)];
                boolean lPrivateTreaty = (Boolean) dets[(col++)];
                Timestamp daDueDate = (Timestamp) dets[(col++)];
                String sCatVolume = (String) dets[(col++)];
                boolean lSaleMatched = (Boolean) dets[(col++)];
                boolean lFullPresale = (Boolean) dets[(col++)];
                String sDepartment = (String) dets[(col++)];
                boolean lMinCommTaxIncl = (Boolean) dets[(col++)];
                int iItemsAgreed = (Integer) dets[(col++)];
                int iLotsProformad = (Integer) dets[(col++)];
                int iLotsPaid = (Integer) dets[(col++)];
                int iLotsReoffered = (Integer) dets[(col++)];
                double dCatPrice = (Double) dets[(col++)];
                boolean lPublishSections = (Boolean) dets[(col++)];
                boolean lExtraSale = (Boolean) dets[(col++)];
                String sSaleURL = (String) dets[(col++)];
                boolean lOfferPreReg = (Boolean) dets[(col++)];
                boolean lOffsite = (Boolean) dets[(col++)];
                boolean lOfferCondition = (Boolean) dets[(col++)];
                String sSaleType = (String) dets[(col++)];
                int iPublishDays = (Integer) dets[(col++)];
                int iConsignDays = (Integer) dets[(col++)];
                Timestamp daConsign = (Timestamp) dets[(col++)];
                boolean lBidOnline = (Boolean) dets[(col++)];
                boolean lBiographies = (Boolean) dets[(col++)];
                boolean lUseDealerLicence = (Boolean) dets[(col++)];
                String sBidOnlineStatus = (String) dets[(col++)];

                col = 1;
                stmt.setInt(col++, iSaleNo);
                stmt.setString(col++, sSaleName);
                stmt.setString(col++, sAuditType);
                stmt.setInt(col++, iCompanyNo);
                stmt.setTimestamp(col++, daStartDate);
                stmt.setTimestamp(col++, daEndDate);
                stmt.setInt(col++, iItemsAssigned);
                stmt.setInt(col++, iItemsLotted);
                stmt.setInt(col++, iLotsSold);
                stmt.setInt(col++, iLotsUnsold);
                stmt.setString(col++, sCurrencyID1);
                stmt.setInt(col++, iLotsInvoiced);
                stmt.setInt(col++, iLotsSettled);
                stmt.setTimestamp(col++, daSettlementDate);
                stmt.setDouble(col++, dCurrencyRate1);
                stmt.setInt(col++, iLotsWithdrawn);
                stmt.setBoolean(col++, lPublishSale);
                stmt.setString(col++, sSaleA);
                stmt.setBoolean(col++, lPublishLots);
                stmt.setBoolean(col++, lPublishResults);
                stmt.setBoolean(col++, lSaleCancelled);
                stmt.setInt(col++, iItemsCatalogued);
                stmt.setBoolean(col++, lExportDTP);
                stmt.setString(col++, sSmartSaleNo);
                stmt.setInt(col++, iLotsCancelled);
                stmt.setInt(col++, iLotsNo);
                stmt.setString(col++, sSaleStatus);
                stmt.setInt(col++, iNoRegs);
                stmt.setInt(col++, iNoBids);
                stmt.setString(col++, sVenue);
                stmt.setString(col++, sStartTime);
                stmt.setInt(col++, iLastPaddleNo);
                stmt.setInt(col++, iLastBidPaddleNo);
                stmt.setDouble(col++, dPrice1);
                stmt.setDouble(col++, dPrice2);
                stmt.setDouble(col++, dPrice3);
                stmt.setDouble(col++, dPrice4);
                stmt.setBoolean(col++, lMailListCreated);
                stmt.setString(col++, sOrigSource);
                stmt.setDouble(col++, dMinCommAmt);
                stmt.setTimestamp(col++, daCurrencyDate);
                stmt.setString(col++, sCurrencyID2);
                stmt.setString(col++, sCurrencyID3);
                stmt.setDouble(col++, dCurrencyRate2);
                stmt.setDouble(col++, dCurrencyRate3);
                stmt.setInt(col++, iSettlementDays);
                stmt.setString(col++, sDivision);
                stmt.setBoolean(col++, lPrivateTreaty);
                stmt.setTimestamp(col++, daDueDate);
                stmt.setString(col++, sCatVolume);
                stmt.setBoolean(col++, lSaleMatched);
                stmt.setBoolean(col++, lFullPresale);
                stmt.setString(col++, sDepartment);
                stmt.setBoolean(col++, lMinCommTaxIncl);
                stmt.setInt(col++, iItemsAgreed);
                stmt.setInt(col++, iLotsProformad);
                stmt.setInt(col++, iLotsPaid);
                stmt.setInt(col++, iLotsReoffered);
                stmt.setDouble(col++, dCatPrice);
                stmt.setBoolean(col++, lPublishSections);
                stmt.setBoolean(col++, lExtraSale);
                stmt.setString(col++, sSaleURL);
                stmt.setBoolean(col++, lOfferPreReg);
                stmt.setBoolean(col++, lOffsite);
                stmt.setBoolean(col++, lOfferCondition);
                stmt.setString(col++, sSaleType);
                stmt.setInt(col++, iPublishDays);
                stmt.setInt(col++, iConsignDays);
                stmt.setTimestamp(col++, daConsign);
                stmt.setBoolean(col++, lBidOnline);
                stmt.setBoolean(col++, lBiographies);
                stmt.setBoolean(col++, lUseDealerLicence);
                stmt.setString(col++, sBidOnlineStatus);

                stmt.addBatch();
            }
            stmt.executeBatch();

        } catch (SQLException e) {
            this._log.debug(sql);
            System.err.println(e);
            e.printStackTrace();
            throw new RuntimeException("insertIntoSaleTable", e);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
        }

    }

    /*      */public int getExtSysTypeForCube(int financeCubeId)
    /*      */{
        /* 3017 */CallableStatement stmt = null;
        /* 3018 */ResultSet resultSet = null;
        /*      */try
        /*      */{
            /* 3022 */stmt = getConnection().prepareCall("begin extSysAccessor.getExtSysInfoForCube(?,?,?,?,?,?);end;");
            /*      */
            /* 3024 */int col = 1;
            /* 3025 */stmt.setInt(col++, financeCubeId);
            /* 3026 */stmt.registerOutParameter(col++, 4);
            /* 3027 */stmt.registerOutParameter(col++, 4);
            /* 3028 */stmt.registerOutParameter(col++, 12);
            /* 3029 */stmt.registerOutParameter(col++, 12);
            /* 3030 */stmt.registerOutParameter(col++, 12);
            /* 3031 */stmt.execute();
            /* 3032 */int i = stmt.getInt(3);
            /*      */return i;
            /*      */}
        /*      */catch (SQLException e)
        /*      */{
            /*      */int i;
            /* 3036 */if ((e.getMessage().startsWith("ORA-20000")) || (e.getErrorCode() == 20000))
            /*      */{
                /* 3038 */i = -1;
                /*      */return i;
                /*      */}
            /* 3040 */System.err.println(e);
            /* 3041 */e.printStackTrace();
            /* 3042 */throw new RuntimeException("getExtSysTypeForCube", e);
            /*      */}
        /*      */finally
        /*      */{
            /* 3046 */closeResultSet(resultSet);
            /* 3047 */closeStatement(stmt);
            /* 3048 */closeConnection();
        } // throw localObject;
        /*      */
    }

    /*      */
    /*      */public CubeExtSysInfo getExtSysInfoForCube(int financeCubeId)
    /*      */{
        /* 3054 */CallableStatement stmt = null;
        /* 3055 */ResultSet resultSet = null;
        /*      */try
        /*      */{
            /* 3059 */stmt = getConnection().prepareCall("begin extSysAccessor.getExtSysInfoForCube(?,?,?,?,?,?);end;");
            /*      */
            /* 3061 */int col = 1;
            /* 3062 */stmt.setInt(col++, financeCubeId);
            /* 3063 */stmt.registerOutParameter(col++, 4);
            /* 3064 */stmt.registerOutParameter(col++, 4);
            /* 3065 */stmt.registerOutParameter(col++, 12);
            /* 3066 */stmt.registerOutParameter(col++, 12);
            /* 3067 */stmt.registerOutParameter(col++, 12);
            /* 3068 */stmt.execute();
            /* 3069 */CubeExtSysInfo localCubeExtSysInfo = new CubeExtSysInfo(stmt.getInt(2), stmt.getInt(3), stmt.getString(4), stmt.getString(5), stmt.getString(6));
            /*      */return localCubeExtSysInfo;
            /*      */}
        /*      */catch (SQLException e)
        /*      */{
            /*      */CubeExtSysInfo localCubeExtSysInfo;
            /* 3073 */if ((e.getMessage().startsWith("ORA-20000")) || (e.getErrorCode() == 20000))
            /*      */{
                /* 3075 */localCubeExtSysInfo = null;
                /*      */return localCubeExtSysInfo;
                /*      */}
            /* 3077 */System.err.println(e);
            /* 3078 */e.printStackTrace();
            /* 3079 */throw new RuntimeException("getExtSysForCube", e);
            /*      */}
        /*      */finally
        /*      */{
            /* 3083 */closeResultSet(resultSet);
            /* 3084 */closeStatement(stmt);
            /* 3085 */closeConnection();
        } // throw localObject;
        /*      */
    }

    /*      */
    /*      */public EntityList queryExtSysInfoForCube(int financeCubeId)
    /*      */throws ValidationException
    /*      */{
        /* 3122 */CubeExtSysInfo extSysInfo = getExtSysInfoForCube(financeCubeId);
        /*      */
        /* 3124 */if (extSysInfo == null) {
            /* 3125 */throw new ValidationException("No external system associated with this model.");
            /*      */}
        /* 3127 */return new EntityListImpl(new String[] { "externalSystemId", "systemType", "companyVisId", "ledgerVisId", "connectorClass" }, new Object[][] { { Integer.valueOf(extSysInfo.getExtSysId()), Integer.valueOf(extSysInfo.getSystemType()), extSysInfo.getCompanyVisId(), extSysInfo.getLedgerVisId(), extSysInfo.getConnectorClass() } });
        /*      */}

    public ExtSysTransactionQueryParams queryExtSysParams(int financeCubeId, String cellPk, String ytd) {
        Timer timer = _log.isDebugEnabled() ? new Timer(_log) : null;
        CallableStatement stmt = null;
        try {
            stmt = getConnection().prepareCall("begin extsysaccessor.getFinanceTransactionsParams(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;");

            int paramNo = 1;

            stmt.setInt(paramNo++, financeCubeId);
            stmt.setString(paramNo++, cellPk);
            stmt.setString(paramNo++, ytd);
            stmt.registerOutParameter(paramNo++, 12);
            stmt.registerOutParameter(paramNo++, 12);
            stmt.registerOutParameter(paramNo++, 2003, "TYPE_LINELIST");
            stmt.registerOutParameter(paramNo++, 2003, "TYPE_LINELIST");
            stmt.registerOutParameter(paramNo++, 2003, "TYPE_LINELIST");
            stmt.registerOutParameter(paramNo++, 2003, "TYPE_LINELIST");
            stmt.registerOutParameter(paramNo++, 4);
            stmt.registerOutParameter(paramNo++, 2003, "TYPE_LINELIST");
            stmt.registerOutParameter(paramNo++, 4);
            stmt.registerOutParameter(paramNo++, 12);
            stmt.registerOutParameter(paramNo++, 12);
            stmt.registerOutParameter(paramNo, 12);

            stmt.execute();

            paramNo = 1;

            String heading = "";
            paramNo += 3;
            String companyVisId = stmt.getString(paramNo++);
            String ledgerVisId = stmt.getString(paramNo++);
            ARRAY pathVisIdListArray = (ARRAY) stmt.getObject(paramNo++);
            ARRAY nullElemVisIdListArray = (ARRAY) stmt.getObject(paramNo++);
            ARRAY elemVisIdListArray = (ARRAY) stmt.getObject(paramNo++);
            ARRAY elemDescrListArray = (ARRAY) stmt.getObject(paramNo++);
            Integer year = Integer.valueOf(stmt.getInt(paramNo++));
            ARRAY periodsArray = (ARRAY) stmt.getObject(paramNo++);
            Integer highestPeriod = Integer.valueOf(stmt.getInt(paramNo++));
            String valueType = stmt.getString(paramNo++);
            String currency = stmt.getString(paramNo++);
            String currencyType = stmt.getString(paramNo);

            ExtSysTransactionQueryParams result = new ExtSysTransactionQueryParams(heading, companyVisId, ledgerVisId, (String[]) pathVisIdListArray.getArray(), (String[]) nullElemVisIdListArray.getArray(), (String[]) elemVisIdListArray.getArray(), (String[]) elemDescrListArray.getArray(), year, (String[]) periodsArray.getArray(), highestPeriod, valueType, currency, currencyType);

            result.setModelProperties(new ModelDAO().queryModelProperties(financeCubeId));

            return result;
        } catch (SQLException sqle) {
            throw handleSQLException("queryExtSysParams", sqle);
        } finally {
            closeStatement(stmt);
            closeConnection();
        }
    }

    public FinanceSystemCellData getFinanceTransactions(int financeCubeId, String cellPk, String ytd, int userId, int cmpy) throws ValidationException {
        // Connection conn = getConnection();
        // startOracleDebugger(conn);
        Timer t = new Timer(_log);
        FinanceSystemCellDataImpl cellData = new FinanceSystemCellDataImpl();
        CubeExtSysInfo extSysInfo = getExtSysInfoForCube(financeCubeId);
        if (extSysInfo == null) {
            cellData.setDimSelectionSummary("No external system associated with this model.");
            return cellData;
        }

        Integer docColumnIndex = null;
        CallableStatement stmt = null;
        ResultSet resultSet = null;
        String sql = null;
        String dimSelectionHeadings = null;
        String otherSelectionHeadings = null;
        List usedColumnGroups = new ArrayList();
        try {
            if (isOracleSql(extSysInfo.getSystemType())) {
                _log.info("getFinanceTransactions", new StringBuilder().append("begin ExtSysAccessor.testGetTransactions(:c1,").append(extSysInfo.getSystemType()).append(",").append(financeCubeId).append(",'").append(cellPk).append("','").append(ytd).append("',").append(userId).append("); end;").toString());

                sql = "begin extSysAccessor.getFinanceTransactions(?,?,?,?,?,?,?,?,?,?);end;";
            } else {
                _log.info("getFinanceTransactions", new StringBuilder().append("begin sql = oaAccessor.testGetTransactions(").append(getDBType()).append(",").append(financeCubeId).append(",'").append(cellPk).append("','").append(ytd).append("',").append(userId).append("); end;").toString());

                sql = "begin ? := oaAccessor.getFinanceTransactions(?,?,?,?,?,?,?,?,?,?);end;";
            }
            stmt = getConnection().prepareCall(sql);
            int col = 1;
            stmt.registerOutParameter(col++, isOracleSql(extSysInfo.getSystemType()) ? -10 : 12);
            stmt.setInt(col++, isOracleSql(extSysInfo.getSystemType()) ? extSysInfo.getSystemType() : getDBType());
            stmt.registerOutParameter(col++, 12);
            stmt.registerOutParameter(col++, 12);
            stmt.registerOutParameter(col++, 12);
            stmt.registerOutParameter(col++, 12);
            stmt.setInt(col++, financeCubeId);
            stmt.setString(col++, cellPk);
            stmt.setString(col++, ytd);
            stmt.setInt(col++, userId);
            stmt.setString(col++, String.valueOf(cmpy));
            stmt.execute();

            cellData.setDimSelectionSummary(stmt.getString(3));
            cellData.setOtherSelectionSummary(stmt.getString(4));
            cellData.setFmsTransferUrl(stmt.getString(5));
            if (stmt.getString(6) != null) {
                _log.debug("getFinanceTransactions", stmt.getString(6));
            }
            Integer totalColumnNum = null;
            Integer documentColumnNum = null;
            List<String> documentColumnNames = new ArrayList<String>();

            if (isOracleSql(extSysInfo.getSystemType())) {
                resultSet = (ResultSet) stmt.getObject(1);
                ResultSetMetaData meta = resultSet.getMetaData();

                for (int i = 0; i < meta.getColumnCount(); i++) {
                    String columnName = meta.getColumnName(i + 1);
                    int columType = meta.getColumnType(i + 1);

                    String colPrefix = columnName.substring(0, 1);

                    if (colPrefix.equals("*")) {
                        cellData.addColumnNameAndType(columnName.substring(1), meta.getColumnType(i + 1));
                    } else if (columnName.startsWith("!")) {
                        cellData.addColumnNameAndType(columnName.substring(1), meta.getColumnType(i + 1));

                        if (totalColumnNum == null) {
                            totalColumnNum = Integer.valueOf(i);
                            cellData.setTotalName(columnName.substring(1));
                        }

                    } else if (colPrefix.equals("#")) {
                        cellData.addColumnNameAndType(columnName, -246808642);
                        documentColumnNum = Integer.valueOf(i);
                    } else if (!colPrefix.equals("@")) {
                        if (colPrefix.equals("?")) {
                            documentColumnNames.add(columnName);
                        } else {
                            cellData.addColumnNameAndType(columnName, 12);
                        }
                    }
                }
                boolean isFirstRow = true;
                while (resultSet.next()) {
                    List docs = null;

                    cellData.newRow();

                    for (int i = 0; i < meta.getColumnCount(); i++) {
                        String columnName = meta.getColumnName(i + 1);
                        int columnType = meta.getColumnType(i + 1);

                        if ((columnName.startsWith("*")) || (columnName.startsWith("!"))) {
                            if ((columnType == 2) || (columnType == 3)) {
                                BigDecimal columnValue = resultSet.getBigDecimal(i + 1);

                                if (columnValue != null) {
                                    if (columnValue.scale() > cellData.getColumnMaxScale(i))
                                        cellData.setColumnMaxScale(i, columnValue.scale());
                                }
                                cellData.addColumnValue(columnValue);

                                if ((totalColumnNum != null) && (i == totalColumnNum.intValue())) {
                                    cellData.addToTotal(columnValue);
                                }
                            }
                        } else if (columnName.startsWith("#")) {
                            docs = new ArrayList();
                            cellData.addColumnValue(docs);
                        } else if (columnName.startsWith("@")) {
                            ResultSet columnValue = (ResultSet) resultSet.getObject(i + 1);
                            if (columnValue != null) {
                                ResultSetMetaData md = columnValue.getMetaData();

                                cellData.newColumnGroupRows();

                                if (isFirstRow) {
                                    int startCol = cellData.getColumnCount();
                                    cellData.addColumnGroupName(columnName.substring(1));
                                    cellData.addColumnGroupSource(columnName.substring(1), cellData.getCurrentRowColumnCount());
                                    for (int j = 0; j < md.getColumnCount(); j++) {
                                        String groupedColumnName = md.getColumnName(j + 1);
                                        if ((groupedColumnName.startsWith("*")) && ((md.getColumnType(j + 1) == 2) || (md.getColumnType(j + 1) == 3))) {
                                            cellData.addColumnNameAndType(groupedColumnName.substring(1), md.getColumnType(j + 1));
                                        } else {
                                            cellData.addColumnNameAndType(groupedColumnName, 12);
                                        }
                                    }
                                    cellData.addColumnGroupRange(Integer.valueOf(startCol), Integer.valueOf(cellData.getColumnCount() - 1));
                                }

                                boolean firstEmbeddedRow = true;
                                while (columnValue.next()) {
                                    cellData.newColumnGroupRow();

                                    for (int j = 0; j < md.getColumnCount(); j++) {
                                        if (firstEmbeddedRow) {
                                            firstEmbeddedRow = false;

                                            if (!usedColumnGroups.contains(columnName.substring(1)))
                                                usedColumnGroups.add(columnName.substring(1));
                                        }
                                        Object embeddedColumnValue = columnValue.getObject(j + 1);
                                        cellData.addColumnGroupValue(embeddedColumnValue);
                                    }
                                    cellData.storeColumnGroupRow();
                                }

                                cellData.storeColumnGroupRows();
                            }
                        } else if (columnName.startsWith("?")) {
                            String url = resultSet.getString(columnName);
                            if (url != null) {
                                if (columnName.startsWith("?p_")) {
                                    String encoded = null;
                                    int ptr = url.indexOf("?encrypt=");
                                    if (ptr > -1) {
                                        String visibleStr = url.substring(ptr + "?encrypt=".length());
                                        encoded = ServicePasswordEncrypter.squirrel(visibleStr, 250);
                                        _log.debug("getFinanceTransactions", new StringBuilder().append("url=").append(url).append(" ").append(encoded).toString());
                                        url = new StringBuilder().append(url.substring(0, ptr + "?encrypt=".length())).append(encoded).toString();
                                    } else {
                                        ptr = url.indexOf("?");
                                        String visibleStr = url.substring(ptr + 1);
                                        encoded = LongSquirrel.squirrel(visibleStr, visibleStr.length() * 2 + 8);
                                        _log.debug("getFinanceTransactions", new StringBuilder().append("url=").append(url).append(" ").append(encoded).toString());
                                        url = new StringBuilder().append(url.substring(0, ptr + 1)).append(encoded).toString();
                                    }
                                } else {
                                    int ptr = url.indexOf("?");
                                    String visibleStr = url.substring(ptr + 1);
                                    String encoded = ServicePasswordEncrypter.squirrel(visibleStr, 250);
                                    _log.debug("getFinanceTransactions", new StringBuilder().append("url=").append(url).append(" ").append(encoded).toString());
                                    url = new StringBuilder().append(url.substring(0, ptr + 1)).append(encoded).toString();
                                }

                                docs.add(new String[] { columnName.substring(3), url });
                            }

                        } else {
                            cellData.addColumnValue(resultSet.getString(columnName));
                        }
                    }
                    isFirstRow = false;

                    cellData.storeRow();
                }
            } else {
                sql = stmt.getString(1);
                sql = sql.replace("\r\n", " "); // wrapping sql hack
                sql = sql.replace("order by", "order by gl.period,");
                getOaAccessorDAO().getFinanceTransactions(cellData, sql);
            }
            // stopOracleDebugger(conn);
        } catch (SQLException sqle) {
            if ((sqle.getMessage().startsWith("ORA-20000")) || (sqle.getErrorCode() == 20000)) {
                int ptr1 = sqle.getMessage().indexOf("$");
                int ptr2 = sqle.getMessage().lastIndexOf("$");
                cellData.setValidationMessage(sqle.getMessage().substring(ptr1 + 1, ptr2));
            } else {
                _log.debug("getFinanceTransactions", sql);
                throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getFinanceTransactions").toString(), sqle);
            }
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
            t.logInfo("getFinanceTransactions", cellData == null ? "" : new StringBuilder().append("rows=").append(cellData.getColumnCount()).toString());
        }

        for (int i = cellData.getColumnGroupCount() - 1; i > -1; i--) {
            if (!usedColumnGroups.contains(cellData.getColumnGroupName(i)))
                cellData.dropUnusedColumnGroup(cellData.getColumnGroupName(i));
        }
        cellData.straightenOutResults();

        return cellData;

    }

    /*      */
    /*      */public String getSuggestedModelVisId(int systemId, int systemType, String company)
    /*      */{
        /* 3521 */String sql = "begin extSysAccessor.getSuggestedModelVisId(?,?,?,?);end;";
        /* 3522 */CallableStatement stmt = null;
        /* 3523 */String returnValue = null;
        /*      */try
        /*      */{
            /* 3526 */stmt = getConnection().prepareCall(sql);
            /* 3527 */int col = 1;
            /* 3528 */stmt.setInt(col++, systemId);
            /* 3529 */stmt.setInt(col++, systemType);
            /* 3530 */stmt.setString(col++, company);
            /* 3531 */stmt.registerOutParameter(col++, 12);
            /* 3532 */stmt.execute();
            /* 3533 */returnValue = stmt.getString(4);
            /*      */}
        /*      */catch (Exception sqle)
        /*      */{
            /* 3537 */this._log.debug("getSuggestedModelVisId", sql);
            /* 3538 */System.err.println(sqle);
            /* 3539 */sqle.printStackTrace();
            /* 3540 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getSuggestedModelVisId").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 3544 */closeStatement(stmt);
            /* 3545 */closeConnection();
            /* 3546 */this._log.debug("getSuggestedModelVisId", new StringBuilder().append("extSysType=").append(systemType).append(" company=").append(company).append(" suggestion=").append(returnValue).toString());
            /*      */}
        /*      */
        /* 3551 */return returnValue;
        /*      */}

    /*      */

    public void buildOaPctransCums(Integer company) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        try {
            stmt = this.getConnection().prepareCall("{ call cube_rebuild.buildOaPctransCums(?) }");

            String companyName = company.toString();
            stmt.setString(1, companyName);
            stmt.execute();
        } catch (SQLException var9) {
            var9.printStackTrace();
            throw new RuntimeException(var9);
        } finally {
            if (timer != null) {
                timer.logDebug("rebuildFinanceCube");
            }
            this.closeStatement(stmt);
            this.closeConnection();
        }
    }

    public void buildOaPctransTotals(Integer company) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        try {
            stmt = this.getConnection().prepareCall("{ call cube_rebuild.buildOaPctransTotals(?) }");

            String companyName = company.toString();
            stmt.setString(1, companyName);
            stmt.execute();
        } catch (SQLException var9) {
            var9.printStackTrace();
            throw new RuntimeException(var9);
        } finally {
            if (timer != null) {
                timer.logDebug("rebuildFinanceCube");
            }
            this.closeStatement(stmt);
            this.closeConnection();
        }
    }

    public void deleteOaPctransIndexes() {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        try {
            stmt = this.getConnection().prepareCall("{ call cube_rebuild.deleteOaPctransIndexes() }");
            stmt.execute();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            if (timer != null) {
                timer.logDebug("deleteIndexes");
            }
            this.closeStatement(stmt);
            this.closeConnection();
        }
    }

    public void buildOaPctransIndexes() {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        try {
            stmt = this.getConnection().prepareCall("{ call cube_rebuild.buildOaPctransIndexes() }");

            stmt.execute();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            if (timer != null) {
                timer.logDebug("rebuildIndexes");
            }
            this.closeStatement(stmt);
            this.closeConnection();
        }
    }

    public void buildOaPctransTotalsIndexes() {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        CallableStatement stmt = null;
        try {
            stmt = this.getConnection().prepareCall("{ call cube_rebuild.buildOaPctransTotalsIndexes() }");

            stmt.execute();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            if (timer != null) {
                timer.logDebug("rebuildIndexes");
            }
            this.closeStatement(stmt);
            this.closeConnection();
        }
    }

    public void auctionLookupCounter() throws SQLException {
        String countQuery = "Select COUNT(aucsale.ISALENO) as total FROM  AUCTION_SALE aucsale " + "JOIN AUCTION_SALEITEM aucsaleitem ON (aucsale.ISALENO=aucsaleitem.ISALENO) " + "JOIN AUCTION_SALELOT aucsalelot ON (aucsale.ISALENO=aucsalelot.ISALENO)";

        Statement count = null;
        Statement updateCount = null;
        Connection conn = null;
        try {
            conn = this.getConnection();
            count = conn.createStatement();
            count.execute(countQuery);
            count.getResultSet().next();
            Integer countValue = count.getResultSet().getInt("total");

            updateCount = conn.createStatement();
            updateCount.execute("UPDATE GRID_ROW_COUNT gr SET gr.SIZE_VALUE=" + countValue + " WHERE gr.VIEW_NAME='AUCTION_LOOKUP'");

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (count != null)
                count.close();
            if (updateCount != null)
                updateCount.close();
            if (conn != null)
                conn.close();
        }
    }

    public void projectLookupCounter() throws SQLException {
        String countQuery = "select count(*) as total from (" + " SELECT " + "company," + "costcentre," + "project," + "expensecode," + "yearno," + "period," + "baseVal," + "qty," + "cumBaseVal" + " FROM oa_pctrans" + " UNION ALL" + " SELECT " + "company," + "costcentre," + "project," + "expensecode," + "yearno," + "period," + "baseVal," + "qty," + "cumBaseVal" + " FROM oa_pctrans_totals)";

        Statement count = null;
        Statement updateCount = null;
        Connection conn = null;
        try {
            conn = this.getConnection();
            count = conn.createStatement();
            count.execute(countQuery);
            count.getResultSet().next();
            Integer countValue = count.getResultSet().getInt("total");

            updateCount = conn.createStatement();
            updateCount.execute("UPDATE GRID_ROW_COUNT gr SET gr.SIZE_VALUE=" + countValue + " WHERE gr.VIEW_NAME='PROJECT_LOOKUP'");

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (count != null)
                count.close();
            if (updateCount != null)
                updateCount.close();
            if (conn != null)
                conn.close();
        }

    }

    public boolean checkCOA(int modelId, int financeCubeId, String[] cellRef, int userId) throws SQLException, ValidationException {
        boolean isValid = false;
        PreparedStatement stmt = null;
        ResultSet sql = null;
        String cellPk = "select  lower(VALUE)\nfrom    SYSTEM_PROPERTY\nwhere   PRPRTY = \'SYS: FinanceSystem: Validate\'";

        try {
            stmt = this.getConnection().prepareStatement(cellPk);
            sql = stmt.executeQuery();
            sql.next();
            String extSysInfo = sql.getString(1);
            this._log.debug("checkCOA", "SYS: FinanceSystem: Validate=" + extSysInfo);
            if (extSysInfo.equals("false")) {
                boolean sqle = true;
                return sqle;
            }
        } catch (SQLException var28) {
            throw new RuntimeException(this.getEntityName() + " checkCOA", var28);
        } finally {
            this.closeResultSet(sql);
            this.closeStatement(stmt);
            this.closeConnection();
        }

        CallableStatement var31 = null;
        sql = null;
        cellPk = "";

        for (int var33 = 0; var33 < cellRef.length; ++var33) {
            if (var33 == 0) {
                cellPk = cellRef[var33];
            } else {
                cellPk = cellPk + "|" + cellRef[var33];
            }
        }

        this._log.debug("checkCOA", cellPk);
        CubeExtSysInfo var34 = this.getExtSysInfoForCube(financeCubeId);
        if (var34 == null) {
            return true;
        } else {
            String prefix;
            String var32;
            if (!this.isOracleSql(var34.getSystemType())) {
                UserEVO var38 = (new UserDAO()).getDetails(new UserPK(userId), "");
                var32 = "begin oaAccessor.checkGLCOASql1(?,?,?,?,?,?,?,?);end;";
                var31 = this.getConnection().prepareCall(var32);
                byte var35 = 1;
                int var39 = var35 + 1;
                var31.setInt(var35, this.getDBType());
                var31.setString(var39++, var34.getCompanyVisId());
                var31.setString(var39++, var34.getLedgerVisId());
                var31.setString(var39++, cellRef[0]);
                var31.setString(var39++, cellRef[1]);
                var31.setString(var39++, var38.getExternalSystemUserName());
                var31.registerOutParameter(var39++, 12);
                var31.registerOutParameter(var39++, 12);
                var31.execute();
                prefix = var31.getString(7);
                String sql2 = var31.getString(8);
                if (prefix != null && sql2 != null) {
                    int checkInd = this.getOaAccessorDAO().runCOASql1(prefix);
                    if (checkInd == -1) {
                        String ranges = this.getOaAccessorDAO().runCOASql2(sql2);
                        var32 = "begin oaAccessor.checkGLCOASql2(?,?,?,?,?,?);end;";
                        var31 = this.getConnection().prepareCall(var32);
                        var35 = 1;
                        var39 = var35 + 1;
                        var31.setInt(var35, this.getDBType());
                        var31.setString(var39++, var34.getCompanyVisId());
                        var31.setString(var39++, cellRef[0]);
                        var31.setString(var39++, cellRef[1]);
                        var31.setString(var39++, ranges);
                        var31.registerOutParameter(var39++, 12);
                        var31.execute();
                        String sql3 = var31.getString(6);
                        checkInd = this.getOaAccessorDAO().runCOASql3(sql3);
                    }

                    isValid = checkInd == 1;
                    return isValid;
                } else {
                    return true;
                }
            } else {
                try {
                    var32 = "begin ? := extSysAccessor.checkCOA(?,?,?,?);end;";
                    var31 = this.getConnection().prepareCall(var32);
                    byte var36 = 1;
                    int var37 = var36 + 1;
                    var31.registerOutParameter(var36, 4);
                    var31.setInt(var37++, modelId);
                    var31.setInt(var37++, financeCubeId);
                    var31.setString(var37++, cellPk);
                    var31.setInt(var37++, userId);
                    var31.execute();
                    isValid = var31.getInt(1) == 1;
                } catch (SQLException var26) {
                    if (var26.getErrorCode() == 20000) {
                        this._log.debug("checkCOA", var26.getMessage());
                        String[] msg = var26.getMessage().split("\n");
                        prefix = "java.sql.SQLException: ";
                        if (msg[0].startsWith(prefix)) {
                            msg[0] = msg[0].substring(prefix.length());
                        }

                        prefix = "ORA-20000: ";
                        if (msg[0].startsWith(prefix)) {
                            msg[0] = msg[0].substring(prefix.length());
                        }

                        throw new ValidationException(msg[0]);
                    }

                    throw var26;
                } finally {
                    this.closeStatement(var31);
                    this.closeConnection();
                    this._log.debug("checkCOA", "modelId=" + modelId + " financeCubeId=" + financeCubeId + " cellRef=" + cellPk + " userId=" + userId + " valid=" + isValid);
                }

                return isValid;
            }
        }
    }

    // /* */ public boolean checkCOA2(int modelId, int financeCubeId, String[] cellRef, int userId) throws SQLException, ValidationException
    // /* */ {
    // /* 3556 */ boolean isValid = false;
    // /* */
    // /* 3560 */ PreparedStatement stmt = null;
    // /* 3561 */ ResultSet resultSet = null;
    // /* */
    // /* 3563 */ String sql = "select  lower(VALUE)\nfrom    SYSTEM_PROPERTY\nwhere   PRPRTY = 'SYS: FinanceSystem: Validate'";
    // /* */ try
    // /* */ {
    // /* 3569 */ stmt = getConnection().prepareStatement(sql);
    // /* 3570 */ resultSet = stmt.executeQuery();
    // /* 3571 */ resultSet.next();
    // /* 3572 */ String validate = resultSet.getString(1);
    // /* 3573 */ this._log.debug("checkCOA", new StringBuilder().append("SYS: FinanceSystem: Validate=").append(validate).toString());
    // /* 3574 */ if (validate.equals("false")) {
    // /* 3575 */ int i = 1;
    // /* */ return i;
    // /* */ }
    // /* */ }
    // /* */ catch (SQLException e)
    // /* */ {
    // /* 3579 */ throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" checkCOA").toString(), e);
    // /* */ }
    // /* */ finally
    // /* */ {
    // /* 3583 */ closeResultSet(resultSet);
    // /* 3584 */ closeStatement(stmt);
    // /* 3585 */ closeConnection();
    // /* */ }
    // /* */
    // /* 3589 */ CallableStatement stmt = null;
    // /* 3590 */ String sql = null;
    // /* */
    // /* 3592 */ String cellPk = "";
    // /* 3593 */ for (int i = 0; i < cellRef.length; i++) {
    // /* 3594 */ if (i == 0)
    // /* 3595 */ cellPk = cellRef[i];
    // /* */ else
    // /* 3597 */ cellPk = new StringBuilder().append(cellPk).append("|").append(cellRef[i]).toString();
    // /* */ }
    // /* 3599 */ this._log.debug("checkCOA", cellPk);
    // /* */
    // /* 3601 */ CubeExtSysInfo extSysInfo = getExtSysInfoForCube(financeCubeId);
    // /* 3602 */ if (extSysInfo == null) {
    // /* 3603 */ return true;
    // /* */ }
    // /* */
    // /* 3606 */ if (!isOracleSql(extSysInfo.getSystemType()))
    // /* */ {
    // /* 3608 */ UserEVO userEvo = new UserDAO().getDetails(new UserPK(userId), "");
    // /* 3609 */ sql = "begin oaAccessor.checkGLCOASql1(?,?,?,?,?,?,?,?);end;";
    // /* 3610 */ stmt = getConnection().prepareCall(sql);
    // /* 3611 */ int col = 1;
    // /* 3612 */ stmt.setInt(col++, getDBType());
    // /* 3613 */ stmt.setString(col++, extSysInfo.getCompanyVisId());
    // /* 3614 */ stmt.setString(col++, extSysInfo.getLedgerVisId());
    // /* 3615 */ stmt.setString(col++, cellRef[0]);
    // /* 3616 */ stmt.setString(col++, cellRef[1]);
    // /* 3617 */ stmt.setString(col++, userEvo.getExternalSystemUserName());
    // /* 3618 */ stmt.registerOutParameter(col++, 12);
    // /* 3619 */ stmt.registerOutParameter(col++, 12);
    // /* 3620 */ stmt.execute();
    // /* 3621 */ String sql1 = stmt.getString(7);
    // /* 3622 */ String sql2 = stmt.getString(8);
    // /* 3623 */ if ((sql1 == null) || (sql2 == null))
    // /* 3624 */ return true;
    // /* 3625 */ int checkInd = getOaAccessorDAO().runCOASql1(sql1);
    // /* 3626 */ if (checkInd == -1)
    // /* */ {
    // /* 3628 */ String ranges = getOaAccessorDAO().runCOASql2(sql2);
    // /* 3629 */ sql = "begin oaAccessor.checkGLCOASql2(?,?,?,?,?,?);end;";
    // /* 3630 */ stmt = getConnection().prepareCall(sql);
    // /* 3631 */ col = 1;
    // /* 3632 */ stmt.setInt(col++, getDBType());
    // /* 3633 */ stmt.setString(col++, extSysInfo.getCompanyVisId());
    // /* 3634 */ stmt.setString(col++, cellRef[0]);
    // /* 3635 */ stmt.setString(col++, cellRef[1]);
    // /* 3636 */ stmt.setString(col++, ranges);
    // /* 3637 */ stmt.registerOutParameter(col++, 12);
    // /* 3638 */ stmt.execute();
    // /* 3639 */ String sql3 = stmt.getString(6);
    // /* 3640 */ checkInd = getOaAccessorDAO().runCOASql3(sql3);
    // /* */ }
    // /* 3642 */ isValid = checkInd == 1;
    // /* 3643 */ return isValid;
    // /* */ }
    // /* */
    // /* */ try
    // /* */ {
    // /* 3650 */ sql = "begin ? := extSysAccessor.checkCOA(?,?,?,?);end;";
    // /* 3651 */ stmt = getConnection().prepareCall(sql);
    // /* 3652 */ int col = 1;
    // /* 3653 */ stmt.registerOutParameter(col++, 4);
    // /* 3654 */ stmt.setInt(col++, modelId);
    // /* 3655 */ stmt.setInt(col++, financeCubeId);
    // /* 3656 */ stmt.setString(col++, cellPk);
    // /* 3657 */ stmt.setInt(col++, userId);
    // /* 3658 */ stmt.execute();
    // /* */
    // /* 3660 */ isValid = stmt.getInt(1) == 1;
    // /* */ }
    // /* */ catch (SQLException sqle)
    // /* */ {
    // /* 3664 */ if (sqle.getErrorCode() == 20000)
    // /* */ {
    // /* 3666 */ this._log.debug("checkCOA", sqle.getMessage());
    // /* 3667 */ String[] msg = sqle.getMessage().split("\n");
    // /* 3668 */ String prefix = "java.sql.SQLException: ";
    // /* 3669 */ if (msg[0].startsWith(prefix))
    // /* 3670 */ msg[0] = msg[0].substring(prefix.length());
    // /* 3671 */ prefix = "ORA-20000: ";
    // /* 3672 */ if (msg[0].startsWith(prefix))
    // /* 3673 */ msg[0] = msg[0].substring(prefix.length());
    // /* 3674 */ throw new ValidationException(msg[0]);
    // /* */ }
    // /* 3676 */ throw sqle;
    // /* */ }
    // /* */ finally
    // /* */ {
    // /* 3680 */ closeStatement(stmt);
    // /* 3681 */ closeConnection();
    // /* 3682 */ this._log.debug("checkCOA", new StringBuilder().append("modelId=").append(modelId).append(" financeCubeId=").append(financeCubeId).append(" cellRef=").append(cellPk).append(" userId=").append(userId).append(" valid=").append(isValid).toString());
    // /* */ }
    // /* */
    // /* 3690 */ return isValid;
    // /* */ }
    /*      */
    /*      */public void createAllExternalViews(int taskId)
    /*      */{
        /* 3695 */String sql = "begin extSysAccessor.createAllExternalViews(?);end;";
        /* 3696 */CallableStatement stmt = null;
        /*      */try
        /*      */{
            /* 3699 */stmt = getConnection().prepareCall(sql);
            /* 3700 */stmt.setInt(1, taskId);
            /* 3701 */stmt.execute();
            /*      */}
        /*      */catch (Exception sqle)
        /*      */{
            /* 3705 */this._log.debug("createAllExternalViews", sql);
            /* 3706 */System.err.println(sqle);
            /* 3707 */sqle.printStackTrace();
            /* 3708 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" createAllExternalViews").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 3712 */closeStatement(stmt);
            /* 3713 */closeConnection();
            /*      */}
        /*      */}

    /*      */
    /*      */public void createExternalViews(int financeCubeId)
    /*      */{
        /* 3719 */String sql = "begin extSysAccessor.createExternalViews(?);end;";
        /* 3720 */CallableStatement stmt = null;
        /*      */try
        /*      */{
            /* 3723 */stmt = getConnection().prepareCall(sql);
            /* 3724 */stmt.setInt(1, financeCubeId);
            /* 3725 */stmt.execute();
            /*      */}
        /*      */catch (Exception sqle)
        /*      */{
            /* 3729 */this._log.debug("createExternalViews", sql);
            /* 3730 */System.err.println(sqle);
            /* 3731 */sqle.printStackTrace();
            /* 3732 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" createExternalViews").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 3736 */closeStatement(stmt);
            /* 3737 */closeConnection();
            /*      */}
        /*      */}

    /*      */
    /*      */public void createExternalViews(int taskId, int financeCubeId)
    /*      */{
        /* 3743 */String sql = "begin extSysAccessor.createExternalViews(?,?);end;";
        /* 3744 */CallableStatement stmt = null;
        /*      */try
        /*      */{
            /* 3747 */stmt = getConnection().prepareCall(sql);
            /* 3748 */stmt.setInt(1, taskId);
            /* 3749 */stmt.setInt(2, financeCubeId);
            /* 3750 */stmt.execute();
            /*      */}
        /*      */catch (Exception sqle)
        /*      */{
            /* 3754 */this._log.debug("createExternalViews", sql);
            /* 3755 */System.err.println(sqle);
            /* 3756 */sqle.printStackTrace();
            /* 3757 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" createExternalViews").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 3761 */closeStatement(stmt);
            /* 3762 */closeConnection();
            /*      */}
        /*      */}

    public void createExternalViewsGlobal(int taskId, int financeCubeId) {
        String sql = "begin extSysAccessor.createExternalViewsGlobal(?,?);end;";
        CallableStatement stmt = null;
        try {
            stmt = getConnection().prepareCall(sql);
            stmt.setInt(1, taskId);
            stmt.setInt(2, financeCubeId);
            stmt.execute();
        } catch (Exception sqle) {
            this._log.debug("createExternalViews", sql);
            System.err.println(sqle);
            sqle.printStackTrace();
            throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" createExternalViews").toString(), sqle);
        } finally {
            closeStatement(stmt);
            closeConnection();
        }
    }

    /*      */public void dropExportView(int financeCubeId)
    /*      */{
        /* 3768 */String sql = "begin extSysAccessor.dropExportView(?);end;";
        /* 3769 */CallableStatement stmt = null;
        /* 3770 */String info = "";
        /*      */try
        /*      */{
            /* 3773 */stmt = getConnection().prepareCall(sql);
            /* 3774 */stmt.setInt(1, financeCubeId);
            /* 3775 */stmt.execute();
            /*      */}
        /*      */catch (Exception sqle)
        /*      */{
            /* 3779 */this._log.debug("dropExportView", sql);
            /* 3780 */System.err.println(sqle);
            /* 3781 */sqle.printStackTrace();
            /* 3782 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" dropExportView").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 3786 */closeStatement(stmt);
            /* 3787 */closeConnection();
            /*      */}
        /*      */}

    /*      */
    /*      */private OaAccessorDAO getOaAccessorDAO()
    /*      */{
        /* 3793 */if (this.mOaAccessorDAO == null)
        /*      */{
//            /* 3795 */String lookupName = "java:comp/env/jdbc/oa";java:jboss/jdbc/oa
        	String lookupName = "java:jboss/jdbc/oa";
            /*      */
            /* 3797 */DataSource dataSource = null;
            /*      */try
            /*      */{
                /* 3800 */InitialContext ic = new InitialContext();
                /* 3801 */dataSource = (DataSource) ic.lookup(lookupName);
                /*      */}
            /*      */catch (NamingException ne)
            /*      */{
                /* 3805 */throw new RuntimeException(new StringBuilder().append("error looking up DataSource ").append(lookupName).append(": ").append(ne.getMessage()).toString(), ne);
                /*      */}
            /*      */
            /* 3809 */this.mOaAccessorDAO = new OaAccessorDAO(dataSource, this);
            /*      */}
        /* 3811 */return this.mOaAccessorDAO;
        /*      */}

    public AdAccessorDAO getAdAccessorDAO() {
        if (this.mAdAccessorDAO == null) {
            String lookupName = "java:ad";
            DataSource dataSource = null;
            try {
                InitialContext ic = new InitialContext();
                dataSource = (DataSource) ic.lookup(lookupName);
            } catch (NamingException ne) {
                throw new RuntimeException(new StringBuilder().append("error looking up DataSource ").append(lookupName).append(": ").append(ne.getMessage()).toString(), ne);
            }

            this.mAdAccessorDAO = new AdAccessorDAO(dataSource, this);
        }
        return this.mAdAccessorDAO;
    }

    /*      */
    /*      */public int getDBType()
    /*      */{
        /* 3816 */if (this.mDBType == null)
        /*      */{
            /* 3818 */SystemPropertyELO spElo = new SystemPropertyDAO().getSystemProperty("OA: DATABASE_TYPE");
            /* 3819 */String value = (String) spElo.getValueAt(0, "Value");
            /* 3820 */if (value.equalsIgnoreCase("progress"))
                /* 3821 */this.mDBType = Integer.valueOf(0);
            /* 3822 */else if (value.equalsIgnoreCase("openedge"))
                /* 3823 */this.mDBType = Integer.valueOf(0);
            /* 3824 */else if (value.equalsIgnoreCase("oracle"))
                /* 3825 */this.mDBType = Integer.valueOf(1);
            /* 3826 */else if (value.equalsIgnoreCase("sqlserver"))
                /* 3827 */this.mDBType = Integer.valueOf(2);
            /* 3828 */else
                throw new IllegalStateException(new StringBuilder().append("unexpected Open Accounts database type: ").append(value).toString());
            /*      */}
        /* 3830 */return this.mDBType.intValue();
        /*      */}

    /*      */
    /*      */private void deleteFromExtSysTable(int external_system_id, String tableName)
    /*      */{
        /* 3835 */PreparedStatement ps = null;
        /*      */try
        /*      */{
            /* 3838 */ps = getConnection().prepareStatement(new StringBuilder().append("delete from ").append(tableName).append(" where external_system_id = ?").toString());
            /* 3839 */ps.setInt(1, external_system_id);
            /* 3840 */ps.executeUpdate();
            /*      */}
        /*      */catch (SQLException e)
        /*      */{
            /* 3844 */throw handleSQLException(new StringBuilder().append("delete external system child table:").append(tableName).toString(), e);
            /*      */}
        /*      */finally
        /*      */{
            /* 3848 */closeStatement(ps);
            /* 3849 */closeConnection();
            /*      */}
        /*      */}

    /*      */
    /*      */public void deleteExternalSystemDefintion(int external_system_id)
    /*      */{
        /* 3860 */Set tablesToExcludeFromDelete = new HashSet();
        /* 3861 */tablesToExcludeFromDelete.add("EXT_SYS_PROPERTY");
        /*      */
        /* 3863 */deleteFromExtSysTable(external_system_id, "EXT_SYS_COMPANY");
        /*      */
        /* 3866 */for (int i = 0; i < SQL_DELETE_CHILDRENS_DEPENDANTS.length; i++)
        /*      */{
            /* 3868 */String tableName = SQL_DELETE_CHILDRENS_DEPENDANTS[i][0];
            /* 3869 */if (tablesToExcludeFromDelete.contains(tableName))
                /*      */continue;
            /* 3871 */deleteFromExtSysTable(external_system_id, tableName);
            /*      */}
        /*      */
        /* 3875 */PreparedStatement ps = null;
        /*      */try
        /*      */{
            /* 3878 */ps = getConnection().prepareStatement("delete from ext_sys_import_row where external_system_id = ?");
            /* 3879 */ps.setInt(1, external_system_id);
            /* 3880 */ps.executeUpdate();
            /*      */}
        /*      */catch (SQLException e)
        /*      */{
            /* 3884 */throw new RuntimeException("Failed to delete from ext_sys_import_row.", e);
            /*      */}
        /*      */finally
        /*      */{
            /* 3888 */closeStatement(ps);
            /* 3889 */closeConnection();
            /*      */}
        /*      */}

    /*      */
    /*      */public int lookupExternalSystemId(String externalSystemVisId)
    /*      */{
        /* 3900 */PreparedStatement ps = null;
        /* 3901 */ResultSet rs = null;
        /*      */try
        /*      */{
            /* 3904 */ps = getConnection().prepareStatement("select external_system_id from external_system where vis_id = ?");
            /* 3905 */ps.setString(1, externalSystemVisId);
            /* 3906 */rs = ps.executeQuery();
            /* 3907 */int i = rs.next() ? rs.getInt(1) : -1;
            /*      */return i;
            /*      */}
        /*      */catch (SQLException e)
        /*      */{
            /* 3911 */throw new RuntimeException("Failed to query external_system_id:", e);
            /*      */}
        /*      */finally
        /*      */{
            /* 3915 */closeResultSet(rs);
            /* 3916 */closeStatement(ps);
            /* 3917 */closeConnection();
        } // throw localObject;
        /*      */
    }

    /*      */
    /*      */public EntityList queryDataForPushSubmission()
    /*      */{
        /* 3952 */PreparedStatement ps = null;
        /* 3953 */ResultSet rs = null;
        /*      */try
        /*      */{
            /* 3956 */ps = getConnection()
                    .prepareStatement(
                            " select  distinct\t\t\t\t\t\t\t\t\t\t \n          FINANCE_CUBE_ID\t\t\t\t\t\t\t\t \n         ,FINANCE_CUBE_VIS_ID\t\t\t\t\t\t\t \n         ,FINANCE_CUBE_DESCR\t\t\t\t\t\t\t \n         ,COMPANY_VIS_ID           as CMPY\t\t\t\t \n         ,VALUE_TYPE               as BAL\t\t\t\t \n         ,nvl(CURRENCY_CODE,'   ') as CURR\t\t\t\t \n         ,CURRENCY_TYPE            as BAL_TYPE\t\t\t \n  from   EXPORT_VIEW_LIST\t\t\t\t\t\t\t\t \n  where  EXTERNAL_SYSTEM_TYPE = 5\t\t\t\t\t\t \n  and    VIEWNAME is not null\t\t\t\t\t\t\t \n  order by FINANCE_CUBE_VIS_ID, CMPY, BAL, CURR, BAL_TYPE   ");
            /* 3957 */rs = ps.executeQuery();
            /* 3958 */EntityListImpl localEntityListImpl = JdbcUtils.extractToEntityListImpl(E5_DB2_PUSH_DATA_QUERY_COL_INFO, rs);
            /*      */return localEntityListImpl;
            /*      */}
        /*      */catch (SQLException e)
        /*      */{
            /* 3962 */throw new RuntimeException("Failed to query e5 db2 push finance cube list:", e);
            /*      */}
        /*      */finally
        /*      */{
            /* 3966 */closeResultSet(rs);
            /* 3967 */closeStatement(ps);
            /* 3968 */closeConnection();
        } // throw localObject;
        /*      */
    }

    /*      */
    /*      */public EntityList queryAllXactSubsystems(Object externalSystemPK)
    /*      */{
        /* 3986 */SqlBuilder sqlb = new SqlBuilder(new String[] { "select  SUBSYSTEM_ID, DESCRIPTION", "from    EXTERNAL_SYSTEM_XACT_SUBSYSTEM", "where   EXTERNAL_SYSTEM_ID = <extSysId>", "order   by SUBSYSTEM_ID" });
        /*      */
        /* 3993 */SqlExecutor sqle = new SqlExecutor("queryAllXactSubsystems", getDataSource(), sqlb, this._log);
        /*      */
        /* 3995 */sqle.addBindVariable("<extSysId>", Integer.valueOf(((ExternalSystemPK) externalSystemPK).getExternalSystemId()));
        /*      */
        /* 3997 */return sqle.getEntityList();
        /*      */}

    /*      */
    /*      */public EntityList queryAllXactAvailableColumns(int subsystemId)
    /*      */{
        /* 4008 */String sql = "begin extSysAccessor.setupDrilldownColumns(?);end;";
        /* 4009 */CallableStatement stmt = null;
        /*      */try
        /*      */{
            /* 4012 */stmt = getConnection().prepareCall(sql);
            /* 4013 */stmt.setInt(1, subsystemId);
            /* 4014 */stmt.execute();
            /*      */}
        /*      */catch (Exception sqle)
        /*      */{
            /* 4018 */throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" queryAllXactAvailableColumns").toString(), sqle);
            /*      */}
        /*      */finally
        /*      */{
            /* 4022 */closeStatement(stmt);
            /* 4023 */closeConnection();
            /*      */}
        /*      */
        /* 4026 */SqlBuilder sqlb = new SqlBuilder(new String[] { "select  TABLE_ID, COLUMN_SEQ, DESCRIPTION, IS_NUM", "from    EXTERNAL_SYSTEM_XACT_TABLE", "join    EXTERNAL_SYSTEM_XACT_COL using (TABLE_ID)", "where   SUBSYSTEM_ID = <subsystemId>", "and     IMAGE_URL_TYPE in (' ','S')", "order   by TABLE_ID, COLUMN_SEQ" });
        /*      */
        /* 4035 */SqlExecutor sqle = new SqlExecutor("queryAllXactAvailableColumns", getDataSource(), sqlb, this._log);
        /* 4036 */sqle.addBindVariable("<subsystemId>", Integer.valueOf(subsystemId));
        /*      */
        /* 4038 */return sqle.getEntityList();
        /*      */}

    /*      */
    /*      */public EntityList queryXactColumnSelection(int subsystemId)
    /*      */{
        /* 4051 */SqlBuilder sqlb = new SqlBuilder(new String[] { "select  TABLE_ID, COLUMN_SEQ, DESCRIPTION, IS_TOTAL", "from    EXTERNAL_SYSTEM_XACT_TABLE", "join    EXTERNAL_SYSTEM_XACT_COL_SEL using (TABLE_ID)", "join    EXTERNAL_SYSTEM_XACT_COL using (TABLE_ID, COLUMN_SEQ)", "where   SUBSYSTEM_ID = <subsystemId>", "order   by SELECTION_SEQ" });
        /*      */
        /* 4060 */SqlExecutor sqle = new SqlExecutor("queryXactColumnSelection", getDataSource(), sqlb, this._log);
        /* 4061 */sqle.addBindVariable("<subsystemId>", Integer.valueOf(subsystemId));
        /*      */
        /* 4063 */return sqle.getEntityList();
        /*      */}

    /*      */
    /*      */public void updateXactColumnSelection(int subsystemId, List selection)
    /*      */{
        /* 4075 */SqlBuilder sqlbDel = new SqlBuilder(new String[] { "delete  from EXTERNAL_SYSTEM_XACT_COL_SEL", "where   TABLE_ID in", "        (", "        select  TABLE_ID", "        from    EXTERNAL_SYSTEM_XACT_TABLE", "        where   SUBSYSTEM_ID = <subsystemId>", "        )" });
        /*      */
        /* 4084 */SqlExecutor sqle = new SqlExecutor("updateXactColumnSelection", getDataSource(), sqlbDel, this._log);
        /* 4085 */sqle.addBindVariable("<subsystemId>", Integer.valueOf(subsystemId));
        /* 4086 */int numDeleted = sqle.executeUpdate();
        /*      */
        /* 4089 */SqlBuilder sqlbUpd = new SqlBuilder(new String[] { "insert  into EXTERNAL_SYSTEM_XACT_COL_SEL", "        (TABLE_ID, COLUMN_SEQ, SELECTION_SEQ, IS_TOTAL)", "values  (?,?,?,?)" });
        /*      */
        /* 4095 */PreparedStatement stmtUpd = null;
        /* 4096 */Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        /*      */try
        /*      */{
            /* 4100 */stmtUpd = getConnection().prepareStatement(sqlbUpd.toString());
            /*      */
            /* 4103 */for (int i = 0; i < selection.size(); i++)
            /*      */{
                /* 4105 */List colList = (List) selection.get(i);
                /*      */
                /* 4107 */BigDecimal tableId = (BigDecimal) colList.get(0);
                /* 4108 */BigDecimal columnSeq = (BigDecimal) colList.get(1);
                /* 4109 */int selectionSeq = i + 1;
                /* 4110 */String isTotal = (String) colList.get(3);
                /*      */
                /* 4112 */int col = 1;
                /*      */
                /* 4114 */stmtUpd.setInt(col++, tableId.intValue());
                /* 4115 */stmtUpd.setInt(col++, columnSeq.intValue());
                /* 4116 */stmtUpd.setInt(col++, selectionSeq);
                /* 4117 */stmtUpd.setString(col++, isTotal);
                /*      */
                /* 4119 */stmtUpd.addBatch();
                /*      */}
            /*      */
            /* 4122 */stmtUpd.executeBatch();
            /*      */}
        /*      */catch (SQLException e)
        /*      */{
            /* 4126 */this._log.debug(sqlbUpd.toString());
            /* 4127 */System.err.println(e);
            /* 4128 */e.printStackTrace();
            /* 4129 */throw new RuntimeException("updateXactColumnSelection", e);
            /*      */}
        /*      */finally
        /*      */{
            /* 4133 */closeStatement(stmtUpd);
            /* 4134 */closeConnection();
            /* 4135 */if (timer != null)
                /* 4136 */timer.logDebug("updateXactColumnSelection", new StringBuilder().append("rows=").append(selection.size()).toString());
            /*      */}
        /*      */}

    /*      */
    public class CubeExtSysInfo {
        private int mExternalSystemId;
        private int mSystemType;
        private String mCompanyVisId;
        private String mLedgerVisId;
        private String mConnectorClass;

        public CubeExtSysInfo(int extSysId, int extSysType, String company, String ledger, String connectorClass) {
            mExternalSystemId = extSysId;
            mSystemType = extSysType;
            mCompanyVisId = company;
            mLedgerVisId = ledger;
            mConnectorClass = connectorClass;
        }

        public int getExtSysId() {
            return mExternalSystemId;
        }

        public int getSystemType() {
            return mSystemType;
        }

        public String getCompanyVisId() {
            return mCompanyVisId;
        }

        public String getLedgerVisId() {
            return mLedgerVisId;
        }

        public String getConnectorClass() {
            return mConnectorClass;
        }
    }

    public ArrayList<String> getAllFinanceCubeIdsGlobalImp(int mappedModelId) {
        String sql = "select FINANCE_CUBE_ID from MAPPED_FINANCE_CUBE where MAPPED_MODEL_ID = ? AND COMPANY IS NOT NULL "; // TO DO select pobierajacy firmy w pakiecie
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        ArrayList<String> result = new ArrayList<String>();

        try {
            stmt = getConnection().prepareStatement(sql);
            stmt.setInt(1, mappedModelId);
            resultSet = stmt.executeQuery();

            while (resultSet.next())
                result.add(resultSet.getString(1));
        } catch (Exception sqle) {
            throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" queryAllXactAvailableColumns").toString(), sqle);
        } finally {
            closeStatement(stmt);
            closeConnection();
        }

        return result;
    }

    public ArrayList<Map<String, Integer>> getAllCompanies(int mappedModelId) {
        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        ArrayList<Map<String, Integer>> result = new ArrayList<Map<String, Integer>>();
        String sql = "select FINANCE_CUBE_ID, COMPANY from MAPPED_FINANCE_CUBE where MAPPED_MODEL_ID = ? AND COMPANY IS NOT NULL";
        try {
            stmt = getConnection().prepareCall(sql);
            stmt.setInt(1, mappedModelId);
            resultSet = stmt.executeQuery();
            while (resultSet.next()) {
                Map<String, Integer> m = new HashMap<String, Integer>();
                m.put("financeCubeId", Integer.parseInt(resultSet.getString(1)));
                m.put("companyId", Integer.parseInt(resultSet.getString(2)));
                result.add(m);
            }
        } catch (SQLException sqle) {
            this._log.debug(sql);
            System.err.println(sqle);
            sqle.printStackTrace();
            throw new RuntimeException(new StringBuilder().append(getEntityName()).append(" getCompanies").toString(), sqle);
        } finally {
            closeResultSet(resultSet);
            closeStatement(stmt);
            closeConnection();
        }
        return result;

    }

}

/* Location: /home/oracle/coa/cp.ear/cp.ear_orginal/cp-server.jar
 * Qualified Name: com.cedar.cp.ejb.impl.extsys.ExternalSystemDAO
 * JD-Core Version: 0.6.0 */
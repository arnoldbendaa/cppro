package com.cedar.cp.ejb.impl.model;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.math.BigDecimal;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.sql.DataSource;

import com.cedar.cp.api.base.DuplicateNameValidationException;
import com.cedar.cp.api.base.EntityList;
import com.cedar.cp.api.base.ValidationException;
import com.cedar.cp.api.base.VersionValidationException;
import com.cedar.cp.api.model.ModelRef;
import com.cedar.cp.api.xmlform.XmlFormRef;
import com.cedar.cp.dto.base.EntityListImpl;
import com.cedar.cp.dto.dimension.CalendarSpecPK;
import com.cedar.cp.dto.dimension.CalendarSpecRefImpl;
import com.cedar.cp.dto.dimension.DimensionPK;
import com.cedar.cp.dto.dimension.DimensionRefImpl;
import com.cedar.cp.dto.dimension.HierarchyElementPK;
import com.cedar.cp.dto.dimension.HierarchyElementRefImpl;
import com.cedar.cp.dto.dimension.HierarchyPK;
import com.cedar.cp.dto.dimension.HierarchyRefImpl;
import com.cedar.cp.dto.dimension.StructureElementPK;
import com.cedar.cp.dto.dimension.StructureElementRefImpl;
import com.cedar.cp.dto.model.AllBudgetHierarchiesELO;
import com.cedar.cp.dto.model.AllModelsELO;
import com.cedar.cp.dto.model.AllModelsWebELO;
import com.cedar.cp.dto.model.AllModelsWebForUserELO;
import com.cedar.cp.dto.model.AllModelsWithActiveCycleForUserELO;
import com.cedar.cp.dto.model.AllRootsForModelELO;
import com.cedar.cp.dto.model.BudgetCycleCK;
import com.cedar.cp.dto.model.BudgetCyclePK;
import com.cedar.cp.dto.model.BudgetCycleRefImpl;
import com.cedar.cp.dto.model.BudgetCyclesToFixStateELO;
import com.cedar.cp.dto.model.BudgetHierarchyRootNodeForModelELO;
import com.cedar.cp.dto.model.BudgetUserCK;
import com.cedar.cp.dto.model.BudgetUserPK;
import com.cedar.cp.dto.model.CalendarSpecForModelELO;
import com.cedar.cp.dto.model.CellCalcCK;
import com.cedar.cp.dto.model.CellCalcPK;
import com.cedar.cp.dto.model.FinanceCubeCK;
import com.cedar.cp.dto.model.FinanceCubePK;
import com.cedar.cp.dto.model.FinanceCubeRefImpl;
import com.cedar.cp.dto.model.HierarchiesForModelELO;
import com.cedar.cp.dto.model.MaxDepthForBudgetHierarchyELO;
import com.cedar.cp.dto.model.ModelCK;
import com.cedar.cp.dto.model.ModelDetailsWebELO;
import com.cedar.cp.dto.model.ModelDimensionRelCK;
import com.cedar.cp.dto.model.ModelDimensionRelPK;
import com.cedar.cp.dto.model.ModelDimensionRelRefImpl;
import com.cedar.cp.dto.model.ModelDimensionsELO;
import com.cedar.cp.dto.model.ModelDimensionseExcludeCallELO;
import com.cedar.cp.dto.model.ModelForDimensionELO;
import com.cedar.cp.dto.model.ModelPK;
import com.cedar.cp.dto.model.ModelPropertyCK;
import com.cedar.cp.dto.model.ModelPropertyPK;
import com.cedar.cp.dto.model.ModelRefImpl;
import com.cedar.cp.dto.model.SecurityAccessDefCK;
import com.cedar.cp.dto.model.SecurityAccessDefPK;
import com.cedar.cp.dto.model.SecurityGroupCK;
import com.cedar.cp.dto.model.SecurityGroupPK;
import com.cedar.cp.dto.model.StartupDetailsForPickerELO;
import com.cedar.cp.dto.model.StartupDetailsForPickerLevel2ELO;
import com.cedar.cp.dto.model.StartupDetailsForPickerLevel3ELO;
import com.cedar.cp.dto.model.act.BudgetActivityCK;
import com.cedar.cp.dto.model.act.BudgetActivityPK;
import com.cedar.cp.dto.model.cc.CcDeploymentCK;
import com.cedar.cp.dto.model.cc.CcDeploymentPK;
import com.cedar.cp.dto.model.cc.imp.dyn.ImportGridCK;
import com.cedar.cp.dto.model.cc.imp.dyn.ImportGridPK;
import com.cedar.cp.dto.model.cc.imp.dyn.ImportGridRefImpl;
import com.cedar.cp.dto.model.ra.ResponsibilityAreaCK;
import com.cedar.cp.dto.model.ra.ResponsibilityAreaPK;
import com.cedar.cp.dto.model.recharge.RechargeCK;
import com.cedar.cp.dto.model.recharge.RechargePK;
import com.cedar.cp.dto.model.udwp.WeightingProfileCK;
import com.cedar.cp.dto.model.udwp.WeightingProfilePK;
import com.cedar.cp.dto.model.virement.VirementCategoryCK;
import com.cedar.cp.dto.model.virement.VirementCategoryPK;
import com.cedar.cp.dto.model.virement.VirementRequestCK;
import com.cedar.cp.dto.model.virement.VirementRequestPK;
import com.cedar.cp.dto.xmlform.AllFinanceAndFlatFormsForModelELO;
import com.cedar.cp.dto.xmlform.XmlFormPK;
import com.cedar.cp.dto.xmlform.rebuild.FormRebuildCK;
import com.cedar.cp.dto.xmlform.rebuild.FormRebuildPK;
import com.cedar.cp.ejb.impl.base.AbstractDAO;
import com.cedar.cp.ejb.impl.base.SqlExecutor;
import com.cedar.cp.ejb.impl.model.act.BudgetActivityDAO;
import com.cedar.cp.ejb.impl.model.act.BudgetActivityEVO;
import com.cedar.cp.ejb.impl.model.cc.CcDeploymentDAO;
import com.cedar.cp.ejb.impl.model.cc.CcDeploymentEVO;
import com.cedar.cp.ejb.impl.model.cc.imp.dyn.ImportGridDAO;
import com.cedar.cp.ejb.impl.model.cc.imp.dyn.ImportGridEVO;
import com.cedar.cp.ejb.impl.model.ra.ResponsibilityAreaDAO;
import com.cedar.cp.ejb.impl.model.ra.ResponsibilityAreaEVO;
import com.cedar.cp.ejb.impl.model.recharge.RechargeDAO;
import com.cedar.cp.ejb.impl.model.recharge.RechargeEVO;
import com.cedar.cp.ejb.impl.model.udwp.WeightingProfileDAO;
import com.cedar.cp.ejb.impl.model.udwp.WeightingProfileEVO;
import com.cedar.cp.ejb.impl.model.virement.VirementCategoryDAO;
import com.cedar.cp.ejb.impl.model.virement.VirementCategoryEVO;
import com.cedar.cp.ejb.impl.model.virement.VirementRequestDAO;
import com.cedar.cp.ejb.impl.model.virement.VirementRequestEVO;
import com.cedar.cp.ejb.impl.xmlform.XmlFormDAO;
import com.cedar.cp.ejb.impl.xmlform.rebuild.FormRebuildDAO;
import com.cedar.cp.ejb.impl.xmlform.rebuild.FormRebuildEVO;
import com.cedar.cp.util.Log;
import com.cedar.cp.util.SqlBuilder;
import com.cedar.cp.util.Timer;
import com.cedar.cp.util.common.JdbcUtils;
import com.cedar.cp.util.flatform.model.workbook.WorkbookDTO;
import com.cedar.cp.util.flatform.model.workbook.WorkbookProperties;
import com.cedar.cp.util.flatform.model.workbook.editor.WorkbookMapper;
import com.cedar.cp.util.flatform.model.workbook.util.CellType;
import com.softproideas.server.recalculate.dto.ElementDTO;
import com.softproideas.server.recalculate.dto.ExcelFormDTO;

/*      */ public class ModelDAO extends AbstractDAO
/*      */ {
/*  223 */   Log _log = new Log(getClass());
/*      */   protected static final String SQL_FIND_BY_PRIMARY_KEY = "select MODEL_ID from MODEL where    MODEL_ID = ? ";
/*      */   private static final String SQL_SELECT_COLUMNS = "select MODEL.MODEL_ID,MODEL.VIS_ID,MODEL.DESCRIPTION,MODEL.ACCOUNT_ID,MODEL.CALENDAR_ID,MODEL.BUDGET_HIERARCHY_ID,MODEL.CURRENCY_IN_USE,MODEL.CURRENCY_ID,MODEL.LOCKED,MODEL.VIREMENT_ENTRY_ENABLED,MODEL.VERSION_NUM,MODEL.UPDATED_BY_USER_ID,MODEL.UPDATED_TIME,MODEL.CREATED_TIME";
/*      */   protected static final String SQL_LOAD = " from MODEL where    MODEL_ID = ? ";
/*      */   protected static final String SQL_CREATE = "insert into MODEL ( MODEL_ID,VIS_ID,DESCRIPTION,ACCOUNT_ID,CALENDAR_ID,BUDGET_HIERARCHY_ID,CURRENCY_IN_USE,CURRENCY_ID,LOCKED,VIREMENT_ENTRY_ENABLED,VERSION_NUM,UPDATED_BY_USER_ID,UPDATED_TIME,CREATED_TIME) values ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
/*      */   protected static final String SQL_UPDATE_SEQ_NUM = "update MODEL_SEQ set SEQ_NUM = SEQ_NUM + ?";
/*      */   protected static final String SQL_SELECT_SEQ_NUM = "select SEQ_NUM from MODEL_SEQ";
/*      */   protected static final String SQL_DUPLICATE_VALUE_CHECK_MODELNAME = "select count(*) from MODEL where    VIS_ID = ? and not(    MODEL_ID = ? )";
/*      */   protected static final String SQL_STORE = "update MODEL set VIS_ID = ?,DESCRIPTION = ?,ACCOUNT_ID = ?,CALENDAR_ID = ?,BUDGET_HIERARCHY_ID = ?,CURRENCY_IN_USE = ?,CURRENCY_ID = ?,LOCKED = ?,VIREMENT_ENTRY_ENABLED = ?,VERSION_NUM = ?,UPDATED_BY_USER_ID = ?,UPDATED_TIME = ?,CREATED_TIME = ? where    MODEL_ID = ? AND VERSION_NUM = ?";
/*      */   protected static final String SQL_CHECK_VERSION_NUM = "select VERSION_NUM from MODEL where MODEL_ID = ?";
/*      */   protected static final String SQL_REMOVE = "delete from MODEL where    MODEL_ID = ? ";

             protected static String SQL_ALL_MODELS = "select 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,MODEL.DESCRIPTION      ,MODEL.BUDGET_HIERARCHY_ID      ,(SELECT 'Y' FROM dual WHERE EXISTS (SELECT 1 FROM MAPPED_MODEL WHERE MAPPED_MODEL.MODEL_ID = MODEL.MODEL_ID AND MAPPED_MODEL.GLOBAL = 'Y')) as GLOBAL     from     MODEL where 1=1  order by MODEL.VIS_ID";
             protected static String SQL_ALL_MODELS_FOR_USER = "select 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,MODEL.DESCRIPTION      ,MODEL.BUDGET_HIERARCHY_ID      ,(SELECT 'Y' FROM dual WHERE EXISTS (SELECT 1 FROM MAPPED_MODEL WHERE MAPPED_MODEL.MODEL_ID = MODEL.MODEL_ID AND MAPPED_MODEL.GLOBAL = 'Y')) as GLOBAL     from     MODEL where model.model_id in (select distinct model_id from budget_user where user_id = ?)  order by MODEL.VIS_ID";
             protected static String SQL_ALL_MODELS_FOR_GLOBAL_MAPPED_MODEL = "SELECT  0,  MODEL.MODEL_ID,  MODEL.VIS_ID ,  MODEL.DESCRIPTION ,  MODEL.BUDGET_HIERARCHY_ID ,  null as GLOBAL  FROM  MODEL  WHERE  MODEL.MODEL_ID IN  (select MAPPED_MODEL.MODEL_ID from MAPPED_MODEL where MAPPED_MODEL.COMPANY_VIS_ID in (select TRIM(regexp_substr((select MAPPED_MODEL.COMPANY_VIS_ID from MAPPED_MODEL where MAPPED_MODEL.MODEL_ID=?),'[^,]+', 1, level)) from dual connect by regexp_substr((select MAPPED_MODEL.COMPANY_VIS_ID from MAPPED_MODEL where MAPPED_MODEL.MODEL_ID=?), '[^,]+', 1, level) is not null))  ORDER BY  MODEL.VIS_ID";

/* 1141 */   protected static String SQL_ALL_MODELS_WEB = "select 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,MODEL.DESCRIPTION      ,MODEL.BUDGET_HIERARCHY_ID from MODEL where 1=1  order by MODEL.VIS_ID";
/*      */ 
/* 1230 */   protected static String SQL_ALL_MODELS_WEB_FOR_USER = "select distinct 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,MODEL.DESCRIPTION      ,MODEL.BUDGET_HIERARCHY_ID from MODEL    ,BUDGET_USER where 1=1  and  MODEL.MODEL_ID = BUDGET_USER.MODEL_ID AND BUDGET_USER.USER_ID = ? order by MODEL.VIS_ID";
/*      */ 
/* 1303 */   protected static String SQL_ALL_MODELS_WITH_ACTIVE_CYCLE_FOR_USER = "select distinct 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,MODEL.DESCRIPTION      ,MODEL.BUDGET_HIERARCHY_ID from MODEL    ,BUDGET_USER    ,BUDGET_CYCLE where 1=1  and  BUDGET_USER.USER_ID = ? AND BUDGET_USER.MODEL_ID = MODEL.MODEL_ID AND MODEL.MODEL_ID = BUDGET_CYCLE.MODEL_ID AND BUDGET_CYCLE.STATUS = 1 order by MODEL.VIS_ID";
/*      */ 
/* 1377 */   protected static String SQL_ALL_BUDGET_HIERARCHIES = "select 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,HIERARCHY.HIERARCHY_ID      ,HIERARCHY.VIS_ID      ,HIERARCHY_ELEMENT.HIERARCHY_ELEMENT_ID      ,HIERARCHY_ELEMENT.VIS_ID      ,STRUCTURE_ELEMENT.STRUCTURE_ID      ,STRUCTURE_ELEMENT.STRUCTURE_ELEMENT_ID      ,STRUCTURE_ELEMENT.VIS_ID      ,HIERARCHY.DESCRIPTION from MODEL    ,HIERARCHY    ,HIERARCHY_ELEMENT    ,STRUCTURE_ELEMENT where 1=1  and  MODEL.BUDGET_HIERARCHY_ID = HIERARCHY.HIERARCHY_ID and HIERARCHY.HIERARCHY_ID = HIERARCHY_ELEMENT.HIERARCHY_ID and HIERARCHY_ELEMENT.PARENT_ID = 0 and STRUCTURE_ELEMENT.STRUCTURE_ID = MODEL.BUDGET_HIERARCHY_ID and STRUCTURE_ELEMENT.STRUCTURE_ELEMENT_ID = HIERARCHY_ELEMENT.HIERARCHY_ELEMENT_ID order by MODEL.VIS_ID";
/*      */ 
/* 1507 */   protected static String SQL_MODEL_FOR_DIMENSION = "select 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,MODEL_DIMENSION_REL.MODEL_ID      ,MODEL_DIMENSION_REL.DIMENSION_ID from MODEL    ,MODEL_DIMENSION_REL where 1=1  and  MODEL.MODEL_ID = MODEL_DIMENSION_REL.MODEL_ID and MODEL_DIMENSION_REL.DIMENSION_ID = ?";
/*      */ 
/* 1605 */   protected static String SQL_MODEL_DIMENSIONS = "select 0       ,MODEL.MODEL_ID      ,DIMENSION.VIS_ID      ,DIMENSION.DIMENSION_ID      ,DIMENSION.VIS_ID      ,DIMENSION.TYPE      ,MODEL_DIMENSION_REL.MODEL_ID      ,MODEL_DIMENSION_REL.DIMENSION_ID      ,DIMENSION.DESCRIPTION      ,MODEL_DIMENSION_REL.DIMENSION_TYPE      ,MODEL_DIMENSION_REL.DIMENSION_SEQ_NUM from MODEL    ,DIMENSION    ,MODEL_DIMENSION_REL where 1=1  and  MODEL.MODEL_ID = ? and MODEL_DIMENSION_REL.MODEL_ID = MODEL.MODEL_ID and MODEL_DIMENSION_REL.DIMENSION_ID = DIMENSION.DIMENSION_ID order by MODEL_DIMENSION_REL.DIMENSION_SEQ_NUM";
/*      */ 
/* 1731 */   protected static String SQL_MODEL_DIMENSIONSE_EXCLUDE_CALL = "select 0       ,MODEL.MODEL_ID      ,DIMENSION.VIS_ID      ,DIMENSION.DIMENSION_ID      ,DIMENSION.VIS_ID      ,DIMENSION.TYPE      ,MODEL_DIMENSION_REL.MODEL_ID      ,MODEL_DIMENSION_REL.DIMENSION_ID      ,MODEL_DIMENSION_REL.DIMENSION_TYPE      ,MODEL_DIMENSION_REL.DIMENSION_SEQ_NUM from MODEL    ,DIMENSION    ,MODEL_DIMENSION_REL where 1=1  and  MODEL.MODEL_ID = ? and MODEL_DIMENSION_REL.MODEL_ID = MODEL.MODEL_ID and MODEL_DIMENSION_REL.DIMENSION_TYPE NOT IN (3) and MODEL_DIMENSION_REL.DIMENSION_ID = DIMENSION.DIMENSION_ID order by MODEL_DIMENSION_REL.DIMENSION_SEQ_NUM";
/*      */ 
/* 1854 */   protected static String SQL_MODEL_DETAILS_WEB = "select 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,MODEL.DESCRIPTION from MODEL where 1=1  and  MODEL.MODEL_ID = ?";
/*      */ 
/* 1944 */   protected static String SQL_ALL_ROOTS_FOR_MODEL = "select 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,STRUCTURE_ELEMENT.STRUCTURE_ID      ,STRUCTURE_ELEMENT.STRUCTURE_ELEMENT_ID      ,STRUCTURE_ELEMENT.VIS_ID      ,MODEL_DIMENSION_REL.MODEL_ID      ,MODEL_DIMENSION_REL.DIMENSION_ID      ,DIMENSION.DIMENSION_ID      ,DIMENSION.VIS_ID      ,DIMENSION.TYPE      ,HIERARCHY.HIERARCHY_ID      ,HIERARCHY.VIS_ID      ,STRUCTURE_ELEMENT.VIS_ID      ,STRUCTURE_ELEMENT.STRUCTURE_ID      ,STRUCTURE_ELEMENT.STRUCTURE_ELEMENT_ID      ,STRUCTURE_ELEMENT.DESCRIPTION      ,STRUCTURE_ELEMENT.PARENT_ID      ,STRUCTURE_ELEMENT.CHILD_INDEX      ,STRUCTURE_ELEMENT.DEPTH      ,STRUCTURE_ELEMENT.POSITION      ,STRUCTURE_ELEMENT.LEAF      ,STRUCTURE_ELEMENT.IS_CREDIT      ,STRUCTURE_ELEMENT.DISABLED      ,MODEL.BUDGET_HIERARCHY_ID      ,MODEL_DIMENSION_REL.DIMENSION_SEQ_NUM      ,DIMENSION.TYPE      ,DIMENSION.DIMENSION_ID from MODEL    ,STRUCTURE_ELEMENT    ,MODEL_DIMENSION_REL    ,DIMENSION    ,HIERARCHY where 1=1  and  MODEL.MODEL_ID = ? and MODEL_DIMENSION_REL.MODEL_ID = MODEL.MODEL_ID and DIMENSION.DIMENSION_ID = MODEL_DIMENSION_REL.DIMENSION_ID and HIERARCHY.DIMENSION_ID = MODEL_DIMENSION_REL.DIMENSION_ID and STRUCTURE_ELEMENT.STRUCTURE_ID = HIERARCHY.HIERARCHY_ID and STRUCTURE_ELEMENT.PARENT_ID = 0 order by MODEL_DIMENSION_REL.DIMENSION_SEQ_NUM,HIERARCHY.HIERARCHY_ID";
/*      */ 
/* 2146 */   protected static String SQL_BUDGET_HIERARCHY_ROOT_NODE_FOR_MODEL = "select 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,STRUCTURE_ELEMENT.STRUCTURE_ID      ,STRUCTURE_ELEMENT.STRUCTURE_ELEMENT_ID      ,STRUCTURE_ELEMENT.VIS_ID      ,MODEL_DIMENSION_REL.MODEL_ID      ,MODEL_DIMENSION_REL.DIMENSION_ID      ,DIMENSION.DIMENSION_ID      ,DIMENSION.VIS_ID      ,DIMENSION.TYPE      ,HIERARCHY.HIERARCHY_ID      ,HIERARCHY.VIS_ID      ,STRUCTURE_ELEMENT.VIS_ID      ,STRUCTURE_ELEMENT.STRUCTURE_ID      ,STRUCTURE_ELEMENT.STRUCTURE_ELEMENT_ID      ,STRUCTURE_ELEMENT.DESCRIPTION      ,STRUCTURE_ELEMENT.PARENT_ID      ,STRUCTURE_ELEMENT.CHILD_INDEX      ,STRUCTURE_ELEMENT.DEPTH      ,STRUCTURE_ELEMENT.POSITION      ,STRUCTURE_ELEMENT.LEAF      ,STRUCTURE_ELEMENT.IS_CREDIT      ,STRUCTURE_ELEMENT.DISABLED      ,MODEL.BUDGET_HIERARCHY_ID from MODEL    ,STRUCTURE_ELEMENT    ,MODEL_DIMENSION_REL    ,DIMENSION    ,HIERARCHY where 1=1  and  MODEL.MODEL_ID = ? and MODEL.MODEL_ID = MODEL_DIMENSION_REL.MODEL_ID and MODEL_DIMENSION_REL.DIMENSION_ID = DIMENSION.DIMENSION_ID and DIMENSION.DIMENSION_ID = HIERARCHY.DIMENSION_ID and HIERARCHY.HIERARCHY_ID = MODEL.BUDGET_HIERARCHY_ID and HIERARCHY.HIERARCHY_ID = STRUCTURE_ELEMENT.STRUCTURE_ID and STRUCTURE_ELEMENT.PARENT_ID = 0";
/*      */ 
/* 2339 */   protected static String SQL_BUDGET_CYCLES_TO_FIX_STATE = "select 0       ,MODEL.BUDGET_HIERARCHY_ID      ,BUDGET_CYCLE.BUDGET_CYCLE_ID from MODEL    ,BUDGET_CYCLE where 1=1  and  MODEL.MODEL_ID = ? and MODEL.MODEL_ID = BUDGET_CYCLE.MODEL_ID and BUDGET_CYCLE.STATUS = 1";
/*      */ 
/* 2407 */   protected static String SQL_MAX_DEPTH_FOR_BUDGET_HIERARCHY = "select 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,MODEL.MODEL_ID      ,(select max(se.depth) from structure_element se, model m where m.model_id = MODEL.MODEL_ID and m.budget_hierarchy_id = se.structure_id) MAX_DEPTH from MODEL where 1=1  and  MODEL.MODEL_ID = ?";
/*      */ 
/* 2494 */   protected static String SQL_CALENDAR_SPEC_FOR_MODEL = "select 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,CALENDAR_SPEC.CALENDAR_SPEC_ID      ,MODEL_DIMENSION_REL.MODEL_ID      ,MODEL_DIMENSION_REL.DIMENSION_ID      ,CALENDAR_SPEC.YEAR_START_MONTH from MODEL    ,CALENDAR_SPEC    ,MODEL_DIMENSION_REL where 1=1  and  MODEL.MODEL_ID = ? and MODEL.MODEL_ID = MODEL_DIMENSION_REL.MODEL_ID and MODEL_DIMENSION_REL.DIMENSION_TYPE = 3 and CALENDAR_SPEC.DIMENSION_ID = MODEL_DIMENSION_REL.DIMENSION_ID";
/*      */ 
/* 2610 */   protected static String SQL_HIERARCHIES_FOR_MODEL = "select 0       ,MODEL.MODEL_ID      ,MODEL.VIS_ID      ,DIMENSION.DIMENSION_ID      ,DIMENSION.VIS_ID      ,DIMENSION.TYPE      ,MODEL_DIMENSION_REL.MODEL_ID      ,MODEL_DIMENSION_REL.DIMENSION_ID      ,HIERARCHY.HIERARCHY_ID      ,HIERARCHY.VIS_ID      ,DIMENSION.DESCRIPTION from MODEL    ,DIMENSION    ,MODEL_DIMENSION_REL    ,HIERARCHY where 1=1  and  MODEL.MODEL_ID = ? and MODEL.MODEL_ID = MODEL_DIMENSION_REL.MODEL_ID and DIMENSION.DIMENSION_ID = MODEL_DIMENSION_REL.DIMENSION_ID and HIERARCHY.DIMENSION_ID = MODEL_DIMENSION_REL.DIMENSION_ID order by MODEL_DIMENSION_REL.DIMENSION_SEQ_NUM";
/*      */ 
/* 2745 */   private static String[][] SQL_DELETE_CHILDREN = { { "FINANCE_CUBE", "delete from FINANCE_CUBE where     FINANCE_CUBE.MODEL_ID = ? " }, { "MODEL_DIMENSION_REL", "delete from MODEL_DIMENSION_REL where     MODEL_DIMENSION_REL.MODEL_ID = ? " }, { "MODEL_PROPERTY", "delete from MODEL_PROPERTY where     MODEL_PROPERTY.MODEL_ID = ? " }, { "BUDGET_CYCLE", "delete from BUDGET_CYCLE where     BUDGET_CYCLE.MODEL_ID = ? " }, { "BUDGET_USER", "delete from BUDGET_USER where     BUDGET_USER.MODEL_ID = ? " }, { "SECURITY_GROUP", "delete from SECURITY_GROUP where     SECURITY_GROUP.MODEL_ID = ? " }, { "SECURITY_ACCESS_DEF", "delete from SECURITY_ACCESS_DEF where     SECURITY_ACCESS_DEF.MODEL_ID = ? " }, { "CELL_CALC", "delete from CELL_CALC where     CELL_CALC.MODEL_ID = ? " }, { "VIREMENT_CATEGORY", "delete from VIREMENT_CATEGORY where     VIREMENT_CATEGORY.MODEL_ID = ? " }, { "RECHARGE", "delete from RECHARGE where     RECHARGE.MODEL_ID = ? " }, { "BUDGET_ACTIVITY", "delete from BUDGET_ACTIVITY where     BUDGET_ACTIVITY.MODEL_ID = ? " }, { "VIREMENT_REQUEST", "delete from VIREMENT_REQUEST where     VIREMENT_REQUEST.MODEL_ID = ? " }, { "RESPONSIBILITY_AREA", "delete from RESPONSIBILITY_AREA where     RESPONSIBILITY_AREA.MODEL_ID = ? " }, { "WEIGHTING_PROFILE", "delete from WEIGHTING_PROFILE where     WEIGHTING_PROFILE.MODEL_ID = ? " }, { "CC_DEPLOYMENT", "delete from CC_DEPLOYMENT where     CC_DEPLOYMENT.MODEL_ID = ? " }, { "FORM_REBUILD", "delete from FORM_REBUILD where     FORM_REBUILD.MODEL_ID = ? " }, { "IMPORT_GRID", "delete from IMPORT_GRID where     IMPORT_GRID.MODEL_ID = ? " } };
/*      */ 
/* 2834 */   private static String[][] SQL_DELETE_CHILDRENS_DEPENDANTS = { { "FINANCE_CUBE_DATA_TYPE", "delete from FINANCE_CUBE_DATA_TYPE FinanceCubeDataType where exists (select * from FINANCE_CUBE_DATA_TYPE,FINANCE_CUBE,MODEL where     FINANCE_CUBE_DATA_TYPE.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.MODEL_ID = MODEL.MODEL_ID and FinanceCubeDataType.FINANCE_CUBE_ID = FINANCE_CUBE_DATA_TYPE.FINANCE_CUBE_ID " }, { "BUDGET_LIMIT", "delete from BUDGET_LIMIT BudgetLimit where exists (select * from BUDGET_LIMIT,FINANCE_CUBE,MODEL where     BUDGET_LIMIT.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.MODEL_ID = MODEL.MODEL_ID and BudgetLimit.FINANCE_CUBE_ID = BUDGET_LIMIT.FINANCE_CUBE_ID " }, { "ROLL_UP_RULE", "delete from ROLL_UP_RULE RollUpRule where exists (select * from ROLL_UP_RULE,FINANCE_CUBE,MODEL where     ROLL_UP_RULE.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.MODEL_ID = MODEL.MODEL_ID and RollUpRule.FINANCE_CUBE_ID = ROLL_UP_RULE.FINANCE_CUBE_ID " }, { "CUBE_FORMULA", "delete from CUBE_FORMULA CubeFormula where exists (select * from CUBE_FORMULA,FINANCE_CUBE,MODEL where     CUBE_FORMULA.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.MODEL_ID = MODEL.MODEL_ID and CubeFormula.FINANCE_CUBE_ID = CUBE_FORMULA.FINANCE_CUBE_ID " }, { "FORMULA_DEPLOYMENT_LINE", "delete from FORMULA_DEPLOYMENT_LINE FormulaDeploymentLine where exists (select * from FORMULA_DEPLOYMENT_LINE,CUBE_FORMULA,FINANCE_CUBE,MODEL where     FORMULA_DEPLOYMENT_LINE.CUBE_FORMULA_ID = CUBE_FORMULA.CUBE_FORMULA_ID and CUBE_FORMULA.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.MODEL_ID = MODEL.MODEL_ID and FormulaDeploymentLine.CUBE_FORMULA_ID = FORMULA_DEPLOYMENT_LINE.CUBE_FORMULA_ID " }, { "FORMULA_DEPLOYMENT_ENTRY", "delete from FORMULA_DEPLOYMENT_ENTRY FormulaDeploymentEntry where exists (select * from FORMULA_DEPLOYMENT_ENTRY,FORMULA_DEPLOYMENT_LINE,CUBE_FORMULA,FINANCE_CUBE,MODEL where     FORMULA_DEPLOYMENT_ENTRY.FORMULA_DEPLOYMENT_LINE_ID = FORMULA_DEPLOYMENT_LINE.FORMULA_DEPLOYMENT_LINE_ID and FORMULA_DEPLOYMENT_LINE.CUBE_FORMULA_ID = CUBE_FORMULA.CUBE_FORMULA_ID and CUBE_FORMULA.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.MODEL_ID = MODEL.MODEL_ID and FormulaDeploymentEntry.FORMULA_DEPLOYMENT_LINE_ID = FORMULA_DEPLOYMENT_ENTRY.FORMULA_DEPLOYMENT_LINE_ID " }, { "FORMULA_DEPLOYMENT_DT", "delete from FORMULA_DEPLOYMENT_DT FormulaDeploymentDt where exists (select * from FORMULA_DEPLOYMENT_DT,FORMULA_DEPLOYMENT_LINE,CUBE_FORMULA,FINANCE_CUBE,MODEL where     FORMULA_DEPLOYMENT_DT.FORMULA_DEPLOYMENT_LINE_ID = FORMULA_DEPLOYMENT_LINE.FORMULA_DEPLOYMENT_LINE_ID and FORMULA_DEPLOYMENT_LINE.CUBE_FORMULA_ID = CUBE_FORMULA.CUBE_FORMULA_ID and CUBE_FORMULA.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.MODEL_ID = MODEL.MODEL_ID and FormulaDeploymentDt.FORMULA_DEPLOYMENT_LINE_ID = FORMULA_DEPLOYMENT_DT.FORMULA_DEPLOYMENT_LINE_ID " }, { "CUBE_FORMULA_PACKAGE", "delete from CUBE_FORMULA_PACKAGE CubeFormulaPackage where exists (select * from CUBE_FORMULA_PACKAGE,FINANCE_CUBE,MODEL where     CUBE_FORMULA_PACKAGE.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.MODEL_ID = MODEL.MODEL_ID and CubeFormulaPackage.FINANCE_CUBE_ID = CUBE_FORMULA_PACKAGE.FINANCE_CUBE_ID " }, { "BUDGET_STATE", "delete from BUDGET_STATE BudgetState where exists (select * from BUDGET_STATE,BUDGET_CYCLE,MODEL where     BUDGET_STATE.BUDGET_CYCLE_ID = BUDGET_CYCLE.BUDGET_CYCLE_ID and BUDGET_CYCLE.MODEL_ID = MODEL.MODEL_ID and BudgetState.BUDGET_CYCLE_ID = BUDGET_STATE.BUDGET_CYCLE_ID " }, { "BUDGET_STATE_HISTORY", "delete from BUDGET_STATE_HISTORY BudgetStateHistory where exists (select * from BUDGET_STATE_HISTORY,BUDGET_STATE,BUDGET_CYCLE,MODEL where     BUDGET_STATE_HISTORY.BUDGET_CYCLE_ID = BUDGET_STATE.BUDGET_CYCLE_ID and BUDGET_STATE_HISTORY.STRUCTURE_ELEMENT_ID = BUDGET_STATE.STRUCTURE_ELEMENT_ID and BUDGET_STATE.BUDGET_CYCLE_ID = BUDGET_CYCLE.BUDGET_CYCLE_ID and BUDGET_CYCLE.MODEL_ID = MODEL.MODEL_ID and BudgetStateHistory.BUDGET_CYCLE_ID = BUDGET_STATE_HISTORY.BUDGET_CYCLE_ID and BudgetStateHistory.STRUCTURE_ELEMENT_ID = BUDGET_STATE_HISTORY.STRUCTURE_ELEMENT_ID " }, { "LEVEL_DATE", "delete from LEVEL_DATE LevelDate where exists (select * from LEVEL_DATE,BUDGET_CYCLE,MODEL where     LEVEL_DATE.BUDGET_CYCLE_ID = BUDGET_CYCLE.BUDGET_CYCLE_ID and BUDGET_CYCLE.MODEL_ID = MODEL.MODEL_ID and LevelDate.BUDGET_CYCLE_ID = LEVEL_DATE.BUDGET_CYCLE_ID " }, { "SECURITY_GROUP_USER_REL", "delete from SECURITY_GROUP_USER_REL SecurityGroupUserRel where exists (select * from SECURITY_GROUP_USER_REL,SECURITY_GROUP,MODEL where     SECURITY_GROUP_USER_REL.SECURITY_GROUP_ID = SECURITY_GROUP.SECURITY_GROUP_ID and SECURITY_GROUP.MODEL_ID = MODEL.MODEL_ID and SecurityGroupUserRel.SECURITY_GROUP_ID = SECURITY_GROUP_USER_REL.SECURITY_GROUP_ID " }, { "SECURITY_ACC_RNG_REL", "delete from SECURITY_ACC_RNG_REL SecurityAccRngRel where exists (select * from SECURITY_ACC_RNG_REL,SECURITY_ACCESS_DEF,MODEL where     SECURITY_ACC_RNG_REL.SECURITY_ACCESS_DEF_ID = SECURITY_ACCESS_DEF.SECURITY_ACCESS_DEF_ID and SECURITY_ACCESS_DEF.MODEL_ID = MODEL.MODEL_ID and SecurityAccRngRel.SECURITY_ACCESS_DEF_ID = SECURITY_ACC_RNG_REL.SECURITY_ACCESS_DEF_ID " }, { "CELL_CALC_ASSOC", "delete from CELL_CALC_ASSOC CellCalcAssoc where exists (select * from CELL_CALC_ASSOC,CELL_CALC,MODEL where     CELL_CALC_ASSOC.CELL_CALC_ID = CELL_CALC.CELL_CALC_ID and CELL_CALC.MODEL_ID = MODEL.MODEL_ID and CellCalcAssoc.CELL_CALC_ID = CELL_CALC_ASSOC.CELL_CALC_ID " }, { "VIREMENT_LOCATION", "delete from VIREMENT_LOCATION VirementLocation where exists (select * from VIREMENT_LOCATION,VIREMENT_CATEGORY,MODEL where     VIREMENT_LOCATION.VIREMENT_CATEGORY_ID = VIREMENT_CATEGORY.VIREMENT_CATEGORY_ID and VIREMENT_CATEGORY.MODEL_ID = MODEL.MODEL_ID and VirementLocation.VIREMENT_CATEGORY_ID = VIREMENT_LOCATION.VIREMENT_CATEGORY_ID " }, { "VIREMENT_ACCOUNT", "delete from VIREMENT_ACCOUNT VirementAccount where exists (select * from VIREMENT_ACCOUNT,VIREMENT_CATEGORY,MODEL where     VIREMENT_ACCOUNT.VIREMENT_CATEGORY_ID = VIREMENT_CATEGORY.VIREMENT_CATEGORY_ID and VIREMENT_CATEGORY.MODEL_ID = MODEL.MODEL_ID and VirementAccount.VIREMENT_CATEGORY_ID = VIREMENT_ACCOUNT.VIREMENT_CATEGORY_ID " }, { "RECHARGE_CELLS", "delete from RECHARGE_CELLS RechargeCells where exists (select * from RECHARGE_CELLS,RECHARGE,MODEL where     RECHARGE_CELLS.RECHARGE_ID = RECHARGE.RECHARGE_ID and RECHARGE.MODEL_ID = MODEL.MODEL_ID and RechargeCells.RECHARGE_ID = RECHARGE_CELLS.RECHARGE_ID " }, { "BUDGET_ACTIVITY_LINK", "delete from BUDGET_ACTIVITY_LINK BudgetActivityLink where exists (select * from BUDGET_ACTIVITY_LINK,BUDGET_ACTIVITY,MODEL where     BUDGET_ACTIVITY_LINK.BUDGET_ACTIVITY_ID = BUDGET_ACTIVITY.BUDGET_ACTIVITY_ID and BUDGET_ACTIVITY.MODEL_ID = MODEL.MODEL_ID and BudgetActivityLink.BUDGET_ACTIVITY_ID = BUDGET_ACTIVITY_LINK.BUDGET_ACTIVITY_ID " }, { "VIREMENT_REQUEST_GROUP", "delete from VIREMENT_REQUEST_GROUP VirementRequestGroup where exists (select * from VIREMENT_REQUEST_GROUP,VIREMENT_REQUEST,MODEL where     VIREMENT_REQUEST_GROUP.REQUEST_ID = VIREMENT_REQUEST.REQUEST_ID and VIREMENT_REQUEST.MODEL_ID = MODEL.MODEL_ID and VirementRequestGroup.REQUEST_ID = VIREMENT_REQUEST_GROUP.REQUEST_ID " }, { "VIREMENT_REQUEST_LINE", "delete from VIREMENT_REQUEST_LINE VirementRequestLine where exists (select * from VIREMENT_REQUEST_LINE,VIREMENT_REQUEST_GROUP,VIREMENT_REQUEST,MODEL where     VIREMENT_REQUEST_LINE.REQUEST_GROUP_ID = VIREMENT_REQUEST_GROUP.REQUEST_GROUP_ID and VIREMENT_REQUEST_GROUP.REQUEST_ID = VIREMENT_REQUEST.REQUEST_ID and VIREMENT_REQUEST.MODEL_ID = MODEL.MODEL_ID and VirementRequestLine.REQUEST_GROUP_ID = VIREMENT_REQUEST_LINE.REQUEST_GROUP_ID " }, { "VIREMENT_LINE_SPREAD", "delete from VIREMENT_LINE_SPREAD VirementLineSpread where exists (select * from VIREMENT_LINE_SPREAD,VIREMENT_REQUEST_LINE,VIREMENT_REQUEST_GROUP,VIREMENT_REQUEST,MODEL where     VIREMENT_LINE_SPREAD.REQUEST_LINE_ID = VIREMENT_REQUEST_LINE.REQUEST_LINE_ID and VIREMENT_REQUEST_LINE.REQUEST_GROUP_ID = VIREMENT_REQUEST_GROUP.REQUEST_GROUP_ID and VIREMENT_REQUEST_GROUP.REQUEST_ID = VIREMENT_REQUEST.REQUEST_ID and VIREMENT_REQUEST.MODEL_ID = MODEL.MODEL_ID and VirementLineSpread.REQUEST_LINE_ID = VIREMENT_LINE_SPREAD.REQUEST_LINE_ID " }, { "VIREMENT_AUTH_POINT", "delete from VIREMENT_AUTH_POINT VirementAuthPoint where exists (select * from VIREMENT_AUTH_POINT,VIREMENT_REQUEST,MODEL where     VIREMENT_AUTH_POINT.REQUEST_ID = VIREMENT_REQUEST.REQUEST_ID and VIREMENT_REQUEST.MODEL_ID = MODEL.MODEL_ID and VirementAuthPoint.REQUEST_ID = VIREMENT_AUTH_POINT.REQUEST_ID " }, { "VIREMENT_AUTHORISERS", "delete from VIREMENT_AUTHORISERS VirementAuthorisers where exists (select * from VIREMENT_AUTHORISERS,VIREMENT_AUTH_POINT,VIREMENT_REQUEST,MODEL where     VIREMENT_AUTHORISERS.AUTH_POINT_ID = VIREMENT_AUTH_POINT.AUTH_POINT_ID and VIREMENT_AUTH_POINT.REQUEST_ID = VIREMENT_REQUEST.REQUEST_ID and VIREMENT_REQUEST.MODEL_ID = MODEL.MODEL_ID and VirementAuthorisers.AUTH_POINT_ID = VIREMENT_AUTHORISERS.AUTH_POINT_ID " }, { "VIREMENT_AUTH_POINT_LINK", "delete from VIREMENT_AUTH_POINT_LINK VirementAuthPointLink where exists (select * from VIREMENT_AUTH_POINT_LINK,VIREMENT_AUTH_POINT,VIREMENT_REQUEST,MODEL where     VIREMENT_AUTH_POINT_LINK.AUTH_POINT_ID = VIREMENT_AUTH_POINT.AUTH_POINT_ID and VIREMENT_AUTH_POINT.REQUEST_ID = VIREMENT_REQUEST.REQUEST_ID and VIREMENT_REQUEST.MODEL_ID = MODEL.MODEL_ID and VirementAuthPointLink.AUTH_POINT_ID = VIREMENT_AUTH_POINT_LINK.AUTH_POINT_ID " }, { "WEIGHTING_PROFILE_LINE", "delete from WEIGHTING_PROFILE_LINE WeightingProfileLine where exists (select * from WEIGHTING_PROFILE_LINE,WEIGHTING_PROFILE,MODEL where     WEIGHTING_PROFILE_LINE.PROFILE_ID = WEIGHTING_PROFILE.PROFILE_ID and WEIGHTING_PROFILE.MODEL_ID = MODEL.MODEL_ID and WeightingProfileLine.PROFILE_ID = WEIGHTING_PROFILE_LINE.PROFILE_ID " }, { "WEIGHTING_DEPLOYMENT", "delete from WEIGHTING_DEPLOYMENT WeightingDeployment where exists (select * from WEIGHTING_DEPLOYMENT,WEIGHTING_PROFILE,MODEL where     WEIGHTING_DEPLOYMENT.PROFILE_ID = WEIGHTING_PROFILE.PROFILE_ID and WEIGHTING_PROFILE.MODEL_ID = MODEL.MODEL_ID and WeightingDeployment.PROFILE_ID = WEIGHTING_DEPLOYMENT.PROFILE_ID " }, { "WEIGHTING_DEPLOYMENT_LINE", "delete from WEIGHTING_DEPLOYMENT_LINE WeightingDeploymentLine where exists (select * from WEIGHTING_DEPLOYMENT_LINE,WEIGHTING_DEPLOYMENT,WEIGHTING_PROFILE,MODEL where     WEIGHTING_DEPLOYMENT_LINE.DEPLOYMENT_ID = WEIGHTING_DEPLOYMENT.DEPLOYMENT_ID and WEIGHTING_DEPLOYMENT.PROFILE_ID = WEIGHTING_PROFILE.PROFILE_ID and WEIGHTING_PROFILE.MODEL_ID = MODEL.MODEL_ID and WeightingDeploymentLine.DEPLOYMENT_ID = WEIGHTING_DEPLOYMENT_LINE.DEPLOYMENT_ID " }, { "CC_DEPLOYMENT_LINE", "delete from CC_DEPLOYMENT_LINE CcDeploymentLine where exists (select * from CC_DEPLOYMENT_LINE,CC_DEPLOYMENT,MODEL where     CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_ID = CC_DEPLOYMENT.CC_DEPLOYMENT_ID and CC_DEPLOYMENT.MODEL_ID = MODEL.MODEL_ID and CcDeploymentLine.CC_DEPLOYMENT_ID = CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_ID " }, { "CC_DEPLOYMENT_ENTRY", "delete from CC_DEPLOYMENT_ENTRY CcDeploymentEntry where exists (select * from CC_DEPLOYMENT_ENTRY,CC_DEPLOYMENT_LINE,CC_DEPLOYMENT,MODEL where     CC_DEPLOYMENT_ENTRY.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID and CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_ID = CC_DEPLOYMENT.CC_DEPLOYMENT_ID and CC_DEPLOYMENT.MODEL_ID = MODEL.MODEL_ID and CcDeploymentEntry.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT_ENTRY.CC_DEPLOYMENT_LINE_ID " }, { "CC_DEPLOYMENT_DATA_TYPE", "delete from CC_DEPLOYMENT_DATA_TYPE CcDeploymentDataType where exists (select * from CC_DEPLOYMENT_DATA_TYPE,CC_DEPLOYMENT_LINE,CC_DEPLOYMENT,MODEL where     CC_DEPLOYMENT_DATA_TYPE.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID and CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_ID = CC_DEPLOYMENT.CC_DEPLOYMENT_ID and CC_DEPLOYMENT.MODEL_ID = MODEL.MODEL_ID and CcDeploymentDataType.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT_DATA_TYPE.CC_DEPLOYMENT_LINE_ID " }, { "CC_MAPPING_LINE", "delete from CC_MAPPING_LINE CcMappingLine where exists (select * from CC_MAPPING_LINE,CC_DEPLOYMENT_LINE,CC_DEPLOYMENT,MODEL where     CC_MAPPING_LINE.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID and CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_ID = CC_DEPLOYMENT.CC_DEPLOYMENT_ID and CC_DEPLOYMENT.MODEL_ID = MODEL.MODEL_ID and CcMappingLine.CC_DEPLOYMENT_LINE_ID = CC_MAPPING_LINE.CC_DEPLOYMENT_LINE_ID " }, { "CC_MAPPING_ENTRY", "delete from CC_MAPPING_ENTRY CcMappingEntry where exists (select * from CC_MAPPING_ENTRY,CC_MAPPING_LINE,CC_DEPLOYMENT_LINE,CC_DEPLOYMENT,MODEL where     CC_MAPPING_ENTRY.CC_MAPPING_LINE_ID = CC_MAPPING_LINE.CC_MAPPING_LINE_ID and CC_MAPPING_LINE.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID and CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_ID = CC_DEPLOYMENT.CC_DEPLOYMENT_ID and CC_DEPLOYMENT.MODEL_ID = MODEL.MODEL_ID and CcMappingEntry.CC_MAPPING_LINE_ID = CC_MAPPING_ENTRY.CC_MAPPING_LINE_ID " } };
/*      */ 
/* 3226 */   private static String SQL_DELETE_DEPENDANT_CRITERIA = "and MODEL.MODEL_ID = ?)";
/*      */   private static final String SQL_CHECK_IF_VALID = "select VERSION_NUM from MODEL where   MODEL_ID = ?";
/*      */   public static final String SQL_GET_FINANCE_CUBE_REF = "select 0,MODEL.MODEL_ID,FINANCE_CUBE.VIS_ID from FINANCE_CUBE,MODEL where 1=1 and FINANCE_CUBE.FINANCE_CUBE_ID = ? and FINANCE_CUBE.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_FINANCE_CUBE_DATA_TYPE_REF = "select 0,MODEL.MODEL_ID,FINANCE_CUBE.FINANCE_CUBE_ID from FINANCE_CUBE_DATA_TYPE,MODEL,FINANCE_CUBE where 1=1 and FINANCE_CUBE_DATA_TYPE.FINANCE_CUBE_ID = ? and FINANCE_CUBE_DATA_TYPE.DATA_TYPE_ID = ? and FINANCE_CUBE_DATA_TYPE.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.FINANCE_CUBE_ID = MODEL.FINANCE_CUBE_ID";
/*      */   public static final String SQL_GET_BUDGET_LIMIT_REF = "select 0,MODEL.MODEL_ID,FINANCE_CUBE.FINANCE_CUBE_ID from BUDGET_LIMIT,MODEL,FINANCE_CUBE where 1=1 and BUDGET_LIMIT.BUDGET_LIMIT_ID = ? and BUDGET_LIMIT.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.FINANCE_CUBE_ID = MODEL.FINANCE_CUBE_ID";
/*      */   public static final String SQL_GET_ROLL_UP_RULE_REF = "select 0,MODEL.MODEL_ID,FINANCE_CUBE.FINANCE_CUBE_ID from ROLL_UP_RULE,MODEL,FINANCE_CUBE where 1=1 and ROLL_UP_RULE.ROLL_UP_RULE_ID = ? and ROLL_UP_RULE.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.FINANCE_CUBE_ID = MODEL.FINANCE_CUBE_ID";
/*      */   public static final String SQL_GET_CUBE_FORMULA_REF = "select 0,MODEL.MODEL_ID,FINANCE_CUBE.FINANCE_CUBE_ID,CUBE_FORMULA.VIS_ID from CUBE_FORMULA,MODEL,FINANCE_CUBE where 1=1 and CUBE_FORMULA.CUBE_FORMULA_ID = ? and CUBE_FORMULA.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.FINANCE_CUBE_ID = MODEL.FINANCE_CUBE_ID";
/*      */   public static final String SQL_GET_FORMULA_DEPLOYMENT_LINE_REF = "select 0,MODEL.MODEL_ID,FINANCE_CUBE.FINANCE_CUBE_ID,CUBE_FORMULA.CUBE_FORMULA_ID from FORMULA_DEPLOYMENT_LINE,MODEL,FINANCE_CUBE,CUBE_FORMULA where 1=1 and FORMULA_DEPLOYMENT_LINE.FORMULA_DEPLOYMENT_LINE_ID = ? and FORMULA_DEPLOYMENT_LINE.CUBE_FORMULA_ID = CUBE_FORMULA.CUBE_FORMULA_ID and CUBE_FORMULA.CUBE_FORMULA_ID = FINANCE_CUBE.CUBE_FORMULA_ID and FINANCE_CUBE.FINANCE_CUBE_ID = MODEL.FINANCE_CUBE_ID";
/*      */   public static final String SQL_GET_FORMULA_DEPLOYMENT_ENTRY_REF = "select 0,MODEL.MODEL_ID,FINANCE_CUBE.FINANCE_CUBE_ID,CUBE_FORMULA.CUBE_FORMULA_ID,FORMULA_DEPLOYMENT_LINE.FORMULA_DEPLOYMENT_LINE_ID from FORMULA_DEPLOYMENT_ENTRY,MODEL,FINANCE_CUBE,CUBE_FORMULA,FORMULA_DEPLOYMENT_LINE where 1=1 and FORMULA_DEPLOYMENT_ENTRY.FORMULA_DEPLOYMENT_ENTRY_ID = ? and FORMULA_DEPLOYMENT_ENTRY.FORMULA_DEPLOYMENT_LINE_ID = FORMULA_DEPLOYMENT_LINE.FORMULA_DEPLOYMENT_LINE_ID and FORMULA_DEPLOYMENT_LINE.FORMULA_DEPLOYMENT_LINE_ID = CUBE_FORMULA.FORMULA_DEPLOYMENT_LINE_ID and CUBE_FORMULA.CUBE_FORMULA_ID = FINANCE_CUBE.CUBE_FORMULA_ID and FINANCE_CUBE.FINANCE_CUBE_ID = MODEL.FINANCE_CUBE_ID";
/*      */   public static final String SQL_GET_FORMULA_DEPLOYMENT_DT_REF = "select 0,MODEL.MODEL_ID,FINANCE_CUBE.FINANCE_CUBE_ID,CUBE_FORMULA.CUBE_FORMULA_ID,FORMULA_DEPLOYMENT_LINE.FORMULA_DEPLOYMENT_LINE_ID from FORMULA_DEPLOYMENT_DT,MODEL,FINANCE_CUBE,CUBE_FORMULA,FORMULA_DEPLOYMENT_LINE where 1=1 and FORMULA_DEPLOYMENT_DT.FORMULA_DEPLOYMENT_DT_ID = ? and FORMULA_DEPLOYMENT_DT.FORMULA_DEPLOYMENT_LINE_ID = FORMULA_DEPLOYMENT_LINE.FORMULA_DEPLOYMENT_LINE_ID and FORMULA_DEPLOYMENT_LINE.FORMULA_DEPLOYMENT_LINE_ID = CUBE_FORMULA.FORMULA_DEPLOYMENT_LINE_ID and CUBE_FORMULA.CUBE_FORMULA_ID = FINANCE_CUBE.CUBE_FORMULA_ID and FINANCE_CUBE.FINANCE_CUBE_ID = MODEL.FINANCE_CUBE_ID";
/*      */   public static final String SQL_GET_CUBE_FORMULA_PACKAGE_REF = "select 0,MODEL.MODEL_ID,FINANCE_CUBE.FINANCE_CUBE_ID from CUBE_FORMULA_PACKAGE,MODEL,FINANCE_CUBE where 1=1 and CUBE_FORMULA_PACKAGE.CUBE_FORMULA_PACKAGE_ID = ? and CUBE_FORMULA_PACKAGE.FINANCE_CUBE_ID = FINANCE_CUBE.FINANCE_CUBE_ID and FINANCE_CUBE.FINANCE_CUBE_ID = MODEL.FINANCE_CUBE_ID";
/*      */   public static final String SQL_GET_MODEL_DIMENSION_REL_REF = "select 0,MODEL.MODEL_ID from MODEL_DIMENSION_REL,MODEL where 1=1 and MODEL_DIMENSION_REL.MODEL_ID = ? and MODEL_DIMENSION_REL.DIMENSION_ID = ? and MODEL_DIMENSION_REL.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_MODEL_PROPERTY_REF = "select 0,MODEL.MODEL_ID from MODEL_PROPERTY,MODEL where 1=1 and MODEL_PROPERTY.MODEL_ID = ? and MODEL_PROPERTY.PROPERTY_NAME = ? and MODEL_PROPERTY.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_BUDGET_CYCLE_REF = "select 0,MODEL.MODEL_ID,BUDGET_CYCLE.VIS_ID from BUDGET_CYCLE,MODEL where 1=1 and BUDGET_CYCLE.BUDGET_CYCLE_ID = ? and BUDGET_CYCLE.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_BUDGET_STATE_REF = "select 0,MODEL.MODEL_ID,BUDGET_CYCLE.BUDGET_CYCLE_ID from BUDGET_STATE,MODEL,BUDGET_CYCLE where 1=1 and BUDGET_STATE.BUDGET_CYCLE_ID = ? and BUDGET_STATE.STRUCTURE_ELEMENT_ID = ? and BUDGET_STATE.BUDGET_CYCLE_ID = BUDGET_CYCLE.BUDGET_CYCLE_ID and BUDGET_CYCLE.BUDGET_CYCLE_ID = MODEL.BUDGET_CYCLE_ID";
/*      */   public static final String SQL_GET_BUDGET_STATE_HISTORY_REF = "select 0,MODEL.MODEL_ID,BUDGET_CYCLE.BUDGET_CYCLE_ID,BUDGET_STATE.BUDGET_CYCLE_ID,BUDGET_STATE.STRUCTURE_ELEMENT_ID from BUDGET_STATE_HISTORY,MODEL,BUDGET_CYCLE,BUDGET_STATE where 1=1 and BUDGET_STATE_HISTORY.BUDGET_STATE_HISTORY_ID = ? and BUDGET_STATE_HISTORY.BUDGET_CYCLE_ID = ? and BUDGET_STATE_HISTORY.STRUCTURE_ELEMENT_ID = ? and BUDGET_STATE_HISTORY.BUDGET_CYCLE_ID = BUDGET_STATE.BUDGET_CYCLE_ID and BUDGET_STATE_HISTORY.STRUCTURE_ELEMENT_ID = BUDGET_STATE.STRUCTURE_ELEMENT_ID and BUDGET_STATE.BUDGET_CYCLE_ID = BUDGET_CYCLE.BUDGET_CYCLE_ID and BUDGET_STATE.STRUCTURE_ELEMENT_ID = BUDGET_CYCLE.STRUCTURE_ELEMENT_ID and BUDGET_CYCLE.BUDGET_CYCLE_ID = MODEL.BUDGET_CYCLE_ID";
/*      */   public static final String SQL_GET_LEVEL_DATE_REF = "select 0,MODEL.MODEL_ID,BUDGET_CYCLE.BUDGET_CYCLE_ID from LEVEL_DATE,MODEL,BUDGET_CYCLE where 1=1 and LEVEL_DATE.BUDGET_CYCLE_ID = ? and LEVEL_DATE.DEPTH = ? and LEVEL_DATE.BUDGET_CYCLE_ID = BUDGET_CYCLE.BUDGET_CYCLE_ID and BUDGET_CYCLE.BUDGET_CYCLE_ID = MODEL.BUDGET_CYCLE_ID";
/*      */   public static final String SQL_GET_BUDGET_USER_REF = "select 0,MODEL.MODEL_ID from BUDGET_USER,MODEL where 1=1 and BUDGET_USER.MODEL_ID = ? and BUDGET_USER.STRUCTURE_ELEMENT_ID = ? and BUDGET_USER.USER_ID = ? and BUDGET_USER.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_SECURITY_GROUP_REF = "select 0,MODEL.MODEL_ID,SECURITY_GROUP.VIS_ID from SECURITY_GROUP,MODEL where 1=1 and SECURITY_GROUP.SECURITY_GROUP_ID = ? and SECURITY_GROUP.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_SECURITY_GROUP_USER_REL_REF = "select 0,MODEL.MODEL_ID,SECURITY_GROUP.SECURITY_GROUP_ID from SECURITY_GROUP_USER_REL,MODEL,SECURITY_GROUP where 1=1 and SECURITY_GROUP_USER_REL.SECURITY_GROUP_ID = ? and SECURITY_GROUP_USER_REL.USER_ID = ? and SECURITY_GROUP_USER_REL.SECURITY_GROUP_ID = SECURITY_GROUP.SECURITY_GROUP_ID and SECURITY_GROUP.SECURITY_GROUP_ID = MODEL.SECURITY_GROUP_ID";
/*      */   public static final String SQL_GET_SECURITY_ACCESS_DEF_REF = "select 0,MODEL.MODEL_ID,SECURITY_ACCESS_DEF.VIS_ID from SECURITY_ACCESS_DEF,MODEL where 1=1 and SECURITY_ACCESS_DEF.SECURITY_ACCESS_DEF_ID = ? and SECURITY_ACCESS_DEF.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_SECURITY_ACC_RNG_REL_REF = "select 0,MODEL.MODEL_ID,SECURITY_ACCESS_DEF.SECURITY_ACCESS_DEF_ID from SECURITY_ACC_RNG_REL,MODEL,SECURITY_ACCESS_DEF where 1=1 and SECURITY_ACC_RNG_REL.SECURITY_ACCESS_DEF_ID = ? and SECURITY_ACC_RNG_REL.SECURITY_RANGE_ID = ? and SECURITY_ACC_RNG_REL.SECURITY_ACCESS_DEF_ID = SECURITY_ACCESS_DEF.SECURITY_ACCESS_DEF_ID and SECURITY_ACCESS_DEF.SECURITY_ACCESS_DEF_ID = MODEL.SECURITY_ACCESS_DEF_ID";
/*      */   public static final String SQL_GET_CELL_CALC_REF = "select 0,MODEL.MODEL_ID,CELL_CALC.VIS_ID from CELL_CALC,MODEL where 1=1 and CELL_CALC.CELL_CALC_ID = ? and CELL_CALC.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_CELL_CALC_ASSOC_REF = "select 0,MODEL.MODEL_ID,CELL_CALC.CELL_CALC_ID from CELL_CALC_ASSOC,MODEL,CELL_CALC where 1=1 and CELL_CALC_ASSOC.CELL_CALC_ASSOC_ID = ? and CELL_CALC_ASSOC.CELL_CALC_ID = CELL_CALC.CELL_CALC_ID and CELL_CALC.CELL_CALC_ID = MODEL.CELL_CALC_ID";
/*      */   public static final String SQL_GET_VIREMENT_CATEGORY_REF = "select 0,MODEL.MODEL_ID,VIREMENT_CATEGORY.VIS_ID from VIREMENT_CATEGORY,MODEL where 1=1 and VIREMENT_CATEGORY.VIREMENT_CATEGORY_ID = ? and VIREMENT_CATEGORY.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_VIREMENT_LOCATION_REF = "select 0,MODEL.MODEL_ID,VIREMENT_CATEGORY.VIREMENT_CATEGORY_ID from VIREMENT_LOCATION,MODEL,VIREMENT_CATEGORY where 1=1 and VIREMENT_LOCATION.VIREMENT_CATEGORY_ID = ? and VIREMENT_LOCATION.STRUCTURE_ID = ? and VIREMENT_LOCATION.STRUCTURE_ELEMENT_ID = ? and VIREMENT_LOCATION.VIREMENT_CATEGORY_ID = VIREMENT_CATEGORY.VIREMENT_CATEGORY_ID and VIREMENT_CATEGORY.VIREMENT_CATEGORY_ID = MODEL.VIREMENT_CATEGORY_ID";
/*      */   public static final String SQL_GET_VIREMENT_ACCOUNT_REF = "select 0,MODEL.MODEL_ID,VIREMENT_CATEGORY.VIREMENT_CATEGORY_ID from VIREMENT_ACCOUNT,MODEL,VIREMENT_CATEGORY where 1=1 and VIREMENT_ACCOUNT.VIREMENT_CATEGORY_ID = ? and VIREMENT_ACCOUNT.STRUCTURE_ID = ? and VIREMENT_ACCOUNT.STRUCTURE_ELEMENT_ID = ? and VIREMENT_ACCOUNT.VIREMENT_CATEGORY_ID = VIREMENT_CATEGORY.VIREMENT_CATEGORY_ID and VIREMENT_CATEGORY.VIREMENT_CATEGORY_ID = MODEL.VIREMENT_CATEGORY_ID";
/*      */   public static final String SQL_GET_RECHARGE_REF = "select 0,MODEL.MODEL_ID,RECHARGE.VIS_ID from RECHARGE,MODEL where 1=1 and RECHARGE.RECHARGE_ID = ? and RECHARGE.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_RECHARGE_CELLS_REF = "select 0,MODEL.MODEL_ID,RECHARGE.RECHARGE_ID from RECHARGE_CELLS,MODEL,RECHARGE where 1=1 and RECHARGE_CELLS.RECHARGE_CELL_ID = ? and RECHARGE_CELLS.RECHARGE_ID = ? and RECHARGE_CELLS.RECHARGE_ID = RECHARGE.RECHARGE_ID and RECHARGE.RECHARGE_ID = MODEL.RECHARGE_ID";
/*      */   public static final String SQL_GET_BUDGET_ACTIVITY_REF = "select 0,MODEL.MODEL_ID from BUDGET_ACTIVITY,MODEL where 1=1 and BUDGET_ACTIVITY.BUDGET_ACTIVITY_ID = ? and BUDGET_ACTIVITY.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_BUDGET_ACTIVITY_LINK_REF = "select 0,MODEL.MODEL_ID,BUDGET_ACTIVITY.BUDGET_ACTIVITY_ID from BUDGET_ACTIVITY_LINK,MODEL,BUDGET_ACTIVITY where 1=1 and BUDGET_ACTIVITY_LINK.BUDGET_ACTIVITY_ID = ? and BUDGET_ACTIVITY_LINK.STRUCTURE_ELEMENT_ID = ? and BUDGET_ACTIVITY_LINK.BUDGET_ACTIVITY_ID = BUDGET_ACTIVITY.BUDGET_ACTIVITY_ID and BUDGET_ACTIVITY.BUDGET_ACTIVITY_ID = MODEL.BUDGET_ACTIVITY_ID";
/*      */   public static final String SQL_GET_VIREMENT_REQUEST_REF = "select 0,MODEL.MODEL_ID from VIREMENT_REQUEST,MODEL where 1=1 and VIREMENT_REQUEST.REQUEST_ID = ? and VIREMENT_REQUEST.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_VIREMENT_REQUEST_GROUP_REF = "select 0,MODEL.MODEL_ID,VIREMENT_REQUEST.REQUEST_ID from VIREMENT_REQUEST_GROUP,MODEL,VIREMENT_REQUEST where 1=1 and VIREMENT_REQUEST_GROUP.REQUEST_GROUP_ID = ? and VIREMENT_REQUEST_GROUP.REQUEST_ID = VIREMENT_REQUEST.REQUEST_ID and VIREMENT_REQUEST.REQUEST_ID = MODEL.REQUEST_ID";
/*      */   public static final String SQL_GET_VIREMENT_REQUEST_LINE_REF = "select 0,MODEL.MODEL_ID,VIREMENT_REQUEST.REQUEST_ID,VIREMENT_REQUEST_GROUP.REQUEST_GROUP_ID from VIREMENT_REQUEST_LINE,MODEL,VIREMENT_REQUEST,VIREMENT_REQUEST_GROUP where 1=1 and VIREMENT_REQUEST_LINE.REQUEST_LINE_ID = ? and VIREMENT_REQUEST_LINE.REQUEST_GROUP_ID = VIREMENT_REQUEST_GROUP.REQUEST_GROUP_ID and VIREMENT_REQUEST_GROUP.REQUEST_GROUP_ID = VIREMENT_REQUEST.REQUEST_GROUP_ID and VIREMENT_REQUEST.REQUEST_ID = MODEL.REQUEST_ID";
/*      */   public static final String SQL_GET_VIREMENT_LINE_SPREAD_REF = "select 0,MODEL.MODEL_ID,VIREMENT_REQUEST.REQUEST_ID,VIREMENT_REQUEST_GROUP.REQUEST_GROUP_ID,VIREMENT_REQUEST_LINE.REQUEST_LINE_ID from VIREMENT_LINE_SPREAD,MODEL,VIREMENT_REQUEST,VIREMENT_REQUEST_GROUP,VIREMENT_REQUEST_LINE where 1=1 and VIREMENT_LINE_SPREAD.LINE_SPREAD_ID = ? and VIREMENT_LINE_SPREAD.REQUEST_LINE_ID = VIREMENT_REQUEST_LINE.REQUEST_LINE_ID and VIREMENT_REQUEST_LINE.REQUEST_LINE_ID = VIREMENT_REQUEST_GROUP.REQUEST_LINE_ID and VIREMENT_REQUEST_GROUP.REQUEST_GROUP_ID = VIREMENT_REQUEST.REQUEST_GROUP_ID and VIREMENT_REQUEST.REQUEST_ID = MODEL.REQUEST_ID";
/*      */   public static final String SQL_GET_VIREMENT_AUTH_POINT_REF = "select 0,MODEL.MODEL_ID,VIREMENT_REQUEST.REQUEST_ID from VIREMENT_AUTH_POINT,MODEL,VIREMENT_REQUEST where 1=1 and VIREMENT_AUTH_POINT.AUTH_POINT_ID = ? and VIREMENT_AUTH_POINT.REQUEST_ID = VIREMENT_REQUEST.REQUEST_ID and VIREMENT_REQUEST.REQUEST_ID = MODEL.REQUEST_ID";
/*      */   public static final String SQL_GET_VIREMENT_AUTHORISERS_REF = "select 0,MODEL.MODEL_ID,VIREMENT_REQUEST.REQUEST_ID,VIREMENT_AUTH_POINT.AUTH_POINT_ID from VIREMENT_AUTHORISERS,MODEL,VIREMENT_REQUEST,VIREMENT_AUTH_POINT where 1=1 and VIREMENT_AUTHORISERS.AUTH_POINT_ID = ? and VIREMENT_AUTHORISERS.USER_ID = ? and VIREMENT_AUTHORISERS.AUTH_POINT_ID = VIREMENT_AUTH_POINT.AUTH_POINT_ID and VIREMENT_AUTH_POINT.AUTH_POINT_ID = VIREMENT_REQUEST.AUTH_POINT_ID and VIREMENT_REQUEST.REQUEST_ID = MODEL.REQUEST_ID";
/*      */   public static final String SQL_GET_VIREMENT_AUTH_POINT_LINK_REF = "select 0,MODEL.MODEL_ID,VIREMENT_REQUEST.REQUEST_ID,VIREMENT_AUTH_POINT.AUTH_POINT_ID from VIREMENT_AUTH_POINT_LINK,MODEL,VIREMENT_REQUEST,VIREMENT_AUTH_POINT where 1=1 and VIREMENT_AUTH_POINT_LINK.AUTH_POINT_ID = ? and VIREMENT_AUTH_POINT_LINK.VIREMENT_LINE_ID = ? and VIREMENT_AUTH_POINT_LINK.AUTH_POINT_ID = VIREMENT_AUTH_POINT.AUTH_POINT_ID and VIREMENT_AUTH_POINT.AUTH_POINT_ID = VIREMENT_REQUEST.AUTH_POINT_ID and VIREMENT_REQUEST.REQUEST_ID = MODEL.REQUEST_ID";
/*      */   public static final String SQL_GET_RESPONSIBILITY_AREA_REF = "select 0,MODEL.MODEL_ID from RESPONSIBILITY_AREA,MODEL where 1=1 and RESPONSIBILITY_AREA.RESPONSIBILITY_AREA_ID = ? and RESPONSIBILITY_AREA.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_WEIGHTING_PROFILE_REF = "select 0,MODEL.MODEL_ID,WEIGHTING_PROFILE.VIS_ID from WEIGHTING_PROFILE,MODEL where 1=1 and WEIGHTING_PROFILE.PROFILE_ID = ? and WEIGHTING_PROFILE.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_WEIGHTING_PROFILE_LINE_REF = "select 0,MODEL.MODEL_ID,WEIGHTING_PROFILE.PROFILE_ID from WEIGHTING_PROFILE_LINE,MODEL,WEIGHTING_PROFILE where 1=1 and WEIGHTING_PROFILE_LINE.PROFILE_ID = ? and WEIGHTING_PROFILE_LINE.LINE_IDX = ? and WEIGHTING_PROFILE_LINE.PROFILE_ID = WEIGHTING_PROFILE.PROFILE_ID and WEIGHTING_PROFILE.PROFILE_ID = MODEL.PROFILE_ID";
/*      */   public static final String SQL_GET_WEIGHTING_DEPLOYMENT_REF = "select 0,MODEL.MODEL_ID,WEIGHTING_PROFILE.PROFILE_ID from WEIGHTING_DEPLOYMENT,MODEL,WEIGHTING_PROFILE where 1=1 and WEIGHTING_DEPLOYMENT.DEPLOYMENT_ID = ? and WEIGHTING_DEPLOYMENT.PROFILE_ID = WEIGHTING_PROFILE.PROFILE_ID and WEIGHTING_PROFILE.PROFILE_ID = MODEL.PROFILE_ID";
/*      */   public static final String SQL_GET_WEIGHTING_DEPLOYMENT_LINE_REF = "select 0,MODEL.MODEL_ID,WEIGHTING_PROFILE.PROFILE_ID,WEIGHTING_DEPLOYMENT.DEPLOYMENT_ID from WEIGHTING_DEPLOYMENT_LINE,MODEL,WEIGHTING_PROFILE,WEIGHTING_DEPLOYMENT where 1=1 and WEIGHTING_DEPLOYMENT_LINE.DEPLOYMENT_ID = ? and WEIGHTING_DEPLOYMENT_LINE.LINE_IDX = ? and WEIGHTING_DEPLOYMENT_LINE.DEPLOYMENT_ID = WEIGHTING_DEPLOYMENT.DEPLOYMENT_ID and WEIGHTING_DEPLOYMENT.DEPLOYMENT_ID = WEIGHTING_PROFILE.DEPLOYMENT_ID and WEIGHTING_PROFILE.PROFILE_ID = MODEL.PROFILE_ID";
/*      */   public static final String SQL_GET_CC_DEPLOYMENT_REF = "select 0,MODEL.MODEL_ID,CC_DEPLOYMENT.VIS_ID from CC_DEPLOYMENT,MODEL where 1=1 and CC_DEPLOYMENT.CC_DEPLOYMENT_ID = ? and CC_DEPLOYMENT.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_CC_DEPLOYMENT_LINE_REF = "select 0,MODEL.MODEL_ID,CC_DEPLOYMENT.CC_DEPLOYMENT_ID from CC_DEPLOYMENT_LINE,MODEL,CC_DEPLOYMENT where 1=1 and CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID = ? and CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_ID = CC_DEPLOYMENT.CC_DEPLOYMENT_ID and CC_DEPLOYMENT.CC_DEPLOYMENT_ID = MODEL.CC_DEPLOYMENT_ID";
/*      */   public static final String SQL_GET_CC_DEPLOYMENT_ENTRY_REF = "select 0,MODEL.MODEL_ID,CC_DEPLOYMENT.CC_DEPLOYMENT_ID,CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID from CC_DEPLOYMENT_ENTRY,MODEL,CC_DEPLOYMENT,CC_DEPLOYMENT_LINE where 1=1 and CC_DEPLOYMENT_ENTRY.CC_DEPLOYMENT_ENTRY_ID = ? and CC_DEPLOYMENT_ENTRY.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID and CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT.CC_DEPLOYMENT_LINE_ID and CC_DEPLOYMENT.CC_DEPLOYMENT_ID = MODEL.CC_DEPLOYMENT_ID";
/*      */   public static final String SQL_GET_CC_DEPLOYMENT_DATA_TYPE_REF = "select 0,MODEL.MODEL_ID,CC_DEPLOYMENT.CC_DEPLOYMENT_ID,CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID from CC_DEPLOYMENT_DATA_TYPE,MODEL,CC_DEPLOYMENT,CC_DEPLOYMENT_LINE where 1=1 and CC_DEPLOYMENT_DATA_TYPE.CC_DEPLOYMENT_DATA_TYPE_ID = ? and CC_DEPLOYMENT_DATA_TYPE.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID and CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT.CC_DEPLOYMENT_LINE_ID and CC_DEPLOYMENT.CC_DEPLOYMENT_ID = MODEL.CC_DEPLOYMENT_ID";
/*      */   public static final String SQL_GET_CC_MAPPING_LINE_REF = "select 0,MODEL.MODEL_ID,CC_DEPLOYMENT.CC_DEPLOYMENT_ID,CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID from CC_MAPPING_LINE,MODEL,CC_DEPLOYMENT,CC_DEPLOYMENT_LINE where 1=1 and CC_MAPPING_LINE.CC_MAPPING_LINE_ID = ? and CC_MAPPING_LINE.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID and CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT.CC_DEPLOYMENT_LINE_ID and CC_DEPLOYMENT.CC_DEPLOYMENT_ID = MODEL.CC_DEPLOYMENT_ID";
/*      */   public static final String SQL_GET_CC_MAPPING_ENTRY_REF = "select 0,MODEL.MODEL_ID,CC_DEPLOYMENT.CC_DEPLOYMENT_ID,CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID,CC_MAPPING_LINE.CC_MAPPING_LINE_ID from CC_MAPPING_ENTRY,MODEL,CC_DEPLOYMENT,CC_DEPLOYMENT_LINE,CC_MAPPING_LINE where 1=1 and CC_MAPPING_ENTRY.CC_MAPPING_ENTRY_ID = ? and CC_MAPPING_ENTRY.CC_MAPPING_LINE_ID = CC_MAPPING_LINE.CC_MAPPING_LINE_ID and CC_MAPPING_LINE.CC_MAPPING_LINE_ID = CC_DEPLOYMENT_LINE.CC_MAPPING_LINE_ID and CC_DEPLOYMENT_LINE.CC_DEPLOYMENT_LINE_ID = CC_DEPLOYMENT.CC_DEPLOYMENT_LINE_ID and CC_DEPLOYMENT.CC_DEPLOYMENT_ID = MODEL.CC_DEPLOYMENT_ID";
/*      */   public static final String SQL_GET_FORM_REBUILD_REF = "select 0,MODEL.MODEL_ID,FORM_REBUILD.VIS_ID from FORM_REBUILD,MODEL where 1=1 and FORM_REBUILD.FORM_REBUILD_ID = ? and FORM_REBUILD.MODEL_ID = MODEL.MODEL_ID";
/*      */   public static final String SQL_GET_IMPORT_GRID_REF = "select 0,MODEL.MODEL_ID from IMPORT_GRID,MODEL where 1=1 and IMPORT_GRID.MODEL_ID = ? and IMPORT_GRID.GRID_ID = ? and IMPORT_GRID.MODEL_ID = MODEL.MODEL_ID";
/*      */   private static final String PICKER_SELECT_FOR_DIM_TYPE = " select   mdr.DIMENSION_SEQ_NUM seq,  d.DIMENSION_ID,  d.vis_id,  d.description,  d.type,  cursor  (  select  h.HIERARCHY_ID,   h.VIS_ID,   h.description,  cursor  (  select   s.structure_id, s.structure_element_id,  s.vis_id,  s.description,  s.leaf,  s.CAL_ELEM_TYPE, s.position  from   structure_element s  where   H.DIMENSION_ID = d.DIMENSION_ID  and H.HIERARCHY_ID = S.STRUCTURE_ID  and S.PARENT_ID = 0  )se  from   HIERARCHY h  where  H.DIMENSION_ID = d.DIMENSION_ID  ) hierarchy  from   dimension d,  model_dimension_rel mdr,  model m  where  m.model_id = ?   and mdr.model_id = m.model_id  and mdr.DIMENSION_ID = d.DIMENSION_ID  and mdr.DIMENSION_TYPE = ?";
/*      */   private static final String PICKER_DIMENSION_SELECT_IGNORE_RA = " select   mdr.DIMENSION_SEQ_NUM seq,  d.DIMENSION_ID,  d.vis_id,  d.description,  d.type,  cursor  (  select  h.HIERARCHY_ID,   h.VIS_ID,   h.description,  cursor  (  select   s.structure_id, s.structure_element_id,  s.vis_id,  s.description,  s.leaf,  s.CAL_ELEM_TYPE,  s.position  from   structure_element s  where   H.DIMENSION_ID = d.DIMENSION_ID  and H.HIERARCHY_ID = S.STRUCTURE_ID  and S.PARENT_ID = 0  )se  from   HIERARCHY h  where  H.DIMENSION_ID = d.DIMENSION_ID  ) hierarchy  from   dimension d,  model_dimension_rel mdr,  model m  where  m.model_id = ?   and mdr.model_id = m.model_id  and mdr.DIMENSION_ID = d.DIMENSION_ID ";
/*      */   private static final String PICKER_ORDER_BY = " order by mdr.DIMENSION_SEQ_NUM";
/*      */   private static final String PICKER_DIMENSION_SELECT_RA = " select   mdr.DIMENSION_SEQ_NUM seq,  d.DIMENSION_ID,  d.vis_id,  d.description,  d.type,  cursor  (  select  h.HIERARCHY_ID,   h.VIS_ID,   h.description,  cursor  (  select   s.structure_id, s.structure_element_id,  s.vis_id,  s.description,  s.leaf,  s.CAL_ELEM_TYPE,  s.position  from   structure_element s  where   H.DIMENSION_ID = d.DIMENSION_ID  and H.HIERARCHY_ID = S.STRUCTURE_ID  and S.PARENT_ID = 0  )se  from   HIERARCHY h  where  H.DIMENSION_ID = d.DIMENSION_ID  and h.HIERARCHY_ID = m.BUDGET_HIERARCHY_ID  ) hierarchy  from   dimension d,  model_dimension_rel mdr,  model m  where  m.model_id = ?   and mdr.model_id = m.model_id  and mdr.DIMENSION_ID = d.DIMENSION_ID  and mdr.DIMENSION_SEQ_NUM = 0";
/* 6306 */   private String sRAAccess = "select DEPTH,POSITION,END_POSITION ,decode(READ_ONLY,'Y',1,2) as RA_ACCESS_MODE  from BUDGET_USER bu\t\t,(\t\tselect  DEPTH, POSITION, END_POSITION ,STRUCTURE_ELEMENT_ID as DIM\t\tfrom    STRUCTURE_ELEMENT\t\twhere   STRUCTURE_ID = ?\t\t\tstart with PARENT_ID = 0\t\t\tconnect by  STRUCTURE_ID = prior STRUCTURE_ID and PARENT_ID = prior STRUCTURE_ELEMENT_ID\t\t) where   bu.MODEL_ID = ?  and     bu.STRUCTURE_ELEMENT_ID = DIM  and     bu.USER_ID = ?  order   by DEPTH,POSITION";
/*      */ 
/* 6385 */   JdbcUtils.ColType[] sQUERY_MODEL_DIMENSION_HIERARCHIES = { new JdbcUtils.ColType("dimension_id", 0), new JdbcUtils.ColType("dimension_seq_num", 0), new JdbcUtils.ColType("hierarchy_id", 0), new JdbcUtils.ColType("vis_id", 1) };
/*      */   protected FinanceCubeDAO mFinanceCubeDAO;
/*      */   protected ModelDimensionRelDAO mModelDimensionRelDAO;
/*      */   protected ModelPropertyDAO mModelPropertyDAO;
/*      */   protected BudgetCycleDAO mBudgetCycleDAO;
/*      */   protected BudgetUserDAO mBudgetUserDAO;
/*      */   protected SecurityGroupDAO mSecurityGroupDAO;
/*      */   protected SecurityAccessDefDAO mSecurityAccessDefDAO;
/*      */   protected CellCalcDAO mCellCalcDAO;
/*      */   protected VirementCategoryDAO mVirementCategoryDAO;
/*      */   protected RechargeDAO mRechargeDAO;
/*      */   protected BudgetActivityDAO mBudgetActivityDAO;
/*      */   protected VirementRequestDAO mVirementRequestDAO;
/*      */   protected ResponsibilityAreaDAO mResponsibilityAreaDAO;
/*      */   protected WeightingProfileDAO mWeightingProfileDAO;
/*      */   protected CcDeploymentDAO mCcDeploymentDAO;
/*      */   protected FormRebuildDAO mFormRebuildDAO;
/*      */   protected ImportGridDAO mImportGridDAO;
/*      */   protected ModelEVO mDetails;
/*      */ 
/*      */   public ModelDAO(Connection connection)
/*      */   {
/*  230 */     super(connection);
/*      */   }
/*      */ 
/*      */   public ModelDAO()
/*      */   {
/*      */   }
/*      */ 
/*      */   public ModelDAO(DataSource ds)
/*      */   {
/*  246 */     super(ds);
/*      */   }
/*      */ 
/*      */   protected ModelPK getPK()
/*      */   {
/*  254 */     return this.mDetails.getPK();
/*      */   }
/*      */ 
/*      */   public void setDetails(ModelEVO details)
/*      */   {
/*  263 */     this.mDetails = details.deepClone();
/*      */   }
/*      */ 
/*      */   public ModelEVO setAndGetDetails(ModelEVO details, String dependants)
/*      */   {
/*  274 */     setDetails(details);
/*  275 */     generateKeys();
/*  276 */     getDependants(this.mDetails, dependants);
/*  277 */     return this.mDetails.deepClone();
/*      */   }
/*      */ 
/*      */   public ModelPK create()
/*      */     throws DuplicateNameValidationException, ValidationException
/*      */   {
/*  286 */     doCreate();
/*      */ 
/*  288 */     return this.mDetails.getPK();
/*      */   }
/*      */ 
/*      */   public void load(ModelPK pk)
/*      */     throws ValidationException
/*      */   {
/*  298 */     doLoad(pk);
/*      */   }
/*      */ 
/*      */   public void store()
/*      */     throws DuplicateNameValidationException, VersionValidationException, ValidationException
/*      */   {
/*  307 */     doStore();
/*      */   }
/*      */ 
/*      */   public void remove()
/*      */   {
/*  316 */     doRemove();
/*      */   }
/*      */ 
/*      */   public ModelPK findByPrimaryKey(ModelPK pk_)
/*      */     throws ValidationException
/*      */   {
/*  325 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*  326 */     if (exists(pk_))
/*      */     {
/*  328 */       if (timer != null) {
/*  329 */         timer.logDebug("findByPrimaryKey", pk_);
/*      */       }
/*  331 */       return pk_;
/*      */     }
/*      */ 
/*  334 */     throw new ValidationException(pk_ + " not found");
/*      */   }
/*      */ 
/*      */   protected boolean exists(ModelPK pk)
/*      */   {
/*  352 */     PreparedStatement stmt = null;
/*  353 */     ResultSet resultSet = null;
/*  354 */     boolean returnValue = false;
/*      */     try
/*      */     {
/*  358 */       stmt = getConnection().prepareStatement("select MODEL_ID from MODEL where    MODEL_ID = ? ");
/*      */ 
/*  360 */       int col = 1;
/*  361 */       stmt.setInt(col++, pk.getModelId());
/*      */ 
/*  363 */       resultSet = stmt.executeQuery();
/*      */ 
/*  365 */       if (!resultSet.next())
/*  366 */         returnValue = false;
/*      */       else
/*  368 */         returnValue = true;
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/*  372 */       throw handleSQLException(pk, "select MODEL_ID from MODEL where    MODEL_ID = ? ", sqle);
/*      */     }
/*      */     finally
/*      */     {
/*  376 */       closeResultSet(resultSet);
/*  377 */       closeStatement(stmt);
/*  378 */       closeConnection();
/*      */     }
/*  380 */     return returnValue;
/*      */   }
/*      */ 
/*      */   private ModelEVO getEvoFromJdbc(ResultSet resultSet_)
/*      */     throws SQLException
/*      */   {
/*  405 */     int col = 1;
/*  406 */     ModelEVO evo = new ModelEVO(resultSet_.getInt(col++), resultSet_.getString(col++), resultSet_.getString(col++), resultSet_.getInt(col++), resultSet_.getInt(col++), resultSet_.getInt(col++), resultSet_.getString(col++).equals("Y"), resultSet_.getInt(col++), resultSet_.getString(col++).equals("Y"), resultSet_.getString(col++).equals("Y"), resultSet_.getInt(col++), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
/*      */ 
/*  437 */     evo.setUpdatedByUserId(resultSet_.getInt(col++));
/*  438 */     evo.setUpdatedTime(resultSet_.getTimestamp(col++));
/*  439 */     evo.setCreatedTime(resultSet_.getTimestamp(col++));
/*  440 */     return evo;
/*      */   }
/*      */ 
/*      */   private int putEvoKeysToJdbc(ModelEVO evo_, PreparedStatement stmt_, int startCol_) throws SQLException
/*      */   {
/*  445 */     int col = startCol_;
/*  446 */     stmt_.setInt(col++, evo_.getModelId());
/*  447 */     return col;
/*      */   }
/*      */ 
/*      */   private int putEvoDataToJdbc(ModelEVO evo_, PreparedStatement stmt_, int startCol_) throws SQLException
/*      */   {
/*  452 */     int col = startCol_;
/*  453 */     stmt_.setString(col++, evo_.getVisId());
/*  454 */     stmt_.setString(col++, evo_.getDescription());
/*  455 */     stmt_.setInt(col++, evo_.getAccountId());
/*  456 */     stmt_.setInt(col++, evo_.getCalendarId());
/*  457 */     stmt_.setInt(col++, evo_.getBudgetHierarchyId());
/*  458 */     if (evo_.getCurrencyInUse())
/*  459 */       stmt_.setString(col++, "Y");
/*      */     else
/*  461 */       stmt_.setString(col++, " ");
/*  462 */     stmt_.setInt(col++, evo_.getCurrencyId());
/*  463 */     if (evo_.getLocked())
/*  464 */       stmt_.setString(col++, "Y");
/*      */     else
/*  466 */       stmt_.setString(col++, " ");
/*  467 */     if (evo_.getVirementEntryEnabled())
/*  468 */       stmt_.setString(col++, "Y");
/*      */     else
/*  470 */       stmt_.setString(col++, " ");
/*  471 */     stmt_.setInt(col++, evo_.getVersionNum());
/*  472 */     stmt_.setInt(col++, evo_.getUpdatedByUserId());
/*  473 */     stmt_.setTimestamp(col++, evo_.getUpdatedTime());
/*  474 */     stmt_.setTimestamp(col++, evo_.getCreatedTime());
/*  475 */     return col;
/*      */   }
/*      */ 
/*      */   protected void doLoad(ModelPK pk)
/*      */     throws ValidationException
/*      */   {
/*  491 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*      */ 
/*  493 */     PreparedStatement stmt = null;
/*  494 */     ResultSet resultSet = null;
/*      */     try
/*      */     {
/*  498 */       stmt = getConnection().prepareStatement("select MODEL.MODEL_ID,MODEL.VIS_ID,MODEL.DESCRIPTION,MODEL.ACCOUNT_ID,MODEL.CALENDAR_ID,MODEL.BUDGET_HIERARCHY_ID,MODEL.CURRENCY_IN_USE,MODEL.CURRENCY_ID,MODEL.LOCKED,MODEL.VIREMENT_ENTRY_ENABLED,MODEL.VERSION_NUM,MODEL.UPDATED_BY_USER_ID,MODEL.UPDATED_TIME,MODEL.CREATED_TIME from MODEL where    MODEL_ID = ? ");
/*      */ 
/*  501 */       int col = 1;
/*  502 */       stmt.setInt(col++, pk.getModelId());
/*      */ 
/*  504 */       resultSet = stmt.executeQuery();
/*      */ 
/*  506 */       if (!resultSet.next()) {
/*  507 */         throw new ValidationException(getEntityName() + " select of " + pk + " not found");
/*      */       }
/*      */ 
/*  510 */       this.mDetails = getEvoFromJdbc(resultSet);
/*  511 */       if (this.mDetails.isModified())
/*  512 */         this._log.info("doLoad", this.mDetails);
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/*  516 */       throw handleSQLException(pk, "select MODEL.MODEL_ID,MODEL.VIS_ID,MODEL.DESCRIPTION,MODEL.ACCOUNT_ID,MODEL.CALENDAR_ID,MODEL.BUDGET_HIERARCHY_ID,MODEL.CURRENCY_IN_USE,MODEL.CURRENCY_ID,MODEL.LOCKED,MODEL.VIREMENT_ENTRY_ENABLED,MODEL.VERSION_NUM,MODEL.UPDATED_BY_USER_ID,MODEL.UPDATED_TIME,MODEL.CREATED_TIME from MODEL where    MODEL_ID = ? ", sqle);
/*      */     }
/*      */     finally
/*      */     {
/*  520 */       closeResultSet(resultSet);
/*  521 */       closeStatement(stmt);
/*  522 */       closeConnection();
/*      */ 
/*  524 */       if (timer != null)
/*  525 */         timer.logDebug("doLoad", pk);
/*      */     }
/*      */   }
/*      */ 
/*      */   protected void doCreate()
/*      */     throws DuplicateNameValidationException, ValidationException
/*      */   {
/*  570 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*  571 */     generateKeys();
/*      */ 
/*  573 */     this.mDetails.postCreateInit();
/*      */ 
/*  575 */     PreparedStatement stmt = null;
/*      */     try
/*      */     {
/*  580 */       duplicateValueCheckModelName();
/*      */ 
/*  582 */       this.mDetails.setCreatedTime(new Timestamp(new Date().getTime()));
/*  583 */       this.mDetails.setUpdatedTime(new Timestamp(new Date().getTime()));
/*  584 */       stmt = getConnection().prepareStatement("insert into MODEL ( MODEL_ID,VIS_ID,DESCRIPTION,ACCOUNT_ID,CALENDAR_ID,BUDGET_HIERARCHY_ID,CURRENCY_IN_USE,CURRENCY_ID,LOCKED,VIREMENT_ENTRY_ENABLED,VERSION_NUM,UPDATED_BY_USER_ID,UPDATED_TIME,CREATED_TIME) values ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
/*      */ 
/*  587 */       int col = 1;
/*  588 */       col = putEvoKeysToJdbc(this.mDetails, stmt, col);
/*  589 */       col = putEvoDataToJdbc(this.mDetails, stmt, col);
/*      */ 
/*  592 */       int resultCount = stmt.executeUpdate();
/*  593 */       if (resultCount != 1)
/*      */       {
/*  595 */         throw new RuntimeException(getEntityName() + " insert failed (" + this.mDetails.getPK() + "): resultCount=" + resultCount);
/*      */       }
/*      */ 
/*  598 */       this.mDetails.reset();
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/*  602 */       throw handleSQLException(this.mDetails.getPK(), "insert into MODEL ( MODEL_ID,VIS_ID,DESCRIPTION,ACCOUNT_ID,CALENDAR_ID,BUDGET_HIERARCHY_ID,CURRENCY_IN_USE,CURRENCY_ID,LOCKED,VIREMENT_ENTRY_ENABLED,VERSION_NUM,UPDATED_BY_USER_ID,UPDATED_TIME,CREATED_TIME) values ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?)", sqle);
/*      */     }
/*      */     finally
/*      */     {
/*  606 */       closeStatement(stmt);
/*  607 */       closeConnection();
/*      */ 
/*  609 */       if (timer != null) {
/*  610 */         timer.logDebug("doCreate", this.mDetails.toString());
/*      */       }
/*      */     }
/*      */ 
/*      */     try
/*      */     {
/*  616 */       getFinanceCubeDAO().update(this.mDetails.getFinanceCubesMap());
/*      */ 
/*  618 */       getModelDimensionRelDAO().update(this.mDetails.getModelDimensionRelsMap());
/*      */ 
/*  620 */       getModelPropertyDAO().update(this.mDetails.getModelPropertiesMap());
/*      */ 
/*  622 */       getBudgetCycleDAO().update(this.mDetails.getBudgetCyclesMap());
/*      */ 
/*  624 */       getBudgetUserDAO().update(this.mDetails.getBudgetUsersMap());
/*      */ 
/*  626 */       getSecurityGroupDAO().update(this.mDetails.getSecurityGroupsMap());
/*      */ 
/*  628 */       getSecurityAccessDefDAO().update(this.mDetails.getSecurityAccessDefsMap());
/*      */ 
/*  630 */       getCellCalcDAO().update(this.mDetails.getCellCalculationsMap());
/*      */ 
/*  632 */       getVirementCategoryDAO().update(this.mDetails.getVirementGroupsMap());
/*      */ 
/*  634 */       getRechargeDAO().update(this.mDetails.getRechargeMap());
/*      */ 
/*  636 */       getBudgetActivityDAO().update(this.mDetails.getBudgetActivitiesMap());
/*      */ 
/*  638 */       getVirementRequestDAO().update(this.mDetails.getVirementRequestsMap());
/*      */ 
/*  640 */       getResponsibilityAreaDAO().update(this.mDetails.getResponsibilityAreasMap());
/*      */ 
/*  642 */       getWeightingProfileDAO().update(this.mDetails.getUserDefinedWeightingProfilesMap());
/*      */ 
/*  644 */       getCcDeploymentDAO().update(this.mDetails.getCellCalcDeploymentsMap());
/*      */ 
/*  646 */       getFormRebuildDAO().update(this.mDetails.getFormRebuildsMap());
/*      */ 
/*  648 */       getImportGridDAO().update(this.mDetails.getAssocImportGridsMap());
/*      */     }
/*      */     catch (Exception e)
/*      */     {
/*  654 */       throw new RuntimeException("unexpected exception", e);
/*      */     }
/*      */   }
/*      */ 
/*      */   public int reserveIds(int insertCount)
/*      */   {
/*  674 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*      */ 
/*  676 */     PreparedStatement stmt = null;
/*  677 */     ResultSet resultSet = null;
/*  678 */     String sqlString = null;
/*      */     try
/*      */     {
/*  683 */       sqlString = "update MODEL_SEQ set SEQ_NUM = SEQ_NUM + ?";
/*  684 */       stmt = getConnection().prepareStatement("update MODEL_SEQ set SEQ_NUM = SEQ_NUM + ?");
/*  685 */       stmt.setInt(1, insertCount);
/*      */ 
/*  687 */       int resultCount = stmt.executeUpdate();
/*  688 */       if (resultCount != 1) {
/*  689 */         throw new RuntimeException(getEntityName() + " reserveIds: update failed: resultCount=" + resultCount);
/*      */       }
/*  691 */       closeStatement(stmt);
/*      */ 
/*  694 */       sqlString = "select SEQ_NUM from MODEL_SEQ";
/*  695 */       stmt = getConnection().prepareStatement("select SEQ_NUM from MODEL_SEQ");
/*  696 */       resultSet = stmt.executeQuery();
/*  697 */       if (!resultSet.next())
/*  698 */         throw new RuntimeException(getEntityName() + " reserveIds: select failed");
/*  699 */       int latestKey = resultSet.getInt(1);
/*      */ 
/*  701 */       int i = latestKey - insertCount;
/*      */       return i;
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/*  705 */       throw handleSQLException(sqlString, sqle);
/*      */     }
/*      */     finally
/*      */     {
/*  709 */       closeResultSet(resultSet);
/*  710 */       closeStatement(stmt);
/*  711 */       closeConnection();
/*      */ 
/*  713 */       if (timer != null)
/*  714 */         timer.logDebug("reserveIds", "keys=" + insertCount); 
/*  714 */     }
/*      */   }
/*      */ 
/*      */   public ModelPK generateKeys()
/*      */   {
/*  724 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*      */ 
/*  726 */     int insertCount = this.mDetails.getInsertCount(0);
/*      */ 
/*  729 */     if (insertCount == 0) {
/*  730 */       return this.mDetails.getPK();
/*      */     }
/*  732 */     this.mDetails.assignNextKey(reserveIds(insertCount));
/*      */ 
/*  734 */     return this.mDetails.getPK();
/*      */   }
/*      */ 
/*      */   protected void duplicateValueCheckModelName()
/*      */     throws DuplicateNameValidationException
/*      */   {
/*  747 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*  748 */     PreparedStatement stmt = null;
/*  749 */     ResultSet resultSet = null;
/*      */     try
/*      */     {
/*  753 */       stmt = getConnection().prepareStatement("select count(*) from MODEL where    VIS_ID = ? and not(    MODEL_ID = ? )");
/*      */ 
/*  756 */       int col = 1;
/*  757 */       stmt.setString(col++, this.mDetails.getVisId());
/*  758 */       col = putEvoKeysToJdbc(this.mDetails, stmt, col);
/*      */ 
/*  761 */       resultSet = stmt.executeQuery();
/*      */ 
/*  763 */       if (!resultSet.next()) {
/*  764 */         throw new RuntimeException(getEntityName() + " select of " + getPK() + " not found");
/*      */       }
/*      */ 
/*  768 */       col = 1;
/*  769 */       int count = resultSet.getInt(col++);
/*  770 */       if (count > 0) {
/*  771 */         throw new DuplicateNameValidationException(getEntityName() + " " + getPK() + " ModelName");
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/*  777 */       throw handleSQLException(getPK(), "select count(*) from MODEL where    VIS_ID = ? and not(    MODEL_ID = ? )", sqle);
/*      */     }
/*      */     finally
/*      */     {
/*  781 */       closeResultSet(resultSet);
/*  782 */       closeStatement(stmt);
/*  783 */       closeConnection();
/*      */ 
/*  785 */       if (timer != null)
/*  786 */         timer.logDebug("duplicateValueCheckModelName", "");
/*      */     }
/*      */   }
/*      */ 
/*      */   protected void doStore()
/*      */     throws DuplicateNameValidationException, VersionValidationException, ValidationException
/*      */   {
/*  818 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*      */ 
/*  820 */     generateKeys();
/*      */ 
/*  825 */     PreparedStatement stmt = null;
/*      */ 
/*  827 */     boolean mainChanged = this.mDetails.isModified();
/*  828 */     boolean dependantChanged = false;
/*      */     try
/*      */     {
/*  832 */       if (mainChanged) {
/*  833 */         duplicateValueCheckModelName();
/*      */       }
/*  835 */       if (getFinanceCubeDAO().update(this.mDetails.getFinanceCubesMap())) {
/*  836 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  839 */       if (getModelDimensionRelDAO().update(this.mDetails.getModelDimensionRelsMap())) {
/*  840 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  843 */       if (getModelPropertyDAO().update(this.mDetails.getModelPropertiesMap())) {
/*  844 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  847 */       if (getBudgetCycleDAO().update(this.mDetails.getBudgetCyclesMap())) {
/*  848 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  851 */       if (getBudgetUserDAO().update(this.mDetails.getBudgetUsersMap())) {
/*  852 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  855 */       if (getSecurityGroupDAO().update(this.mDetails.getSecurityGroupsMap())) {
/*  856 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  859 */       if (getSecurityAccessDefDAO().update(this.mDetails.getSecurityAccessDefsMap())) {
/*  860 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  863 */       if (getCellCalcDAO().update(this.mDetails.getCellCalculationsMap())) {
/*  864 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  867 */       if (getVirementCategoryDAO().update(this.mDetails.getVirementGroupsMap())) {
/*  868 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  871 */       if (getRechargeDAO().update(this.mDetails.getRechargeMap())) {
/*  872 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  875 */       if (getBudgetActivityDAO().update(this.mDetails.getBudgetActivitiesMap())) {
/*  876 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  879 */       if (getVirementRequestDAO().update(this.mDetails.getVirementRequestsMap())) {
/*  880 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  883 */       if (getResponsibilityAreaDAO().update(this.mDetails.getResponsibilityAreasMap())) {
/*  884 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  887 */       if (getWeightingProfileDAO().update(this.mDetails.getUserDefinedWeightingProfilesMap())) {
/*  888 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  891 */       if (getCcDeploymentDAO().update(this.mDetails.getCellCalcDeploymentsMap())) {
/*  892 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  895 */       if (getFormRebuildDAO().update(this.mDetails.getFormRebuildsMap())) {
/*  896 */         dependantChanged = true;
/*      */       }
/*      */ 
/*  899 */       if (getImportGridDAO().update(this.mDetails.getAssocImportGridsMap())) {
/*  900 */         dependantChanged = true;
/*      */       }
/*  902 */       if ((mainChanged) || (dependantChanged))
/*      */       {
/*  905 */         this.mDetails.setVersionNum(this.mDetails.getVersionNum() + 1);
/*      */ 
/*  908 */         this.mDetails.setUpdatedTime(new Timestamp(new Date().getTime()));
/*  909 */         stmt = getConnection().prepareStatement("update MODEL set VIS_ID = ?,DESCRIPTION = ?,ACCOUNT_ID = ?,CALENDAR_ID = ?,BUDGET_HIERARCHY_ID = ?,CURRENCY_IN_USE = ?,CURRENCY_ID = ?,LOCKED = ?,VIREMENT_ENTRY_ENABLED = ?,VERSION_NUM = ?,UPDATED_BY_USER_ID = ?,UPDATED_TIME = ?,CREATED_TIME = ? where    MODEL_ID = ? AND VERSION_NUM = ?");
/*      */ 
/*  912 */         int col = 1;
/*  913 */         col = putEvoDataToJdbc(this.mDetails, stmt, col);
/*  914 */         col = putEvoKeysToJdbc(this.mDetails, stmt, col);
/*      */ 
/*  916 */         stmt.setInt(col++, this.mDetails.getVersionNum() - 1);
/*      */ 
/*  919 */         int resultCount = stmt.executeUpdate();
/*      */ 
/*  921 */         if (resultCount == 0) {
/*  922 */           checkVersionNum();
/*      */         }
/*  924 */         if (resultCount != 1) {
/*  925 */           throw new RuntimeException(getEntityName() + " update failed (" + getPK() + "): resultCount=" + resultCount);
/*      */         }
/*      */ 
/*  928 */         this.mDetails.reset();
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/*  937 */       throw handleSQLException(getPK(), "update MODEL set VIS_ID = ?,DESCRIPTION = ?,ACCOUNT_ID = ?,CALENDAR_ID = ?,BUDGET_HIERARCHY_ID = ?,CURRENCY_IN_USE = ?,CURRENCY_ID = ?,LOCKED = ?,VIREMENT_ENTRY_ENABLED = ?,VERSION_NUM = ?,UPDATED_BY_USER_ID = ?,UPDATED_TIME = ?,CREATED_TIME = ? where    MODEL_ID = ? AND VERSION_NUM = ?", sqle);
/*      */     }
/*      */     finally
/*      */     {
/*  941 */       closeStatement(stmt);
/*  942 */       closeConnection();
/*      */ 
/*  944 */       if ((timer != null) && (
/*  945 */         (mainChanged) || (dependantChanged)))
/*  946 */         timer.logDebug("store", this.mDetails.getPK() + "(" + mainChanged + "," + dependantChanged + ")");
/*      */     }
/*      */   }
/*      */ 
/*      */   private void checkVersionNum()
/*      */     throws VersionValidationException
/*      */   {
/*  958 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*  959 */     PreparedStatement stmt = null;
/*  960 */     ResultSet resultSet = null;
/*      */     try
/*      */     {
/*  964 */       stmt = getConnection().prepareStatement("select VERSION_NUM from MODEL where MODEL_ID = ?");
/*      */ 
/*  967 */       int col = 1;
/*  968 */       stmt.setInt(col++, this.mDetails.getModelId());
/*      */ 
/*  971 */       resultSet = stmt.executeQuery();
/*      */ 
/*  973 */       if (!resultSet.next()) {
/*  974 */         throw new RuntimeException(getEntityName() + " checkVersionNum: select of " + getPK() + " not found");
/*      */       }
/*      */ 
/*  977 */       col = 1;
/*  978 */       int dbVersionNumber = resultSet.getInt(col++);
/*  979 */       if (this.mDetails.getVersionNum() - 1 != dbVersionNumber) {
/*  980 */         throw new VersionValidationException(getEntityName() + " " + getPK() + " expected:" + (this.mDetails.getVersionNum() - 1) + " found:" + dbVersionNumber);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/*  986 */       throw handleSQLException(getPK(), "select VERSION_NUM from MODEL where MODEL_ID = ?", sqle);
/*      */     }
/*      */     finally
/*      */     {
/*  990 */       closeStatement(stmt);
/*  991 */       closeResultSet(resultSet);
/*      */ 
/*  993 */       if (timer != null)
/*  994 */         timer.logDebug("checkVersionNum", this.mDetails.getPK());
/*      */     }
/*      */   }
/*      */ 
/*      */   protected void doRemove()
/*      */   {
/* 1011 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 1012 */     deleteDependants(this.mDetails.getPK());
/*      */ 
/* 1017 */     PreparedStatement stmt = null;
/*      */     try
/*      */     {
/* 1022 */       stmt = getConnection().prepareStatement("delete from MODEL where    MODEL_ID = ? ");
/*      */ 
/* 1025 */       int col = 1;
/* 1026 */       stmt.setInt(col++, this.mDetails.getModelId());
/*      */ 
/* 1028 */       int resultCount = stmt.executeUpdate();
/*      */ 
/* 1030 */       if (resultCount != 1) {
/* 1031 */         throw new RuntimeException(getEntityName() + " delete failed (" + getPK() + "): resultCount=" + resultCount);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 1037 */       throw handleSQLException(getPK(), "delete from MODEL where    MODEL_ID = ? ", sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 1041 */       closeStatement(stmt);
/* 1042 */       closeConnection();
/*      */ 
/* 1044 */       if (timer != null)
/* 1045 */         timer.logDebug("remove", this.mDetails.getPK());
/*      */     }
/*      */   }
/*      */ 
/*      */   public AllModelsELO getAllModels()
/*      */   {
/* 1078 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 1079 */     PreparedStatement stmt = null;
/* 1080 */     ResultSet resultSet = null;
/* 1081 */     AllModelsELO results = new AllModelsELO();
/*      */     try
/*      */     {
/* 1084 */       stmt = getConnection().prepareStatement(SQL_ALL_MODELS);
/* 1085 */       int col = 1;
/* 1086 */       resultSet = stmt.executeQuery();
/* 1087 */       while (resultSet.next())
/*      */       {
/* 1089 */         col = 2;
/*      */ 
/* 1092 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 1095 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 1099 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 1104 */         String description = resultSet.getString(col++);
/* 1105 */         int budgetHierarchyId = resultSet.getInt(col++);
                   Boolean global = getWrappedBooleanFromJdbc(resultSet, col++);

/* 1110 */         results.add(erModel, description, budgetHierarchyId, global);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 1121 */       throw handleSQLException(SQL_ALL_MODELS, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 1125 */       closeResultSet(resultSet);
/* 1126 */       closeStatement(stmt);
/* 1127 */       closeConnection();
/*      */     }
/*      */ 
/* 1130 */     if (timer != null) {
/* 1131 */       timer.logDebug("getAllModels", " items=" + results.size());
/*      */     }
/*      */ 
/* 1135 */     return results;
/*      */   }


public AllModelsELO getAllModelsForLoggedUser(int userId) {
    Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
    PreparedStatement stmt = null;
    ResultSet resultSet = null;
    AllModelsELO results = new AllModelsELO();
    try {
        stmt = getConnection().prepareStatement(SQL_ALL_MODELS_FOR_USER);
        int col = 1;
        stmt.setInt(col++, userId);
        resultSet = stmt.executeQuery();
        while (resultSet.next()) {
            col = 2;

            ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
            String textModel = resultSet.getString(col++);
            ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
            String description = resultSet.getString(col++);
            int budgetHierarchyId = resultSet.getInt(col++);
            Boolean global = getWrappedBooleanFromJdbc(resultSet, col++);

            results.add(erModel, description, budgetHierarchyId, global);
        }

    } catch (SQLException sqle) {
        throw handleSQLException(SQL_ALL_MODELS_FOR_USER, sqle);
    } finally {
        closeResultSet(resultSet);
        closeStatement(stmt);
        closeConnection();
    }

    if (timer != null) {
        timer.logDebug("getAllModelsForLoggedUser", " items=" + results.size());
    }

    return results;
}

//@formatter:off
private final static String SQL_GET_PROPERTIES_FOR_MODEL_VID_ID = ""
        + "SELECT 0 \"DIM_ID\", DIM.VIS_ID \"DIM_VIS_ID\", HIER.VIS_ID \"HIER_VIS_ID\", FC.FINANCE_CUBE_ID, FC.VIS_ID \"FC_VIS_ID\", MO.MODEL_ID "
        + "FROM DIMENSION DIM "
        + "JOIN HIERARCHY HIER ON (HIER.DIMENSION_ID = DIM.DIMENSION_ID) "
        + "JOIN MODEL MO ON (MO.BUDGET_HIERARCHY_ID = HIER.HIERARCHY_ID) "
        + "JOIN FINANCE_CUBE FC ON (FC.MODEL_ID = MO.MODEL_ID) "
        + "WHERE MO.VIS_ID = ? "
        + "UNION ALL "
        + "SELECT 1 \"DIM_ID\", DIM.VIS_ID \"DIM_VIS_ID\", HIER.VIS_ID \"HIER_VIS_ID\", FC.FINANCE_CUBE_ID, FC.VIS_ID \"FC_VIS_ID\", MO.MODEL_ID "
        + "FROM DIMENSION DIM "
        + "JOIN HIERARCHY HIER ON (HIER.DIMENSION_ID = DIM.DIMENSION_ID) "
        + "JOIN MODEL MO ON (MO.ACCOUNT_ID = DIM.DIMENSION_ID) "
        + "JOIN FINANCE_CUBE FC ON (FC.MODEL_ID = MO.MODEL_ID) "
        + "WHERE MO.VIS_ID = ? "
        + "UNION ALL "
        + "SELECT 2 \"DIM_ID\",  DIM.VIS_ID \"DIM_VIS_ID\", HIER.VIS_ID \"HIER_VIS_ID\", FC.FINANCE_CUBE_ID, FC.VIS_ID \"FC_VIS_ID\", MO.MODEL_ID "
        + "FROM DIMENSION DIM "
        + "JOIN HIERARCHY HIER ON (HIER.DIMENSION_ID = DIM.DIMENSION_ID) "
        + "JOIN MODEL MO ON (MO.CALENDAR_ID = DIM.DIMENSION_ID) "
        + "JOIN FINANCE_CUBE FC ON (FC.MODEL_ID = MO.MODEL_ID) "
        + "WHERE MO.VIS_ID = ?";
//@formatter:on
public Map<String, String> getPropertiesForModelVisId(String modelVisId) {
    Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
    PreparedStatement stmt = null;
    ResultSet resultSet = null;
    Map<String, String> results = new HashMap<String, String>();
    try {
        stmt = getConnection().prepareStatement(SQL_GET_PROPERTIES_FOR_MODEL_VID_ID);
        int col = 1;
        stmt.setString(col++, modelVisId);
        stmt.setString(col++, modelVisId);
        stmt.setString(col++, modelVisId);
        resultSet = stmt.executeQuery();
        while (resultSet.next()) {
            col = 1;

            String DIM_ID = String.valueOf(resultSet.getInt(col++));

            String DIM_VIS_ID = resultSet.getString(col++);
            results.put(WorkbookProperties.DIMENSION_$_VISID.toString().replace("$", DIM_ID), DIM_VIS_ID);

            String HIER_VIS_ID = resultSet.getString(col++);
            results.put(WorkbookProperties.DIMENSION_$_HIERARCHY_VISID.toString().replace("$", DIM_ID), HIER_VIS_ID);

            String FINANCE_CUBE_ID = String.valueOf(resultSet.getInt(col++));
            results.put(WorkbookProperties.FINANCE_CUBE_ID.toString(), FINANCE_CUBE_ID);

            String FC_VIS_ID = resultSet.getString(col++);
            results.put(WorkbookProperties.FINANCE_CUBE_VISID.toString(), FC_VIS_ID);

            String MODEL_ID = String.valueOf(resultSet.getInt(col++));
            results.put(WorkbookProperties.MODEL_ID.toString(), MODEL_ID);

            results.put(WorkbookProperties.MODEL_VISID.toString(), modelVisId);
        }
    } catch (SQLException sqle) {
        throw handleSQLException(SQL_GET_PROPERTIES_FOR_MODEL_VID_ID, sqle);
    } finally {
        closeResultSet(resultSet);
        closeStatement(stmt);
        closeConnection();
    }

    if (timer != null) {
        timer.logDebug("getPropertiesForModelVisId", " items=" + results.size());
    }

    return results;
}
//@formatter:off
private final static String SQL_GET_PROPERTIES_FOR_MODEL_ID = ""
        + "SELECT 0 \"DIM_ID\", DIM.VIS_ID \"DIM_VIS_ID\", HIER.VIS_ID \"HIER_VIS_ID\", FC.FINANCE_CUBE_ID, FC.VIS_ID \"FC_VIS_ID\", MO.VIS_ID \"MODEL_VIS_ID\" "
        + "FROM DIMENSION DIM "
        + "JOIN HIERARCHY HIER ON (HIER.DIMENSION_ID = DIM.DIMENSION_ID) "
        + "JOIN MODEL MO ON (MO.BUDGET_HIERARCHY_ID = HIER.HIERARCHY_ID) "
        + "JOIN FINANCE_CUBE FC ON (FC.MODEL_ID = MO.MODEL_ID) "
        + "WHERE MO.MODEL_ID = ? "
        + "UNION ALL "
        + "SELECT 1 \"DIM_ID\", DIM.VIS_ID \"DIM_VIS_ID\", HIER.VIS_ID \"HIER_VIS_ID\", FC.FINANCE_CUBE_ID, FC.VIS_ID \"FC_VIS_ID\", MO.VIS_ID \"MODEL_VIS_ID\" "
        + "FROM DIMENSION DIM "
        + "JOIN HIERARCHY HIER ON (HIER.DIMENSION_ID = DIM.DIMENSION_ID) "
        + "JOIN MODEL MO ON (MO.ACCOUNT_ID = DIM.DIMENSION_ID) "
        + "JOIN FINANCE_CUBE FC ON (FC.MODEL_ID = MO.MODEL_ID) "
        + "WHERE MO.MODEL_ID = ? "
        + "UNION ALL "
        + "SELECT 2 \"DIM_ID\",  DIM.VIS_ID \"DIM_VIS_ID\", HIER.VIS_ID \"HIER_VIS_ID\", FC.FINANCE_CUBE_ID, FC.VIS_ID \"FC_VIS_ID\", MO.VIS_ID \"MODEL_VIS_ID\" "
        + "FROM DIMENSION DIM "
        + "JOIN HIERARCHY HIER ON (HIER.DIMENSION_ID = DIM.DIMENSION_ID) "
        + "JOIN MODEL MO ON (MO.CALENDAR_ID = DIM.DIMENSION_ID) "
        + "JOIN FINANCE_CUBE FC ON (FC.MODEL_ID = MO.MODEL_ID) "
        + "WHERE MO.MODEL_ID = ?";
//@formatter:on
public Map<String, String> getPropertiesForModelId(int modelId) {
    Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
    PreparedStatement stmt = null;
    ResultSet resultSet = null;
    Map<String, String> results = new HashMap<String, String>();
    try {
        stmt = getConnection().prepareStatement(SQL_GET_PROPERTIES_FOR_MODEL_ID);
        int col = 1;
        stmt.setInt(col++, modelId);
        stmt.setInt(col++, modelId);
        stmt.setInt(col++, modelId);
        resultSet = stmt.executeQuery();
        while (resultSet.next()) {
            col = 1;

            String DIM_ID = String.valueOf(resultSet.getInt(col++));

            String DIM_VIS_ID = resultSet.getString(col++);
            results.put(WorkbookProperties.DIMENSION_$_VISID.toString().replace("$", DIM_ID), DIM_VIS_ID);

            String HIER_VIS_ID = resultSet.getString(col++);
            results.put(WorkbookProperties.DIMENSION_$_HIERARCHY_VISID.toString().replace("$", DIM_ID), HIER_VIS_ID);

            String FINANCE_CUBE_ID = String.valueOf(resultSet.getInt(col++));
            results.put(WorkbookProperties.FINANCE_CUBE_ID.toString(), FINANCE_CUBE_ID);

            String FC_VIS_ID = resultSet.getString(col++);
            results.put(WorkbookProperties.FINANCE_CUBE_VISID.toString(), FC_VIS_ID);

            String MODEL_VIS_ID = resultSet.getString(col++);
            results.put(WorkbookProperties.MODEL_VISID.toString(), MODEL_VIS_ID);

            results.put(WorkbookProperties.MODEL_ID.toString(), String.valueOf(modelId));
        }
    } catch (SQLException sqle) {
        throw handleSQLException(SQL_GET_PROPERTIES_FOR_MODEL_ID, sqle);
    } finally {
        closeResultSet(resultSet);
        closeStatement(stmt);
        closeConnection();
    }

    if (timer != null) {
        timer.logDebug("getPropertiesForModelId", " items=" + results.size());
    }

    return results;
}

public ExcelFormDTO getXCellFormDTO(int dataEntryProfileId) throws Exception{
    String sql = "select x.JSON_FORM, x.DEFINITION, x.EXCEL_FILE, bc.XML_FORM_DATA_TYPE, bc.PERIOD_ID_TO "
            + "from XML_FORM x "
            + "join DATA_ENTRY_PROFILE dep on (x.XML_FORM_ID = dep.XMLFORM_ID) "
            + "join BUDGET_CYCLE bc on (dep.BUDGET_CYCLE_ID = bc.BUDGET_CYCLE_ID)"
            + " where dep.DATA_ENTRY_PROFILE_ID = ?";

    Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
    PreparedStatement stmt = null;
    ResultSet resultSet = null;
    ExcelFormDTO ExcelFormDTO = new ExcelFormDTO();
    try {
        stmt = getConnection().prepareStatement(sql);
        int col = 1;
        stmt.setInt(col++, dataEntryProfileId);
        resultSet = stmt.executeQuery();
        
        while (resultSet.next()) {
            Blob excelFile = resultSet.getBlob("EXCEL_FILE");
            int blobLength = (int) excelFile.length();  
            byte[] blobAsBytes = excelFile.getBytes(1, blobLength);
            Clob xmlForm = resultSet.getClob("DEFINITION");
            String stringXmlForm = clobToString(xmlForm);
            Clob jsonForm = resultSet.getClob("JSON_FORM");
            String stringJsonForm = clobToString(jsonForm);
            String dataType = resultSet.getString("XML_FORM_DATA_TYPE");
            int dim2Id = resultSet.getInt("PERIOD_ID_TO");
            
            ExcelFormDTO.setDataType(dataType);
            ExcelFormDTO.setExcelFile(blobAsBytes);
            
            ExcelFormDTO.setJsonForm(stringJsonForm);
            
            Map<String, String> contextVariables = new HashMap<String, String>();
            contextVariables.put("2", String.valueOf(dim2Id));
            ExcelFormDTO.setContextVariables(contextVariables);
            
            WorkbookDTO workbook = WorkbookMapper.mapDefinitionXML(stringXmlForm, CellType.EXTENDED);
            ExcelFormDTO.setWorkbook(workbook);
            break;
        }
      } catch (SQLException sqle) {
          throw handleSQLException(sql, sqle);
      } finally {
          closeResultSet(resultSet);
          closeStatement(stmt);
          closeConnection();
      }

      if (timer != null) {
          timer.logDebug("getPropertiesForModelId", " items=" + 1);
      }
      if (timer != null) {
          timer.logDebug("getPropertiesForModelId", " items=" + 1);
      }
      return ExcelFormDTO;
}

private String clobToString(Clob data) {
    StringBuilder sb = new StringBuilder();
    try {
        Reader reader = data.getCharacterStream();
        BufferedReader br = new BufferedReader(reader);

        String line;
        while(null != (line = br.readLine())) {
            sb.append(line);
        }
        br.close();
    } catch (SQLException e) {
        // handle this exception
    } catch (IOException e) {
        // handle this exception
    }
    return sb.toString();
}



public List<ElementDTO> getSelectedDimensions(Map<Integer, Integer> selectionsMap, int modelId){
    if(selectionsMap == null){
        return null;
    }
    String getDim0 = ""
            + "dim0 AS (SELECT 0 DIM_TYPE, se.STRUCTURE_ID, se.STRUCTURE_ELEMENT_ID, se.VIS_ID, se.DESCRIPTION, se.LEAF "
            + "  FROM STRUCTURE_ELEMENT se ";
    String getDim1 = ""
            + "dim1 AS (SELECT 1 DIM_TYPE, se.STRUCTURE_ID, se.STRUCTURE_ELEMENT_ID, se.VIS_ID, se.DESCRIPTION, se.LEAF "
            + "  FROM STRUCTURE_ELEMENT se ";
            
    String getDim = "  WHERE se.STRUCTURE_ELEMENT_ID = ? ), ";
            
    String getDim0FromModelId = ""
            + "JOIN MODEL mo on (se.STRUCTURE_ID = mo.BUDGET_HIERARCHY_ID) "
            + "WHERE mo.MODEL_ID = ? AND se.PARENT_ID = 0), ";
    String getDim1FromModelId = ""
            + "JOIN HIERARCHY hier on (se.STRUCTURE_ID = hier.HIERARCHY_ID) "
            + "JOIN MODEL mo on (hier.DIMENSION_ID = mo.ACCOUNT_ID) "
            + "WHERE mo.MODEL_ID = ? AND se.PARENT_ID = 0),";
    String varname1 = ""
            + "dim2 AS   (SELECT 2 DIM_TYPE, STRUCTURE_ID, STRUCTURE_ELEMENT_ID, VIS_ID, DESCRIPTION, LEAF, CAL_VIS_ID_PREFIX "
            + "FROM STRUCTURE_ELEMENT "
            + "WHERE STRUCTURE_ELEMENT_ID = ?) "
            + "SELECT  * FROM dim0 "
            + "UNION ALL "
            + "SELECT  * FROM dim1 "
            + "UNION ALL "
            + "SELECT  DIM_TYPE, STRUCTURE_ID, STRUCTURE_ELEMENT_ID, CAL_VIS_ID_PREFIX||VIS_ID \"VIS_ID\", DESCRIPTION, LEAF FROM dim2";
    
    Integer[] params = new Integer[3];
    //    for(int i = 0; i < 3; i++){
    //        params[i] = selectionsMap.get(i);
    //    }

    StringBuilder sb = new StringBuilder();
    sb.append("WITH ");
    sb.append(getDim0);
    if(selectionsMap.containsKey(0)){
        sb.append(getDim);
        params[0] = selectionsMap.get(0);
    }
    else{
        sb.append(getDim0FromModelId);
        params[0] = modelId;
    }
    sb.append(getDim1);
    if(selectionsMap.containsKey(1)){
        sb.append(getDim);
        params[1] = selectionsMap.get(1);
    }
    else{
        sb.append(getDim1FromModelId);
        params[1] = modelId;
    }
    sb.append(varname1);
    params[2] = selectionsMap.get(2);

    Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
    PreparedStatement stmt = null;
    ResultSet resultSet = null;
    try {
        stmt = getConnection().prepareStatement(sb.toString());
        int col = 1;
        stmt.setInt(col++, params[0]);
        stmt.setInt(col++, params[1]);
        stmt.setInt(col++, params[2]);
        resultSet = stmt.executeQuery();
        ElementDTO[] result = new ElementDTO[3];
        while (resultSet.next()) {

            String VIS_ID = resultSet.getString("VIS_ID");
            String DESCRIPTION = resultSet.getString("DESCRIPTION");
            String LEAF = resultSet.getString("LEAF");
            Integer STRUCTURE_ELEMENT_ID = resultSet.getInt("STRUCTURE_ELEMENT_ID");
            Integer STRUCTURE_ID = resultSet.getInt("STRUCTURE_ID");
            Integer DIM_TYPE = resultSet.getInt("DIM_TYPE");

            ElementDTO selectedDimension = new ElementDTO();
            selectedDimension.setId(STRUCTURE_ELEMENT_ID);
            selectedDimension.setStructureId(STRUCTURE_ID);

            selectedDimension.setName(VIS_ID);
            selectedDimension.setDescription(DESCRIPTION);

            Boolean l = "Y".equalsIgnoreCase(LEAF) ? new Boolean(true) : new Boolean(false);
            selectedDimension.setLeaf(Boolean.valueOf(l));

            result[DIM_TYPE] = selectedDimension;

        }
        for (int i = 0; i < result.length; ++i) {
            if (result[i] == null) {
                ElementDTO selectedDimension = new ElementDTO();
                selectedDimension.setName("?");
                selectedDimension.setDescription("");
                selectedDimension.setLeaf(false);
                result[i] = selectedDimension;
            }
        }

        if (timer != null) {
            timer.logDebug("getSelectedDimensions", " items=" + result.length);
        }

        return Arrays.asList(result);
    } catch (SQLException sqle) {
        throw handleSQLException(sb.toString(), sqle);
    } finally {
        closeResultSet(resultSet);
        closeStatement(stmt);
        closeConnection();
    }      
}


public AllModelsELO getAllModelsForGlobalMappedModel(int modelId) {
    Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
    PreparedStatement stmt = null;
    ResultSet resultSet = null;
    AllModelsELO results = new AllModelsELO();
    try {
        stmt = getConnection().prepareStatement(SQL_ALL_MODELS_FOR_GLOBAL_MAPPED_MODEL);
        int col = 1;
        stmt.setInt(col++, modelId);
        stmt.setInt(col++, modelId);
        resultSet = stmt.executeQuery();
        while (resultSet.next()) {
            col = 2;

            ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
            String textModel = resultSet.getString(col++);
            ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
            String description = resultSet.getString(col++);
            int budgetHierarchyId = resultSet.getInt(col++);
            Boolean global = getWrappedBooleanFromJdbc(resultSet, col++);

            results.add(erModel, description, budgetHierarchyId, global);
        }

    } catch (SQLException sqle) {
        throw handleSQLException(SQL_ALL_MODELS_FOR_GLOBAL_MAPPED_MODEL, sqle);
    } finally {
        closeResultSet(resultSet);
        closeStatement(stmt);
        closeConnection();
    }

    if (timer != null) {
        timer.logDebug("getAllModelsForGlobalMappedModel", " items=" + results.size());
    }

    return results;
}

/*      */   public AllModelsWebELO getAllModelsWeb()
/*      */   {
/* 1167 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 1168 */     PreparedStatement stmt = null;
/* 1169 */     ResultSet resultSet = null;
/* 1170 */     AllModelsWebELO results = new AllModelsWebELO();
/*      */     try
/*      */     {
/* 1173 */       stmt = getConnection().prepareStatement(SQL_ALL_MODELS_WEB);
/* 1174 */       int col = 1;
/* 1175 */       resultSet = stmt.executeQuery();
/* 1176 */       while (resultSet.next())
/*      */       {
/* 1178 */         col = 2;
/*      */ 
/* 1181 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 1184 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 1188 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 1193 */         int col1 = resultSet.getInt(col++);
/* 1194 */         String col2 = resultSet.getString(col++);
/* 1195 */         String col3 = resultSet.getString(col++);
/* 1196 */         int col4 = resultSet.getInt(col++);
/*      */ 
/* 1199 */         results.add(erModel, col1, col2, col3, col4);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 1210 */       throw handleSQLException(SQL_ALL_MODELS_WEB, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 1214 */       closeResultSet(resultSet);
/* 1215 */       closeStatement(stmt);
/* 1216 */       closeConnection();
/*      */     }
/*      */ 
/* 1219 */     if (timer != null) {
/* 1220 */       timer.logDebug("getAllModelsWeb", " items=" + results.size());
/*      */     }
/*      */ 
/* 1224 */     return results;
/*      */   }
/*      */ 
/*      */   public AllModelsWebForUserELO getAllModelsWebForUser(int param1)
/*      */   {
/* 1257 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 1258 */     PreparedStatement stmt = null;
/* 1259 */     ResultSet resultSet = null;
/* 1260 */     AllModelsWebForUserELO results = new AllModelsWebForUserELO();
/*      */     try
/*      */     {
/* 1263 */       stmt = getConnection().prepareStatement(SQL_ALL_MODELS_WEB_FOR_USER);
/* 1264 */       int col = 1;
/* 1265 */       stmt.setInt(col++, param1);
/* 1266 */       resultSet = stmt.executeQuery();
/* 1267 */       while (resultSet.next())
/*      */       {
/* 1269 */         col = 2;
/*      */ 
/* 1272 */         results.add(resultSet.getInt(col++), resultSet.getString(col++), resultSet.getString(col++), resultSet.getInt(col++));
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 1282 */       throw handleSQLException(SQL_ALL_MODELS_WEB_FOR_USER, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 1286 */       closeResultSet(resultSet);
/* 1287 */       closeStatement(stmt);
/* 1288 */       closeConnection();
/*      */     }
/*      */ 
/* 1291 */     if (timer != null) {
/* 1292 */       timer.logDebug("getAllModelsWebForUser", " UserId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 1297 */     return results;
/*      */   }
/*      */ 
/*      */   public AllModelsWithActiveCycleForUserELO getAllModelsWithActiveCycleForUser(int param1)
/*      */   {
/* 1331 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 1332 */     PreparedStatement stmt = null;
/* 1333 */     ResultSet resultSet = null;
/* 1334 */     AllModelsWithActiveCycleForUserELO results = new AllModelsWithActiveCycleForUserELO();
/*      */     try
/*      */     {
/* 1337 */       stmt = getConnection().prepareStatement(SQL_ALL_MODELS_WITH_ACTIVE_CYCLE_FOR_USER);
/* 1338 */       int col = 1;
/* 1339 */       stmt.setInt(col++, param1);
/* 1340 */       resultSet = stmt.executeQuery();
/* 1341 */       while (resultSet.next())
/*      */       {
/* 1343 */         col = 2;
/*      */ 
/* 1346 */         results.add(resultSet.getInt(col++), resultSet.getString(col++), resultSet.getString(col++), resultSet.getInt(col++));
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 1356 */       throw handleSQLException(SQL_ALL_MODELS_WITH_ACTIVE_CYCLE_FOR_USER, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 1360 */       closeResultSet(resultSet);
/* 1361 */       closeStatement(stmt);
/* 1362 */       closeConnection();
/*      */     }
/*      */ 
/* 1365 */     if (timer != null) {
/* 1366 */       timer.logDebug("getAllModelsWithActiveCycleForUser", " UserId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 1371 */     return results;
/*      */   }
/*      */ 
/*      */   public AllBudgetHierarchiesELO getAllBudgetHierarchies()
/*      */   {
/* 1413 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 1414 */     PreparedStatement stmt = null;
/* 1415 */     ResultSet resultSet = null;
/* 1416 */     AllBudgetHierarchiesELO results = new AllBudgetHierarchiesELO();
/*      */     try
/*      */     {
/* 1419 */       stmt = getConnection().prepareStatement(SQL_ALL_BUDGET_HIERARCHIES);
/* 1420 */       int col = 1;
/* 1421 */       resultSet = stmt.executeQuery();
/* 1422 */       while (resultSet.next())
/*      */       {
/* 1424 */         col = 2;
/*      */ 
/* 1427 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 1430 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 1433 */         HierarchyPK pkHierarchy = new HierarchyPK(resultSet.getInt(col++));
/*      */ 
/* 1436 */         String textHierarchy = resultSet.getString(col++);
/*      */ 
/* 1438 */         HierarchyElementPK pkHierarchyElement = new HierarchyElementPK(resultSet.getInt(col++));
/*      */ 
/* 1441 */         String textHierarchyElement = resultSet.getString(col++);
/*      */ 
/* 1443 */         StructureElementPK pkStructureElement = new StructureElementPK(resultSet.getInt(col++), resultSet.getInt(col++));
/*      */ 
/* 1447 */         String textStructureElement = resultSet.getString(col++);
/*      */ 
/* 1450 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 1456 */         HierarchyRefImpl erHierarchy = new HierarchyRefImpl(pkHierarchy, textHierarchy);
/*      */ 
/* 1462 */         HierarchyElementRefImpl erHierarchyElement = new HierarchyElementRefImpl(pkHierarchyElement, textHierarchyElement);
/*      */ 
/* 1468 */         StructureElementRefImpl erStructureElement = new StructureElementRefImpl(pkStructureElement, textStructureElement);
/*      */ 
/* 1473 */         String col1 = resultSet.getString(col++);
/*      */ 
/* 1476 */         results.add(erModel, erHierarchy, erHierarchyElement, erStructureElement, col1);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 1487 */       throw handleSQLException(SQL_ALL_BUDGET_HIERARCHIES, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 1491 */       closeResultSet(resultSet);
/* 1492 */       closeStatement(stmt);
/* 1493 */       closeConnection();
/*      */     }
/*      */ 
/* 1496 */     if (timer != null) {
/* 1497 */       timer.logDebug("getAllBudgetHierarchies", " items=" + results.size());
/*      */     }
/*      */ 
/* 1501 */     return results;
/*      */   }
/*      */ 
/*      */   public ModelForDimensionELO getModelForDimension(int param1)
/*      */   {
/* 1535 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 1536 */     PreparedStatement stmt = null;
/* 1537 */     ResultSet resultSet = null;
/* 1538 */     ModelForDimensionELO results = new ModelForDimensionELO();
/*      */     try
/*      */     {
/* 1541 */       stmt = getConnection().prepareStatement(SQL_MODEL_FOR_DIMENSION);
/* 1542 */       int col = 1;
/* 1543 */       stmt.setInt(col++, param1);
/* 1544 */       resultSet = stmt.executeQuery();
/* 1545 */       while (resultSet.next())
/*      */       {
/* 1547 */         col = 2;
/*      */ 
/* 1550 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 1553 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 1556 */         ModelDimensionRelPK pkModelDimensionRel = new ModelDimensionRelPK(resultSet.getInt(col++), resultSet.getInt(col++));
/*      */ 
/* 1560 */         String textModelDimensionRel = "";
/*      */ 
/* 1563 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 1569 */         ModelDimensionRelRefImpl erModelDimensionRel = new ModelDimensionRelRefImpl(pkModelDimensionRel, textModelDimensionRel);
/*      */ 
/* 1576 */         results.add(erModel, erModelDimensionRel);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 1584 */       throw handleSQLException(SQL_MODEL_FOR_DIMENSION, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 1588 */       closeResultSet(resultSet);
/* 1589 */       closeStatement(stmt);
/* 1590 */       closeConnection();
/*      */     }
/*      */ 
/* 1593 */     if (timer != null) {
/* 1594 */       timer.logDebug("getModelForDimension", " DimensionId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 1599 */     return results;
/*      */   }
/*      */ 
/*      */   public ModelDimensionsELO getModelDimensions(int param1)
/*      */   {
/* 1641 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 1642 */     PreparedStatement stmt = null;
/* 1643 */     ResultSet resultSet = null;
/* 1644 */     ModelDimensionsELO results = new ModelDimensionsELO();
/*      */     try
/*      */     {
/* 1647 */       stmt = getConnection().prepareStatement(SQL_MODEL_DIMENSIONS);
/* 1648 */       int col = 1;
/* 1649 */       stmt.setInt(col++, param1);
/* 1650 */       resultSet = stmt.executeQuery();
/* 1651 */       while (resultSet.next())
/*      */       {
/* 1653 */         col = 2;
/*      */ 
/* 1656 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 1659 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 1662 */         DimensionPK pkDimension = new DimensionPK(resultSet.getInt(col++));
/*      */ 
/* 1665 */         String textDimension = resultSet.getString(col++);
/* 1666 */         int erDimensionType = resultSet.getInt(col++);
/*      */ 
/* 1668 */         ModelDimensionRelPK pkModelDimensionRel = new ModelDimensionRelPK(resultSet.getInt(col++), resultSet.getInt(col++));
/*      */ 
/* 1672 */         String textModelDimensionRel = "";
/*      */ 
/* 1675 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 1681 */         DimensionRefImpl erDimension = new DimensionRefImpl(pkDimension, textDimension, erDimensionType);
/*      */ 
/* 1688 */         ModelDimensionRelRefImpl erModelDimensionRel = new ModelDimensionRelRefImpl(pkModelDimensionRel, textModelDimensionRel);
/*      */ 
/* 1693 */         String col1 = resultSet.getString(col++);
/* 1694 */         int col2 = resultSet.getInt(col++);
/* 1695 */         int col3 = resultSet.getInt(col++);
/*      */ 
/* 1698 */         results.add(erModel, erDimension, erModelDimensionRel, col1, col2, col3);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 1710 */       throw handleSQLException(SQL_MODEL_DIMENSIONS, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 1714 */       closeResultSet(resultSet);
/* 1715 */       closeStatement(stmt);
/* 1716 */       closeConnection();
/*      */     }
/*      */ 
/* 1719 */     if (timer != null) {
/* 1720 */       timer.logDebug("getModelDimensions", " ModelId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 1725 */     return results;
/*      */   }
/*      */ 
/*      */   public ModelDimensionseExcludeCallELO getModelDimensionseExcludeCall(int param1)
/*      */   {
/* 1766 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 1767 */     PreparedStatement stmt = null;
/* 1768 */     ResultSet resultSet = null;
/* 1769 */     ModelDimensionseExcludeCallELO results = new ModelDimensionseExcludeCallELO();
/*      */     try
/*      */     {
/* 1772 */       stmt = getConnection().prepareStatement(SQL_MODEL_DIMENSIONSE_EXCLUDE_CALL);
/* 1773 */       int col = 1;
/* 1774 */       stmt.setInt(col++, param1);
/* 1775 */       resultSet = stmt.executeQuery();
/* 1776 */       while (resultSet.next())
/*      */       {
/* 1778 */         col = 2;
/*      */ 
/* 1781 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 1784 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 1787 */         DimensionPK pkDimension = new DimensionPK(resultSet.getInt(col++));
/*      */ 
/* 1790 */         String textDimension = resultSet.getString(col++);
/* 1791 */         int erDimensionType = resultSet.getInt(col++);
/*      */ 
/* 1793 */         ModelDimensionRelPK pkModelDimensionRel = new ModelDimensionRelPK(resultSet.getInt(col++), resultSet.getInt(col++));
/*      */ 
/* 1797 */         String textModelDimensionRel = "";
/*      */ 
/* 1800 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 1806 */         DimensionRefImpl erDimension = new DimensionRefImpl(pkDimension, textDimension, erDimensionType);
/*      */ 
/* 1813 */         ModelDimensionRelRefImpl erModelDimensionRel = new ModelDimensionRelRefImpl(pkModelDimensionRel, textModelDimensionRel);
/*      */ 
/* 1818 */         int col1 = resultSet.getInt(col++);
/* 1819 */         int col2 = resultSet.getInt(col++);
/*      */ 
/* 1822 */         results.add(erModel, erDimension, erModelDimensionRel, col1, col2);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 1833 */       throw handleSQLException(SQL_MODEL_DIMENSIONSE_EXCLUDE_CALL, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 1837 */       closeResultSet(resultSet);
/* 1838 */       closeStatement(stmt);
/* 1839 */       closeConnection();
/*      */     }
/*      */ 
/* 1842 */     if (timer != null) {
/* 1843 */       timer.logDebug("getModelDimensionseExcludeCall", " ModelId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 1848 */     return results;
/*      */   }
/*      */ 
/*      */   public ModelDetailsWebELO getModelDetailsWeb(int param1)
/*      */   {
/* 1881 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 1882 */     PreparedStatement stmt = null;
/* 1883 */     ResultSet resultSet = null;
/* 1884 */     ModelDetailsWebELO results = new ModelDetailsWebELO();
/*      */     try
/*      */     {
/* 1887 */       stmt = getConnection().prepareStatement(SQL_MODEL_DETAILS_WEB);
/* 1888 */       int col = 1;
/* 1889 */       stmt.setInt(col++, param1);
/* 1890 */       resultSet = stmt.executeQuery();
/* 1891 */       while (resultSet.next())
/*      */       {
/* 1893 */         col = 2;
/*      */ 
/* 1896 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 1899 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 1903 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 1908 */         int col1 = resultSet.getInt(col++);
/* 1909 */         String col2 = resultSet.getString(col++);
/* 1910 */         String col3 = resultSet.getString(col++);
/*      */ 
/* 1913 */         results.add(erModel, col1, col2, col3);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 1923 */       throw handleSQLException(SQL_MODEL_DETAILS_WEB, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 1927 */       closeResultSet(resultSet);
/* 1928 */       closeStatement(stmt);
/* 1929 */       closeConnection();
/*      */     }
/*      */ 
/* 1932 */     if (timer != null) {
/* 1933 */       timer.logDebug("getModelDetailsWeb", " ModelId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 1938 */     return results;
/*      */   }
/*      */ 
/*      */   public AllRootsForModelELO getAllRootsForModel(int param1)
/*      */   {
/* 2001 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 2002 */     PreparedStatement stmt = null;
/* 2003 */     ResultSet resultSet = null;
/* 2004 */     AllRootsForModelELO results = new AllRootsForModelELO();
/*      */     try
/*      */     {
/* 2007 */       stmt = getConnection().prepareStatement(SQL_ALL_ROOTS_FOR_MODEL);
/* 2008 */       int col = 1;
/* 2009 */       stmt.setInt(col++, param1);
/* 2010 */       resultSet = stmt.executeQuery();
/* 2011 */       while (resultSet.next())
/*      */       {
/* 2013 */         col = 2;
/*      */ 
/* 2016 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 2019 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 2022 */         StructureElementPK pkStructureElement = new StructureElementPK(resultSet.getInt(col++), resultSet.getInt(col++));
/*      */ 
/* 2026 */         String textStructureElement = resultSet.getString(col++);
/*      */ 
/* 2028 */         ModelDimensionRelPK pkModelDimensionRel = new ModelDimensionRelPK(resultSet.getInt(col++), resultSet.getInt(col++));
/*      */ 
/* 2032 */         String textModelDimensionRel = "";
/*      */ 
/* 2034 */         DimensionPK pkDimension = new DimensionPK(resultSet.getInt(col++));
/*      */ 
/* 2037 */         String textDimension = resultSet.getString(col++);
/* 2038 */         int erDimensionType = resultSet.getInt(col++);
/*      */ 
/* 2040 */         HierarchyPK pkHierarchy = new HierarchyPK(resultSet.getInt(col++));
/*      */ 
/* 2043 */         String textHierarchy = resultSet.getString(col++);
/*      */ 
/* 2046 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 2052 */         StructureElementRefImpl erStructureElement = new StructureElementRefImpl(pkStructureElement, textStructureElement);
/*      */ 
/* 2058 */         ModelDimensionRelRefImpl erModelDimensionRel = new ModelDimensionRelRefImpl(pkModelDimensionRel, textModelDimensionRel);
/*      */ 
/* 2064 */         DimensionRefImpl erDimension = new DimensionRefImpl(pkDimension, textDimension, erDimensionType);
/*      */ 
/* 2071 */         HierarchyRefImpl erHierarchy = new HierarchyRefImpl(pkHierarchy, textHierarchy);
/*      */ 
/* 2076 */         String col1 = resultSet.getString(col++);
/* 2077 */         int col2 = resultSet.getInt(col++);
/* 2078 */         int col3 = resultSet.getInt(col++);
/* 2079 */         String col4 = resultSet.getString(col++);
/* 2080 */         int col5 = resultSet.getInt(col++);
/* 2081 */         int col6 = resultSet.getInt(col++);
/* 2082 */         int col7 = resultSet.getInt(col++);
/* 2083 */         int col8 = resultSet.getInt(col++);
/* 2084 */         String col9 = resultSet.getString(col++);
/* 2085 */         if (resultSet.wasNull())
/* 2086 */           col9 = "";
/* 2087 */         String col10 = resultSet.getString(col++);
/* 2088 */         if (resultSet.wasNull())
/* 2089 */           col10 = "";
/* 2090 */         String col11 = resultSet.getString(col++);
/* 2091 */         if (resultSet.wasNull())
/* 2092 */           col11 = "";
/* 2093 */         int col12 = resultSet.getInt(col++);
/* 2094 */         int col13 = resultSet.getInt(col++);
/* 2095 */         int col14 = resultSet.getInt(col++);
/* 2096 */         int col15 = resultSet.getInt(col++);
/*      */ 
/* 2099 */         results.add(erModel, erStructureElement, erModelDimensionRel, erDimension, erHierarchy, col1, col2, col3, col4, col5, col6, col7, col8, col9.equals("Y"), col10.equals("Y"), col11.equals("Y"), col12, col13, col14, col15);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 2125 */       throw handleSQLException(SQL_ALL_ROOTS_FOR_MODEL, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 2129 */       closeResultSet(resultSet);
/* 2130 */       closeStatement(stmt);
/* 2131 */       closeConnection();
/*      */     }
/*      */ 
/* 2134 */     if (timer != null) {
/* 2135 */       timer.logDebug("getAllRootsForModel", " ModelId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 2140 */     return results;
/*      */   }
/*      */ 
/*      */   public BudgetHierarchyRootNodeForModelELO getBudgetHierarchyRootNodeForModel(int param1)
/*      */   {
/* 2200 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 2201 */     PreparedStatement stmt = null;
/* 2202 */     ResultSet resultSet = null;
/* 2203 */     BudgetHierarchyRootNodeForModelELO results = new BudgetHierarchyRootNodeForModelELO();
/*      */     try
/*      */     {
/* 2206 */       stmt = getConnection().prepareStatement(SQL_BUDGET_HIERARCHY_ROOT_NODE_FOR_MODEL);
/* 2207 */       int col = 1;
/* 2208 */       stmt.setInt(col++, param1);
/* 2209 */       resultSet = stmt.executeQuery();
/* 2210 */       while (resultSet.next())
/*      */       {
/* 2212 */         col = 2;
/*      */ 
/* 2215 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 2218 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 2221 */         StructureElementPK pkStructureElement = new StructureElementPK(resultSet.getInt(col++), resultSet.getInt(col++));
/*      */ 
/* 2225 */         String textStructureElement = resultSet.getString(col++);
/*      */ 
/* 2227 */         ModelDimensionRelPK pkModelDimensionRel = new ModelDimensionRelPK(resultSet.getInt(col++), resultSet.getInt(col++));
/*      */ 
/* 2231 */         String textModelDimensionRel = "";
/*      */ 
/* 2233 */         DimensionPK pkDimension = new DimensionPK(resultSet.getInt(col++));
/*      */ 
/* 2236 */         String textDimension = resultSet.getString(col++);
/* 2237 */         int erDimensionType = resultSet.getInt(col++);
/*      */ 
/* 2239 */         HierarchyPK pkHierarchy = new HierarchyPK(resultSet.getInt(col++));
/*      */ 
/* 2242 */         String textHierarchy = resultSet.getString(col++);
/*      */ 
/* 2245 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 2251 */         StructureElementRefImpl erStructureElement = new StructureElementRefImpl(pkStructureElement, textStructureElement);
/*      */ 
/* 2257 */         ModelDimensionRelRefImpl erModelDimensionRel = new ModelDimensionRelRefImpl(pkModelDimensionRel, textModelDimensionRel);
/*      */ 
/* 2263 */         DimensionRefImpl erDimension = new DimensionRefImpl(pkDimension, textDimension, erDimensionType);
/*      */ 
/* 2270 */         HierarchyRefImpl erHierarchy = new HierarchyRefImpl(pkHierarchy, textHierarchy);
/*      */ 
/* 2275 */         String col1 = resultSet.getString(col++);
/* 2276 */         int col2 = resultSet.getInt(col++);
/* 2277 */         int col3 = resultSet.getInt(col++);
/* 2278 */         String col4 = resultSet.getString(col++);
/* 2279 */         int col5 = resultSet.getInt(col++);
/* 2280 */         int col6 = resultSet.getInt(col++);
/* 2281 */         int col7 = resultSet.getInt(col++);
/* 2282 */         int col8 = resultSet.getInt(col++);
/* 2283 */         String col9 = resultSet.getString(col++);
/* 2284 */         if (resultSet.wasNull())
/* 2285 */           col9 = "";
/* 2286 */         String col10 = resultSet.getString(col++);
/* 2287 */         if (resultSet.wasNull())
/* 2288 */           col10 = "";
/* 2289 */         String col11 = resultSet.getString(col++);
/* 2290 */         if (resultSet.wasNull())
/* 2291 */           col11 = "";
/* 2292 */         int col12 = resultSet.getInt(col++);
/*      */ 
/* 2295 */         results.add(erModel, erStructureElement, erModelDimensionRel, erDimension, erHierarchy, col1, col2, col3, col4, col5, col6, col7, col8, col9.equals("Y"), col10.equals("Y"), col11.equals("Y"), col12);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 2318 */       throw handleSQLException(SQL_BUDGET_HIERARCHY_ROOT_NODE_FOR_MODEL, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 2322 */       closeResultSet(resultSet);
/* 2323 */       closeStatement(stmt);
/* 2324 */       closeConnection();
/*      */     }
/*      */ 
/* 2327 */     if (timer != null) {
/* 2328 */       timer.logDebug("getBudgetHierarchyRootNodeForModel", " ModelId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 2333 */     return results;
/*      */   }
/*      */ 
/*      */   public BudgetCyclesToFixStateELO getBudgetCyclesToFixState(int param1)
/*      */   {
/* 2363 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 2364 */     PreparedStatement stmt = null;
/* 2365 */     ResultSet resultSet = null;
/* 2366 */     BudgetCyclesToFixStateELO results = new BudgetCyclesToFixStateELO();
/*      */     try
/*      */     {
/* 2369 */       stmt = getConnection().prepareStatement(SQL_BUDGET_CYCLES_TO_FIX_STATE);
/* 2370 */       int col = 1;
/* 2371 */       stmt.setInt(col++, param1);
/* 2372 */       resultSet = stmt.executeQuery();
/* 2373 */       while (resultSet.next())
/*      */       {
/* 2375 */         col = 2;
/*      */ 
/* 2378 */         results.add(resultSet.getInt(col++), resultSet.getInt(col++));
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 2386 */       throw handleSQLException(SQL_BUDGET_CYCLES_TO_FIX_STATE, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 2390 */       closeResultSet(resultSet);
/* 2391 */       closeStatement(stmt);
/* 2392 */       closeConnection();
/*      */     }
/*      */ 
/* 2395 */     if (timer != null) {
/* 2396 */       timer.logDebug("getBudgetCyclesToFixState", " ModelId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 2401 */     return results;
/*      */   }
/*      */ 
/*      */   public MaxDepthForBudgetHierarchyELO getMaxDepthForBudgetHierarchy(int param1)
/*      */   {
/* 2433 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 2434 */     PreparedStatement stmt = null;
/* 2435 */     ResultSet resultSet = null;
/* 2436 */     MaxDepthForBudgetHierarchyELO results = new MaxDepthForBudgetHierarchyELO();
/*      */     try
/*      */     {
/* 2439 */       stmt = getConnection().prepareStatement(SQL_MAX_DEPTH_FOR_BUDGET_HIERARCHY);
/* 2440 */       int col = 1;
/* 2441 */       stmt.setInt(col++, param1);
/* 2442 */       resultSet = stmt.executeQuery();
/* 2443 */       while (resultSet.next())
/*      */       {
/* 2445 */         col = 2;
/*      */ 
/* 2448 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 2451 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 2455 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 2460 */         int col1 = resultSet.getInt(col++);
/* 2461 */         int col2 = resultSet.getInt(col++);
/*      */ 
/* 2464 */         results.add(erModel, col1, col2);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 2473 */       throw handleSQLException(SQL_MAX_DEPTH_FOR_BUDGET_HIERARCHY, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 2477 */       closeResultSet(resultSet);
/* 2478 */       closeStatement(stmt);
/* 2479 */       closeConnection();
/*      */     }
/*      */ 
/* 2482 */     if (timer != null) {
/* 2483 */       timer.logDebug("getMaxDepthForBudgetHierarchy", " ModelId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 2488 */     return results;
/*      */   }
/*      */ 
/*      */   public CalendarSpecForModelELO getCalendarSpecForModel(int param1)
/*      */   {
/* 2526 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 2527 */     PreparedStatement stmt = null;
/* 2528 */     ResultSet resultSet = null;
/* 2529 */     CalendarSpecForModelELO results = new CalendarSpecForModelELO();
/*      */     try
/*      */     {
/* 2532 */       stmt = getConnection().prepareStatement(SQL_CALENDAR_SPEC_FOR_MODEL);
/* 2533 */       int col = 1;
/* 2534 */       stmt.setInt(col++, param1);
/* 2535 */       resultSet = stmt.executeQuery();
/* 2536 */       while (resultSet.next())
/*      */       {
/* 2538 */         col = 2;
/*      */ 
/* 2541 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 2544 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 2547 */         CalendarSpecPK pkCalendarSpec = new CalendarSpecPK(resultSet.getInt(col++));
/*      */ 
/* 2550 */         String textCalendarSpec = "";
/*      */ 
/* 2552 */         ModelDimensionRelPK pkModelDimensionRel = new ModelDimensionRelPK(resultSet.getInt(col++), resultSet.getInt(col++));
/*      */ 
/* 2556 */         String textModelDimensionRel = "";
/*      */ 
/* 2559 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 2565 */         CalendarSpecRefImpl erCalendarSpec = new CalendarSpecRefImpl(pkCalendarSpec, textCalendarSpec);
/*      */ 
/* 2571 */         ModelDimensionRelRefImpl erModelDimensionRel = new ModelDimensionRelRefImpl(pkModelDimensionRel, textModelDimensionRel);
/*      */ 
/* 2576 */         int col1 = resultSet.getInt(col++);
/*      */ 
/* 2579 */         results.add(erModel, erCalendarSpec, erModelDimensionRel, col1);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 2589 */       throw handleSQLException(SQL_CALENDAR_SPEC_FOR_MODEL, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 2593 */       closeResultSet(resultSet);
/* 2594 */       closeStatement(stmt);
/* 2595 */       closeConnection();
/*      */     }
/*      */ 
/* 2598 */     if (timer != null) {
/* 2599 */       timer.logDebug("getCalendarSpecForModel", " ModelId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 2604 */     return results;
/*      */   }
/*      */ 
/*      */   public HierarchiesForModelELO getHierarchiesForModel(int param1)
/*      */   {
/* 2648 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 2649 */     PreparedStatement stmt = null;
/* 2650 */     ResultSet resultSet = null;
/* 2651 */     HierarchiesForModelELO results = new HierarchiesForModelELO();
/*      */     try
/*      */     {
/* 2654 */       stmt = getConnection().prepareStatement(SQL_HIERARCHIES_FOR_MODEL);
/* 2655 */       int col = 1;
/* 2656 */       stmt.setInt(col++, param1);
/* 2657 */       resultSet = stmt.executeQuery();
/* 2658 */       while (resultSet.next())
/*      */       {
/* 2660 */         col = 2;
/*      */ 
/* 2663 */         ModelPK pkModel = new ModelPK(resultSet.getInt(col++));
/*      */ 
/* 2666 */         String textModel = resultSet.getString(col++);
/*      */ 
/* 2669 */         DimensionPK pkDimension = new DimensionPK(resultSet.getInt(col++));
/*      */ 
/* 2672 */         String textDimension = resultSet.getString(col++);
/* 2673 */         int erDimensionType = resultSet.getInt(col++);
/*      */ 
/* 2675 */         ModelDimensionRelPK pkModelDimensionRel = new ModelDimensionRelPK(resultSet.getInt(col++), resultSet.getInt(col++));
/*      */ 
/* 2679 */         String textModelDimensionRel = "";
/*      */ 
/* 2681 */         HierarchyPK pkHierarchy = new HierarchyPK(resultSet.getInt(col++));
/*      */ 
/* 2684 */         String textHierarchy = resultSet.getString(col++);
/*      */ 
/* 2687 */         ModelRefImpl erModel = new ModelRefImpl(pkModel, textModel);
/*      */ 
/* 2693 */         DimensionRefImpl erDimension = new DimensionRefImpl(pkDimension, textDimension, erDimensionType);
/*      */ 
/* 2700 */         ModelDimensionRelRefImpl erModelDimensionRel = new ModelDimensionRelRefImpl(pkModelDimensionRel, textModelDimensionRel);
/*      */ 
/* 2706 */         HierarchyRefImpl erHierarchy = new HierarchyRefImpl(pkHierarchy, textHierarchy);
/*      */ 
/* 2711 */         String col1 = resultSet.getString(col++);
/*      */ 
/* 2714 */         results.add(erModel, erDimension, erModelDimensionRel, erHierarchy, col1);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 2725 */       throw handleSQLException(SQL_HIERARCHIES_FOR_MODEL, sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 2729 */       closeResultSet(resultSet);
/* 2730 */       closeStatement(stmt);
/* 2731 */       closeConnection();
/*      */     }
/*      */ 
/* 2734 */     if (timer != null) {
/* 2735 */       timer.logDebug("getHierarchiesForModel", " ModelId=" + param1 + " items=" + results.size());
/*      */     }
/*      */ 
/* 2740 */     return results;
/*      */   }
/*      */ 
/*      */   private void deleteDependants(ModelPK pk)
/*      */   {
/* 3235 */     Set emptyStrings = Collections.emptySet();
/* 3236 */     deleteDependants(pk, emptyStrings);
/*      */   }
/*      */ 
/*      */   private void deleteDependants(ModelPK pk, Set<String> exclusionTables)
/*      */   {
/* 3241 */     exclusionTables = new HashSet();
/* 3242 */     exclusionTables.add("CUBE_FORMULA_PACKAGE");
/*      */ 
/* 3246 */     XmlFormDAO formDao = new XmlFormDAO();
/* 3247 */     AllFinanceAndFlatFormsForModelELO forms = formDao.getAllFinanceAndFlatFormsForModel(pk.getModelId());
/* 3248 */     for (int i = 0; i < forms.size(); i++)
/*      */     {
/* 3251 */       XmlFormRef ref = (XmlFormRef)forms.getValueAt(i, "XmlForm");
/*      */       try
/*      */       {
/* 3254 */         formDao.getDetails((XmlFormPK)ref.getPrimaryKey(), "");
/* 3255 */         formDao.remove();
/*      */       }
/*      */       catch (ValidationException ve)
/*      */       {
/*      */       }
/*      */ 
/*      */     }
/*      */ 
/* 3263 */     for (int i = SQL_DELETE_CHILDRENS_DEPENDANTS.length - 1; i > -1; i--)
/*      */     {
/* 3265 */       if (exclusionTables.contains(SQL_DELETE_CHILDRENS_DEPENDANTS[i][0]))
/*      */         continue;
/* 3267 */       Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*      */ 
/* 3269 */       PreparedStatement stmt = null;
/*      */ 
/* 3271 */       int resultCount = 0;
/* 3272 */       String s = null;
/*      */       try
/*      */       {
/* 3275 */         s = SQL_DELETE_CHILDRENS_DEPENDANTS[i][1] + SQL_DELETE_DEPENDANT_CRITERIA;
/*      */ 
/* 3277 */         if (this._log.isDebugEnabled()) {
/* 3278 */           this._log.debug("deleteDependants", s);
/*      */         }
/* 3280 */         stmt = getConnection().prepareStatement(s);
/*      */ 
/* 3283 */         int col = 1;
/* 3284 */         stmt.setInt(col++, pk.getModelId());
/*      */ 
/* 3287 */         resultCount = stmt.executeUpdate();
/*      */       }
/*      */       catch (SQLException sqle)
/*      */       {
/* 3291 */         throw handleSQLException(pk, s, sqle);
/*      */       }
/*      */       finally
/*      */       {
/* 3295 */         closeStatement(stmt);
/* 3296 */         closeConnection();
/*      */ 
/* 3298 */         if (timer != null) {
/* 3299 */           timer.logDebug("deleteDependants", "A[" + i + "] count=" + resultCount);
/*      */         }
/*      */       }
/*      */     }
/* 3303 */     for (int i = SQL_DELETE_CHILDREN.length - 1; i > -1; i--)
/*      */     {
/* 3305 */       if (exclusionTables.contains(SQL_DELETE_CHILDREN[i][0]))
/*      */         continue;
/* 3307 */       Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*      */ 
/* 3309 */       PreparedStatement stmt = null;
/*      */ 
/* 3311 */       int resultCount = 0;
/* 3312 */       String s = null;
/*      */       try
/*      */       {
/* 3315 */         s = SQL_DELETE_CHILDREN[i][1];
/*      */ 
/* 3317 */         if (this._log.isDebugEnabled()) {
/* 3318 */           this._log.debug("deleteDependants", s);
/*      */         }
/* 3320 */         stmt = getConnection().prepareStatement(s);
/*      */ 
/* 3323 */         int col = 1;
/* 3324 */         stmt.setInt(col++, pk.getModelId());
/*      */ 
/* 3327 */         resultCount = stmt.executeUpdate();
/*      */       }
/*      */       catch (SQLException sqle)
/*      */       {
/* 3331 */         throw handleSQLException(pk, s, sqle);
/*      */       }
/*      */       finally
/*      */       {
/* 3335 */         closeStatement(stmt);
/* 3336 */         closeConnection();
/*      */ 
/* 3338 */         if (timer != null)
/* 3339 */           timer.logDebug("deleteDependants", "B[" + i + "] count=" + resultCount);
/*      */       }
/*      */     }
/*      */   }
/*      */ 
/*      */   public ModelEVO getDetails(ModelPK pk, String dependants)
/*      */     throws ValidationException
/*      */   {
/* 3406 */     return getDetails(new ModelCK(pk), dependants);
/*      */   }
/*      */ 
/*      */   public ModelEVO getDetails(ModelCK paramCK, String dependants)
/*      */     throws ValidationException
/*      */   {
/* 3519 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*      */ 
/* 3522 */     if (this.mDetails == null) {
/* 3523 */       doLoad(paramCK.getModelPK());
/*      */     }
/* 3525 */     else if (!this.mDetails.getPK().equals(paramCK.getModelPK())) {
/* 3526 */       doLoad(paramCK.getModelPK());
/*      */     }
/* 3528 */     else if (!checkIfValid())
/*      */     {
/* 3530 */       this._log.info("getDetails", "[ALERT] ModelEVO " + this.mDetails.getPK() + " no longer valid - reloading");
/*      */ 
/* 3532 */       doLoad(paramCK.getModelPK());
/*      */     }
/*      */ 
/* 3638 */     if ((dependants.indexOf("<0>") > -1) && (!this.mDetails.isFinanceCubesAllItemsLoaded()))
/*      */     {
/* 3643 */       this.mDetails.setFinanceCubes(getFinanceCubeDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getFinanceCubes()));
/*      */ 
/* 3650 */       this.mDetails.setFinanceCubesAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3654 */     if ((dependants.indexOf("<9>") > -1) && (!this.mDetails.isModelDimensionRelsAllItemsLoaded()))
/*      */     {
/* 3659 */       this.mDetails.setModelDimensionRels(getModelDimensionRelDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getModelDimensionRels()));
/*      */ 
/* 3666 */       this.mDetails.setModelDimensionRelsAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3670 */     if ((dependants.indexOf("<10>") > -1) && (!this.mDetails.isModelPropertiesAllItemsLoaded()))
/*      */     {
/* 3675 */       this.mDetails.setModelProperties(getModelPropertyDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getModelProperties()));
/*      */ 
/* 3682 */       this.mDetails.setModelPropertiesAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3686 */     if ((dependants.indexOf("<11>") > -1) && (!this.mDetails.isBudgetCyclesAllItemsLoaded()))
/*      */     {
/* 3691 */       this.mDetails.setBudgetCycles(getBudgetCycleDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getBudgetCycles()));
/*      */ 
/* 3698 */       this.mDetails.setBudgetCyclesAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3702 */     if ((dependants.indexOf("<15>") > -1) && (!this.mDetails.isBudgetUsersAllItemsLoaded()))
/*      */     {
/* 3707 */       this.mDetails.setBudgetUsers(getBudgetUserDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getBudgetUsers()));
/*      */ 
/* 3714 */       this.mDetails.setBudgetUsersAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3718 */     if ((dependants.indexOf("<16>") > -1) && (!this.mDetails.isSecurityGroupsAllItemsLoaded()))
/*      */     {
/* 3723 */       this.mDetails.setSecurityGroups(getSecurityGroupDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getSecurityGroups()));
/*      */ 
/* 3730 */       this.mDetails.setSecurityGroupsAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3734 */     if ((dependants.indexOf("<18>") > -1) && (!this.mDetails.isSecurityAccessDefsAllItemsLoaded()))
/*      */     {
/* 3739 */       this.mDetails.setSecurityAccessDefs(getSecurityAccessDefDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getSecurityAccessDefs()));
/*      */ 
/* 3746 */       this.mDetails.setSecurityAccessDefsAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3750 */     if ((dependants.indexOf("<20>") > -1) && (!this.mDetails.isCellCalculationsAllItemsLoaded()))
/*      */     {
/* 3755 */       this.mDetails.setCellCalculations(getCellCalcDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getCellCalculations()));
/*      */ 
/* 3762 */       this.mDetails.setCellCalculationsAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3766 */     if ((dependants.indexOf("<22>") > -1) && (!this.mDetails.isVirementGroupsAllItemsLoaded()))
/*      */     {
/* 3771 */       this.mDetails.setVirementGroups(getVirementCategoryDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getVirementGroups()));
/*      */ 
/* 3778 */       this.mDetails.setVirementGroupsAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3782 */     if ((dependants.indexOf("<25>") > -1) && (!this.mDetails.isRechargeAllItemsLoaded()))
/*      */     {
/* 3787 */       this.mDetails.setRecharge(getRechargeDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getRecharge()));
/*      */ 
/* 3794 */       this.mDetails.setRechargeAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3798 */     if ((dependants.indexOf("<27>") > -1) && (!this.mDetails.isBudgetActivitiesAllItemsLoaded()))
/*      */     {
/* 3803 */       this.mDetails.setBudgetActivities(getBudgetActivityDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getBudgetActivities()));
/*      */ 
/* 3810 */       this.mDetails.setBudgetActivitiesAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3814 */     if ((dependants.indexOf("<29>") > -1) && (!this.mDetails.isVirementRequestsAllItemsLoaded()))
/*      */     {
/* 3819 */       this.mDetails.setVirementRequests(getVirementRequestDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getVirementRequests()));
/*      */ 
/* 3826 */       this.mDetails.setVirementRequestsAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3830 */     if ((dependants.indexOf("<36>") > -1) && (!this.mDetails.isResponsibilityAreasAllItemsLoaded()))
/*      */     {
/* 3835 */       this.mDetails.setResponsibilityAreas(getResponsibilityAreaDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getResponsibilityAreas()));
/*      */ 
/* 3842 */       this.mDetails.setResponsibilityAreasAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3846 */     if ((dependants.indexOf("<37>") > -1) && (!this.mDetails.isUserDefinedWeightingProfilesAllItemsLoaded()))
/*      */     {
/* 3851 */       this.mDetails.setUserDefinedWeightingProfiles(getWeightingProfileDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getUserDefinedWeightingProfiles()));
/*      */ 
/* 3858 */       this.mDetails.setUserDefinedWeightingProfilesAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3862 */     if ((dependants.indexOf("<41>") > -1) && (!this.mDetails.isCellCalcDeploymentsAllItemsLoaded()))
/*      */     {
/* 3867 */       this.mDetails.setCellCalcDeployments(getCcDeploymentDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getCellCalcDeployments()));
/*      */ 
/* 3874 */       this.mDetails.setCellCalcDeploymentsAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3878 */     if ((dependants.indexOf("<47>") > -1) && (!this.mDetails.isFormRebuildsAllItemsLoaded()))
/*      */     {
/* 3883 */       this.mDetails.setFormRebuilds(getFormRebuildDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getFormRebuilds()));
/*      */ 
/* 3890 */       this.mDetails.setFormRebuildsAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3894 */     if ((dependants.indexOf("<48>") > -1) && (!this.mDetails.isAssocImportGridsAllItemsLoaded()))
/*      */     {
/* 3899 */       this.mDetails.setAssocImportGrids(getImportGridDAO().getAll(this.mDetails.getModelId(), dependants, this.mDetails.getAssocImportGrids()));
/*      */ 
/* 3906 */       this.mDetails.setAssocImportGridsAllItemsLoaded(true);
/*      */     }
/*      */ 
/* 3909 */     if ((paramCK instanceof FinanceCubeCK))
/*      */     {
/* 3911 */       if (this.mDetails.getFinanceCubes() == null) {
/* 3912 */         this.mDetails.loadFinanceCubesItem(getFinanceCubeDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 3915 */         FinanceCubePK pk = ((FinanceCubeCK)paramCK).getFinanceCubePK();
/* 3916 */         FinanceCubeEVO evo = this.mDetails.getFinanceCubesItem(pk);
/* 3917 */         if (evo == null)
/* 3918 */           this.mDetails.loadFinanceCubesItem(getFinanceCubeDAO().getDetails(paramCK, dependants));
/*      */         else {
/* 3920 */           getFinanceCubeDAO().getDetails(paramCK, evo, dependants);
/*      */         }
/*      */       }
/*      */     }
/* 3924 */     else if ((paramCK instanceof ModelDimensionRelCK))
/*      */     {
/* 3926 */       if (this.mDetails.getModelDimensionRels() == null) {
/* 3927 */         this.mDetails.loadModelDimensionRelsItem(getModelDimensionRelDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 3930 */         ModelDimensionRelPK pk = ((ModelDimensionRelCK)paramCK).getModelDimensionRelPK();
/* 3931 */         ModelDimensionRelEVO evo = this.mDetails.getModelDimensionRelsItem(pk);
/* 3932 */         if (evo == null) {
/* 3933 */           this.mDetails.loadModelDimensionRelsItem(getModelDimensionRelDAO().getDetails(paramCK, dependants));
/*      */         }
/*      */       }
/*      */     }
/* 3937 */     else if ((paramCK instanceof ModelPropertyCK))
/*      */     {
/* 3939 */       if (this.mDetails.getModelProperties() == null) {
/* 3940 */         this.mDetails.loadModelPropertiesItem(getModelPropertyDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 3943 */         ModelPropertyPK pk = ((ModelPropertyCK)paramCK).getModelPropertyPK();
/* 3944 */         ModelPropertyEVO evo = this.mDetails.getModelPropertiesItem(pk);
/* 3945 */         if (evo == null) {
/* 3946 */           this.mDetails.loadModelPropertiesItem(getModelPropertyDAO().getDetails(paramCK, dependants));
/*      */         }
/*      */       }
/*      */     }
/* 3950 */     else if ((paramCK instanceof BudgetCycleCK))
/*      */     {
/* 3952 */       if (this.mDetails.getBudgetCycles() == null) {
/* 3953 */         this.mDetails.loadBudgetCyclesItem(getBudgetCycleDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 3956 */         BudgetCyclePK pk = ((BudgetCycleCK)paramCK).getBudgetCyclePK();
/* 3957 */         BudgetCycleEVO evo = this.mDetails.getBudgetCyclesItem(pk);
/* 3958 */         if (evo == null)
/* 3959 */           this.mDetails.loadBudgetCyclesItem(getBudgetCycleDAO().getDetails(paramCK, dependants));
/*      */         else {
/* 3961 */           getBudgetCycleDAO().getDetails(paramCK, evo, dependants);
/*      */         }
/*      */       }
/*      */     }
/* 3965 */     else if ((paramCK instanceof BudgetUserCK))
/*      */     {
/* 3967 */       if (this.mDetails.getBudgetUsers() == null) {
/* 3968 */         this.mDetails.loadBudgetUsersItem(getBudgetUserDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 3971 */         BudgetUserPK pk = ((BudgetUserCK)paramCK).getBudgetUserPK();
/* 3972 */         BudgetUserEVO evo = this.mDetails.getBudgetUsersItem(pk);
/* 3973 */         if (evo == null) {
/* 3974 */           this.mDetails.loadBudgetUsersItem(getBudgetUserDAO().getDetails(paramCK, dependants));
/*      */         }
/*      */       }
/*      */     }
/* 3978 */     else if ((paramCK instanceof SecurityGroupCK))
/*      */     {
/* 3980 */       if (this.mDetails.getSecurityGroups() == null) {
/* 3981 */         this.mDetails.loadSecurityGroupsItem(getSecurityGroupDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 3984 */         SecurityGroupPK pk = ((SecurityGroupCK)paramCK).getSecurityGroupPK();
/* 3985 */         SecurityGroupEVO evo = this.mDetails.getSecurityGroupsItem(pk);
/* 3986 */         if (evo == null)
/* 3987 */           this.mDetails.loadSecurityGroupsItem(getSecurityGroupDAO().getDetails(paramCK, dependants));
/*      */         else {
/* 3989 */           getSecurityGroupDAO().getDetails(paramCK, evo, dependants);
/*      */         }
/*      */       }
/*      */     }
/* 3993 */     else if ((paramCK instanceof SecurityAccessDefCK))
/*      */     {
/* 3995 */       if (this.mDetails.getSecurityAccessDefs() == null) {
/* 3996 */         this.mDetails.loadSecurityAccessDefsItem(getSecurityAccessDefDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 3999 */         SecurityAccessDefPK pk = ((SecurityAccessDefCK)paramCK).getSecurityAccessDefPK();
/* 4000 */         SecurityAccessDefEVO evo = this.mDetails.getSecurityAccessDefsItem(pk);
/* 4001 */         if (evo == null)
/* 4002 */           this.mDetails.loadSecurityAccessDefsItem(getSecurityAccessDefDAO().getDetails(paramCK, dependants));
/*      */         else {
/* 4004 */           getSecurityAccessDefDAO().getDetails(paramCK, evo, dependants);
/*      */         }
/*      */       }
/*      */     }
/* 4008 */     else if ((paramCK instanceof CellCalcCK))
/*      */     {
/* 4010 */       if (this.mDetails.getCellCalculations() == null) {
/* 4011 */         this.mDetails.loadCellCalculationsItem(getCellCalcDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 4014 */         CellCalcPK pk = ((CellCalcCK)paramCK).getCellCalcPK();
/* 4015 */         CellCalcEVO evo = this.mDetails.getCellCalculationsItem(pk);
/* 4016 */         if (evo == null)
/* 4017 */           this.mDetails.loadCellCalculationsItem(getCellCalcDAO().getDetails(paramCK, dependants));
/*      */         else {
/* 4019 */           getCellCalcDAO().getDetails(paramCK, evo, dependants);
/*      */         }
/*      */       }
/*      */     }
/* 4023 */     else if ((paramCK instanceof VirementCategoryCK))
/*      */     {
/* 4025 */       if (this.mDetails.getVirementGroups() == null) {
/* 4026 */         this.mDetails.loadVirementGroupsItem(getVirementCategoryDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 4029 */         VirementCategoryPK pk = ((VirementCategoryCK)paramCK).getVirementCategoryPK();
/* 4030 */         VirementCategoryEVO evo = this.mDetails.getVirementGroupsItem(pk);
/* 4031 */         if (evo == null)
/* 4032 */           this.mDetails.loadVirementGroupsItem(getVirementCategoryDAO().getDetails(paramCK, dependants));
/*      */         else {
/* 4034 */           getVirementCategoryDAO().getDetails(paramCK, evo, dependants);
/*      */         }
/*      */       }
/*      */     }
/* 4038 */     else if ((paramCK instanceof RechargeCK))
/*      */     {
/* 4040 */       if (this.mDetails.getRecharge() == null) {
/* 4041 */         this.mDetails.loadRechargeItem(getRechargeDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 4044 */         RechargePK pk = ((RechargeCK)paramCK).getRechargePK();
/* 4045 */         RechargeEVO evo = this.mDetails.getRechargeItem(pk);
/* 4046 */         if (evo == null)
/* 4047 */           this.mDetails.loadRechargeItem(getRechargeDAO().getDetails(paramCK, dependants));
/*      */         else {
/* 4049 */           getRechargeDAO().getDetails(paramCK, evo, dependants);
/*      */         }
/*      */       }
/*      */     }
/* 4053 */     else if ((paramCK instanceof BudgetActivityCK))
/*      */     {
/* 4055 */       if (this.mDetails.getBudgetActivities() == null) {
/* 4056 */         this.mDetails.loadBudgetActivitiesItem(getBudgetActivityDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 4059 */         BudgetActivityPK pk = ((BudgetActivityCK)paramCK).getBudgetActivityPK();
/* 4060 */         BudgetActivityEVO evo = this.mDetails.getBudgetActivitiesItem(pk);
/* 4061 */         if (evo == null)
/* 4062 */           this.mDetails.loadBudgetActivitiesItem(getBudgetActivityDAO().getDetails(paramCK, dependants));
/*      */         else {
/* 4064 */           getBudgetActivityDAO().getDetails(paramCK, evo, dependants);
/*      */         }
/*      */       }
/*      */     }
/* 4068 */     else if ((paramCK instanceof VirementRequestCK))
/*      */     {
/* 4070 */       if (this.mDetails.getVirementRequests() == null) {
/* 4071 */         this.mDetails.loadVirementRequestsItem(getVirementRequestDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 4074 */         VirementRequestPK pk = ((VirementRequestCK)paramCK).getVirementRequestPK();
/* 4075 */         VirementRequestEVO evo = this.mDetails.getVirementRequestsItem(pk);
/* 4076 */         if (evo == null)
/* 4077 */           this.mDetails.loadVirementRequestsItem(getVirementRequestDAO().getDetails(paramCK, dependants));
/*      */         else {
/* 4079 */           getVirementRequestDAO().getDetails(paramCK, evo, dependants);
/*      */         }
/*      */       }
/*      */     }
/* 4083 */     else if ((paramCK instanceof ResponsibilityAreaCK))
/*      */     {
/* 4085 */       if (this.mDetails.getResponsibilityAreas() == null) {
/* 4086 */         this.mDetails.loadResponsibilityAreasItem(getResponsibilityAreaDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 4089 */         ResponsibilityAreaPK pk = ((ResponsibilityAreaCK)paramCK).getResponsibilityAreaPK();
/* 4090 */         ResponsibilityAreaEVO evo = this.mDetails.getResponsibilityAreasItem(pk);
/* 4091 */         if (evo == null) {
/* 4092 */           this.mDetails.loadResponsibilityAreasItem(getResponsibilityAreaDAO().getDetails(paramCK, dependants));
/*      */         }
/*      */       }
/*      */     }
/* 4096 */     else if ((paramCK instanceof WeightingProfileCK))
/*      */     {
/* 4098 */       if (this.mDetails.getUserDefinedWeightingProfiles() == null) {
/* 4099 */         this.mDetails.loadUserDefinedWeightingProfilesItem(getWeightingProfileDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 4102 */         WeightingProfilePK pk = ((WeightingProfileCK)paramCK).getWeightingProfilePK();
/* 4103 */         WeightingProfileEVO evo = this.mDetails.getUserDefinedWeightingProfilesItem(pk);
/* 4104 */         if (evo == null)
/* 4105 */           this.mDetails.loadUserDefinedWeightingProfilesItem(getWeightingProfileDAO().getDetails(paramCK, dependants));
/*      */         else {
/* 4107 */           getWeightingProfileDAO().getDetails(paramCK, evo, dependants);
/*      */         }
/*      */       }
/*      */     }
/* 4111 */     else if ((paramCK instanceof CcDeploymentCK))
/*      */     {
/* 4113 */       if (this.mDetails.getCellCalcDeployments() == null) {
/* 4114 */         this.mDetails.loadCellCalcDeploymentsItem(getCcDeploymentDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 4117 */         CcDeploymentPK pk = ((CcDeploymentCK)paramCK).getCcDeploymentPK();
/* 4118 */         CcDeploymentEVO evo = this.mDetails.getCellCalcDeploymentsItem(pk);
/* 4119 */         if (evo == null)
/* 4120 */           this.mDetails.loadCellCalcDeploymentsItem(getCcDeploymentDAO().getDetails(paramCK, dependants));
/*      */         else {
/* 4122 */           getCcDeploymentDAO().getDetails(paramCK, evo, dependants);
/*      */         }
/*      */       }
/*      */     }
/* 4126 */     else if ((paramCK instanceof FormRebuildCK))
/*      */     {
/* 4128 */       if (this.mDetails.getFormRebuilds() == null) {
/* 4129 */         this.mDetails.loadFormRebuildsItem(getFormRebuildDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 4132 */         FormRebuildPK pk = ((FormRebuildCK)paramCK).getFormRebuildPK();
/* 4133 */         FormRebuildEVO evo = this.mDetails.getFormRebuildsItem(pk);
/* 4134 */         if (evo == null) {
/* 4135 */           this.mDetails.loadFormRebuildsItem(getFormRebuildDAO().getDetails(paramCK, dependants));
/*      */         }
/*      */       }
/*      */     }
/* 4139 */     else if ((paramCK instanceof ImportGridCK))
/*      */     {
/* 4141 */       if (this.mDetails.getAssocImportGrids() == null) {
/* 4142 */         this.mDetails.loadAssocImportGridsItem(getImportGridDAO().getDetails(paramCK, dependants));
/*      */       }
/*      */       else {
/* 4145 */         ImportGridPK pk = ((ImportGridCK)paramCK).getImportGridPK();
/* 4146 */         ImportGridEVO evo = this.mDetails.getAssocImportGridsItem(pk);
/* 4147 */         if (evo == null) {
/* 4148 */           this.mDetails.loadAssocImportGridsItem(getImportGridDAO().getDetails(paramCK, dependants));
/*      */         }
/*      */       }
/*      */     }
/*      */ 
/* 4153 */     ModelEVO details = new ModelEVO();
/* 4154 */     details = this.mDetails.deepClone();
/*      */ 
/* 4156 */     if (timer != null) {
/* 4157 */       timer.logDebug("getDetails", paramCK + " " + dependants);
/*      */     }
/* 4159 */     return details;
/*      */   }
/*      */ 
/*      */   private boolean checkIfValid()
/*      */   {
/* 4169 */     boolean stillValid = false;
/* 4170 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 4171 */     PreparedStatement stmt = null;
/* 4172 */     ResultSet resultSet = null;
/*      */     try
/*      */     {
/* 4175 */       stmt = getConnection().prepareStatement("select VERSION_NUM from MODEL where   MODEL_ID = ?");
/* 4176 */       int col = 1;
/* 4177 */       stmt.setInt(col++, this.mDetails.getModelId());
/*      */ 
/* 4179 */       resultSet = stmt.executeQuery();
/*      */ 
/* 4181 */       if (!resultSet.next()) {
/* 4182 */         throw new RuntimeException(getEntityName() + " checkIfValid " + this.mDetails.getPK() + " not found");
/*      */       }
/* 4184 */       col = 1;
/* 4185 */       int dbVersionNum = resultSet.getInt(col++);
/*      */ 
/* 4187 */       if (dbVersionNum == this.mDetails.getVersionNum())
/* 4188 */         stillValid = true;
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 4192 */       throw handleSQLException(this.mDetails.getPK(), "select VERSION_NUM from MODEL where   MODEL_ID = ?", sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 4196 */       closeResultSet(resultSet);
/* 4197 */       closeStatement(stmt);
/* 4198 */       closeConnection();
/*      */ 
/* 4200 */       if (timer != null) {
/* 4201 */         timer.logDebug("checkIfValid", this.mDetails.getPK());
/*      */       }
/*      */     }
/* 4204 */     return stillValid;
/*      */   }
/*      */ 
/*      */   public ModelEVO getDetails(String dependants)
/*      */     throws ValidationException
/*      */   {
/* 4210 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/*      */ 

/* 4212 */     if (!checkIfValid())
/*      */     {
/* 4214 */       this._log.info("getDetails", "Model " + this.mDetails.getPK() + " no longer valid - reloading");
/* 4215 */       doLoad(this.mDetails.getPK());
/*      */     }
/*      */ 
/* 4219 */     getDependants(this.mDetails, dependants);
/*      */ 
/* 4222 */     ModelEVO details = this.mDetails.deepClone();
/*      */ 
/* 4224 */     if (timer != null) {
/* 4225 */       timer.logDebug("getDetails", this.mDetails.getPK() + " " + dependants);
/*      */     }
/* 4227 */     return details;
/*      */   }
/*      */ 
/*      */   protected FinanceCubeDAO getFinanceCubeDAO()
/*      */   {
/* 4236 */     if (this.mFinanceCubeDAO == null)
/*      */     {
/* 4238 */       if (this.mDataSource != null)
/* 4239 */         this.mFinanceCubeDAO = new FinanceCubeDAO(this.mDataSource);
/*      */       else {
/* 4241 */         this.mFinanceCubeDAO = new FinanceCubeDAO(getConnection());
/*      */       }
/*      */     }
/* 4244 */     return this.mFinanceCubeDAO;
/*      */   }
/*      */ 
/*      */   protected ModelDimensionRelDAO getModelDimensionRelDAO()
/*      */   {
/* 4253 */     if (this.mModelDimensionRelDAO == null)
/*      */     {
/* 4255 */       if (this.mDataSource != null)
/* 4256 */         this.mModelDimensionRelDAO = new ModelDimensionRelDAO(this.mDataSource);
/*      */       else {
/* 4258 */         this.mModelDimensionRelDAO = new ModelDimensionRelDAO(getConnection());
/*      */       }
/*      */     }
/* 4261 */     return this.mModelDimensionRelDAO;
/*      */   }
/*      */ 
/*      */   protected ModelPropertyDAO getModelPropertyDAO()
/*      */   {
/* 4270 */     if (this.mModelPropertyDAO == null)
/*      */     {
/* 4272 */       if (this.mDataSource != null)
/* 4273 */         this.mModelPropertyDAO = new ModelPropertyDAO(this.mDataSource);
/*      */       else {
/* 4275 */         this.mModelPropertyDAO = new ModelPropertyDAO(getConnection());
/*      */       }
/*      */     }
/* 4278 */     return this.mModelPropertyDAO;
/*      */   }
/*      */ 
/*      */   protected BudgetCycleDAO getBudgetCycleDAO()
/*      */   {
/* 4287 */     if (this.mBudgetCycleDAO == null)
/*      */     {
/* 4289 */       if (this.mDataSource != null)
/* 4290 */         this.mBudgetCycleDAO = new BudgetCycleDAO(this.mDataSource);
/*      */       else {
/* 4292 */         this.mBudgetCycleDAO = new BudgetCycleDAO(getConnection());
/*      */       }
/*      */     }
/* 4295 */     return this.mBudgetCycleDAO;
/*      */   }
/*      */ 
/*      */   protected BudgetUserDAO getBudgetUserDAO()
/*      */   {
/* 4304 */     if (this.mBudgetUserDAO == null)
/*      */     {
/* 4306 */       if (this.mDataSource != null)
/* 4307 */         this.mBudgetUserDAO = new BudgetUserDAO(this.mDataSource);
/*      */       else {
/* 4309 */         this.mBudgetUserDAO = new BudgetUserDAO(getConnection());
/*      */       }
/*      */     }
/* 4312 */     return this.mBudgetUserDAO;
/*      */   }
/*      */ 
/*      */   protected SecurityGroupDAO getSecurityGroupDAO()
/*      */   {
/* 4321 */     if (this.mSecurityGroupDAO == null)
/*      */     {
/* 4323 */       if (this.mDataSource != null)
/* 4324 */         this.mSecurityGroupDAO = new SecurityGroupDAO(this.mDataSource);
/*      */       else {
/* 4326 */         this.mSecurityGroupDAO = new SecurityGroupDAO(getConnection());
/*      */       }
/*      */     }
/* 4329 */     return this.mSecurityGroupDAO;
/*      */   }
/*      */ 
/*      */   protected SecurityAccessDefDAO getSecurityAccessDefDAO()
/*      */   {
/* 4338 */     if (this.mSecurityAccessDefDAO == null)
/*      */     {
/* 4340 */       if (this.mDataSource != null)
/* 4341 */         this.mSecurityAccessDefDAO = new SecurityAccessDefDAO(this.mDataSource);
/*      */       else {
/* 4343 */         this.mSecurityAccessDefDAO = new SecurityAccessDefDAO(getConnection());
/*      */       }
/*      */     }
/* 4346 */     return this.mSecurityAccessDefDAO;
/*      */   }
/*      */ 
/*      */   protected CellCalcDAO getCellCalcDAO()
/*      */   {
/* 4355 */     if (this.mCellCalcDAO == null)
/*      */     {
/* 4357 */       if (this.mDataSource != null)
/* 4358 */         this.mCellCalcDAO = new CellCalcDAO(this.mDataSource);
/*      */       else {
/* 4360 */         this.mCellCalcDAO = new CellCalcDAO(getConnection());
/*      */       }
/*      */     }
/* 4363 */     return this.mCellCalcDAO;
/*      */   }
/*      */ 
/*      */   protected VirementCategoryDAO getVirementCategoryDAO()
/*      */   {
/* 4372 */     if (this.mVirementCategoryDAO == null)
/*      */     {
/* 4374 */       if (this.mDataSource != null)
/* 4375 */         this.mVirementCategoryDAO = new VirementCategoryDAO(this.mDataSource);
/*      */       else {
/* 4377 */         this.mVirementCategoryDAO = new VirementCategoryDAO(getConnection());
/*      */       }
/*      */     }
/* 4380 */     return this.mVirementCategoryDAO;
/*      */   }
/*      */ 
/*      */   protected RechargeDAO getRechargeDAO()
/*      */   {
/* 4389 */     if (this.mRechargeDAO == null)
/*      */     {
/* 4391 */       if (this.mDataSource != null)
/* 4392 */         this.mRechargeDAO = new RechargeDAO(this.mDataSource);
/*      */       else {
/* 4394 */         this.mRechargeDAO = new RechargeDAO(getConnection());
/*      */       }
/*      */     }
/* 4397 */     return this.mRechargeDAO;
/*      */   }
/*      */ 
/*      */   protected BudgetActivityDAO getBudgetActivityDAO()
/*      */   {
/* 4406 */     if (this.mBudgetActivityDAO == null)
/*      */     {
/* 4408 */       if (this.mDataSource != null)
/* 4409 */         this.mBudgetActivityDAO = new BudgetActivityDAO(this.mDataSource);
/*      */       else {
/* 4411 */         this.mBudgetActivityDAO = new BudgetActivityDAO(getConnection());
/*      */       }
/*      */     }
/* 4414 */     return this.mBudgetActivityDAO;
/*      */   }
/*      */ 
/*      */   protected VirementRequestDAO getVirementRequestDAO()
/*      */   {
/* 4423 */     if (this.mVirementRequestDAO == null)
/*      */     {
/* 4425 */       if (this.mDataSource != null)
/* 4426 */         this.mVirementRequestDAO = new VirementRequestDAO(this.mDataSource);
/*      */       else {
/* 4428 */         this.mVirementRequestDAO = new VirementRequestDAO(getConnection());
/*      */       }
/*      */     }
/* 4431 */     return this.mVirementRequestDAO;
/*      */   }
/*      */ 
/*      */   protected ResponsibilityAreaDAO getResponsibilityAreaDAO()
/*      */   {
/* 4440 */     if (this.mResponsibilityAreaDAO == null)
/*      */     {
/* 4442 */       if (this.mDataSource != null)
/* 4443 */         this.mResponsibilityAreaDAO = new ResponsibilityAreaDAO(this.mDataSource);
/*      */       else {
/* 4445 */         this.mResponsibilityAreaDAO = new ResponsibilityAreaDAO(getConnection());
/*      */       }
/*      */     }
/* 4448 */     return this.mResponsibilityAreaDAO;
/*      */   }
/*      */ 
/*      */   protected WeightingProfileDAO getWeightingProfileDAO()
/*      */   {
/* 4457 */     if (this.mWeightingProfileDAO == null)
/*      */     {
/* 4459 */       if (this.mDataSource != null)
/* 4460 */         this.mWeightingProfileDAO = new WeightingProfileDAO(this.mDataSource);
/*      */       else {
/* 4462 */         this.mWeightingProfileDAO = new WeightingProfileDAO(getConnection());
/*      */       }
/*      */     }
/* 4465 */     return this.mWeightingProfileDAO;
/*      */   }
/*      */ 
/*      */   protected CcDeploymentDAO getCcDeploymentDAO()
/*      */   {
/* 4474 */     if (this.mCcDeploymentDAO == null)
/*      */     {
/* 4476 */       if (this.mDataSource != null)
/* 4477 */         this.mCcDeploymentDAO = new CcDeploymentDAO(this.mDataSource);
/*      */       else {
/* 4479 */         this.mCcDeploymentDAO = new CcDeploymentDAO(getConnection());
/*      */       }
/*      */     }
/* 4482 */     return this.mCcDeploymentDAO;
/*      */   }
/*      */ 
/*      */   protected FormRebuildDAO getFormRebuildDAO()
/*      */   {
/* 4491 */     if (this.mFormRebuildDAO == null)
/*      */     {
/* 4493 */       if (this.mDataSource != null)
/* 4494 */         this.mFormRebuildDAO = new FormRebuildDAO(this.mDataSource);
/*      */       else {
/* 4496 */         this.mFormRebuildDAO = new FormRebuildDAO(getConnection());
/*      */       }
/*      */     }
/* 4499 */     return this.mFormRebuildDAO;
/*      */   }
/*      */ 
/*      */   protected ImportGridDAO getImportGridDAO()
/*      */   {
/* 4508 */     if (this.mImportGridDAO == null)
/*      */     {
/* 4510 */       if (this.mDataSource != null)
/* 4511 */         this.mImportGridDAO = new ImportGridDAO(this.mDataSource);
/*      */       else {
/* 4513 */         this.mImportGridDAO = new ImportGridDAO(getConnection());
/*      */       }
/*      */     }
/* 4516 */     return this.mImportGridDAO;
/*      */   }
/*      */ 
/*      */   public String getEntityName()
/*      */   {
/* 4521 */     return "Model";
/*      */   }
/*      */ 
/*      */   public ModelRef getRef(ModelPK paramModelPK)
/*      */     throws ValidationException
/*      */   {
/* 4527 */     ModelEVO evo = getDetails(paramModelPK, "");
/* 4528 */     return evo.getEntityRef();
/*      */   }
/*      */ 
/*      */   public FinanceCubeCK getFinanceCubeCK(FinanceCubePK paramFinanceCubePK)
/*      */   {
/* 5354 */     FinanceCubeRefImpl ref = new FinanceCubeDAO().getRef(paramFinanceCubePK);
/* 5355 */     return (FinanceCubeCK)ref.getPrimaryKey();
/*      */   }
/*      */ 
/*      */   public BudgetCycleCK getBudgetCycleCK(BudgetCyclePK paramBudgetCyclePK)
/*      */   {
/* 5360 */     BudgetCycleRefImpl ref = new BudgetCycleDAO().getRef(paramBudgetCyclePK);
/* 5361 */     return (BudgetCycleCK)ref.getPrimaryKey();
/*      */   }
/*      */ 
/*      */   public ImportGridCK getImportGridCK(ImportGridPK paramImportGridPK)
/*      */   {
/* 5366 */     ImportGridRefImpl ref = new ImportGridDAO().getRef(paramImportGridPK);
/* 5367 */     return (ImportGridCK)ref.getPrimaryKey();
/*      */   }
/*      */ 
/*      */   public void getDependants(Collection c, String dependants)
/*      */   {
/* 5378 */     if (c == null)
/* 5379 */       return;
/* 5380 */     Iterator iter = c.iterator();
/* 5381 */     while (iter.hasNext())
/*      */     {
/* 5383 */       ModelEVO evo = (ModelEVO)iter.next();
/* 5384 */       getDependants(evo, dependants);
/*      */     }
/*      */   }
/*      */ 
/*      */   public void getDependants(ModelEVO evo, String dependants)
/*      */   {
/* 5398 */     if (evo.getModelId() < 1) {
/* 5399 */       return;
/*      */     }
/*      */ 
/* 5471 */     if ((dependants.indexOf("<0>") > -1) || (dependants.indexOf("<1>") > -1) || (dependants.indexOf("<2>") > -1) || (dependants.indexOf("<3>") > -1) || (dependants.indexOf("<4>") > -1) || (dependants.indexOf("<5>") > -1) || (dependants.indexOf("<6>") > -1) || (dependants.indexOf("<7>") > -1) || (dependants.indexOf("<8>") > -1))
/*      */     {
/* 5482 */       if (!evo.isFinanceCubesAllItemsLoaded())
/*      */       {
/* 5484 */         evo.setFinanceCubes(getFinanceCubeDAO().getAll(evo.getModelId(), dependants, evo.getFinanceCubes()));
/*      */ 
/* 5491 */         evo.setFinanceCubesAllItemsLoaded(true);
/*      */       }
/* 5493 */       getFinanceCubeDAO().getDependants(evo.getFinanceCubes(), dependants);
/*      */     }
/*      */ 
/* 5497 */     if (dependants.indexOf("<9>") > -1)
/*      */     {
/* 5500 */       if (!evo.isModelDimensionRelsAllItemsLoaded())
/*      */       {
/* 5502 */         evo.setModelDimensionRels(getModelDimensionRelDAO().getAll(evo.getModelId(), dependants, evo.getModelDimensionRels()));
/*      */ 
/* 5509 */         evo.setModelDimensionRelsAllItemsLoaded(true);
/*      */       }
/*      */ 
/*      */     }
/*      */ 
/* 5514 */     if (dependants.indexOf("<10>") > -1)
/*      */     {
/* 5517 */       if (!evo.isModelPropertiesAllItemsLoaded())
/*      */       {
/* 5519 */         evo.setModelProperties(getModelPropertyDAO().getAll(evo.getModelId(), dependants, evo.getModelProperties()));
/*      */ 
/* 5526 */         evo.setModelPropertiesAllItemsLoaded(true);
/*      */       }
/*      */ 
/*      */     }
/*      */ 
/* 5531 */     if ((dependants.indexOf("<11>") > -1) || (dependants.indexOf("<12>") > -1) || (dependants.indexOf("<13>") > -1) || (dependants.indexOf("<14>") > -1))
/*      */     {
/* 5537 */       if (!evo.isBudgetCyclesAllItemsLoaded())
/*      */       {
/* 5539 */         evo.setBudgetCycles(getBudgetCycleDAO().getAll(evo.getModelId(), dependants, evo.getBudgetCycles()));
/*      */ 
/* 5546 */         evo.setBudgetCyclesAllItemsLoaded(true);
/*      */       }
/* 5548 */       getBudgetCycleDAO().getDependants(evo.getBudgetCycles(), dependants);
/*      */     }
/*      */ 
/* 5552 */     if (dependants.indexOf("<15>") > -1)
/*      */     {
/* 5555 */       if (!evo.isBudgetUsersAllItemsLoaded())
/*      */       {
/* 5557 */         evo.setBudgetUsers(getBudgetUserDAO().getAll(evo.getModelId(), dependants, evo.getBudgetUsers()));
/*      */ 
/* 5564 */         evo.setBudgetUsersAllItemsLoaded(true);
/*      */       }
/*      */ 
/*      */     }
/*      */ 
/* 5569 */     if ((dependants.indexOf("<16>") > -1) || (dependants.indexOf("<17>") > -1))
/*      */     {
/* 5573 */       if (!evo.isSecurityGroupsAllItemsLoaded())
/*      */       {
/* 5575 */         evo.setSecurityGroups(getSecurityGroupDAO().getAll(evo.getModelId(), dependants, evo.getSecurityGroups()));
/*      */ 
/* 5582 */         evo.setSecurityGroupsAllItemsLoaded(true);
/*      */       }
/* 5584 */       getSecurityGroupDAO().getDependants(evo.getSecurityGroups(), dependants);
/*      */     }
/*      */ 
/* 5588 */     if ((dependants.indexOf("<18>") > -1) || (dependants.indexOf("<19>") > -1))
/*      */     {
/* 5592 */       if (!evo.isSecurityAccessDefsAllItemsLoaded())
/*      */       {
/* 5594 */         evo.setSecurityAccessDefs(getSecurityAccessDefDAO().getAll(evo.getModelId(), dependants, evo.getSecurityAccessDefs()));
/*      */ 
/* 5601 */         evo.setSecurityAccessDefsAllItemsLoaded(true);
/*      */       }
/* 5603 */       getSecurityAccessDefDAO().getDependants(evo.getSecurityAccessDefs(), dependants);
/*      */     }
/*      */ 
/* 5607 */     if ((dependants.indexOf("<20>") > -1) || (dependants.indexOf("<21>") > -1))
/*      */     {
/* 5611 */       if (!evo.isCellCalculationsAllItemsLoaded())
/*      */       {
/* 5613 */         evo.setCellCalculations(getCellCalcDAO().getAll(evo.getModelId(), dependants, evo.getCellCalculations()));
/*      */ 
/* 5620 */         evo.setCellCalculationsAllItemsLoaded(true);
/*      */       }
/* 5622 */       getCellCalcDAO().getDependants(evo.getCellCalculations(), dependants);
/*      */     }
/*      */ 
/* 5626 */     if ((dependants.indexOf("<22>") > -1) || (dependants.indexOf("<23>") > -1) || (dependants.indexOf("<24>") > -1))
/*      */     {
/* 5631 */       if (!evo.isVirementGroupsAllItemsLoaded())
/*      */       {
/* 5633 */         evo.setVirementGroups(getVirementCategoryDAO().getAll(evo.getModelId(), dependants, evo.getVirementGroups()));
/*      */ 
/* 5640 */         evo.setVirementGroupsAllItemsLoaded(true);
/*      */       }
/* 5642 */       getVirementCategoryDAO().getDependants(evo.getVirementGroups(), dependants);
/*      */     }
/*      */ 
/* 5646 */     if ((dependants.indexOf("<25>") > -1) || (dependants.indexOf("<26>") > -1))
/*      */     {
/* 5650 */       if (!evo.isRechargeAllItemsLoaded())
/*      */       {
/* 5652 */         evo.setRecharge(getRechargeDAO().getAll(evo.getModelId(), dependants, evo.getRecharge()));
/*      */ 
/* 5659 */         evo.setRechargeAllItemsLoaded(true);
/*      */       }
/* 5661 */       getRechargeDAO().getDependants(evo.getRecharge(), dependants);
/*      */     }
/*      */ 
/* 5665 */     if ((dependants.indexOf("<27>") > -1) || (dependants.indexOf("<28>") > -1))
/*      */     {
/* 5669 */       if (!evo.isBudgetActivitiesAllItemsLoaded())
/*      */       {
/* 5671 */         evo.setBudgetActivities(getBudgetActivityDAO().getAll(evo.getModelId(), dependants, evo.getBudgetActivities()));
/*      */ 
/* 5678 */         evo.setBudgetActivitiesAllItemsLoaded(true);
/*      */       }
/* 5680 */       getBudgetActivityDAO().getDependants(evo.getBudgetActivities(), dependants);
/*      */     }
/*      */ 
/* 5684 */     if ((dependants.indexOf("<29>") > -1) || (dependants.indexOf("<30>") > -1) || (dependants.indexOf("<31>") > -1) || (dependants.indexOf("<32>") > -1) || (dependants.indexOf("<33>") > -1) || (dependants.indexOf("<34>") > -1) || (dependants.indexOf("<35>") > -1))
/*      */     {
/* 5693 */       if (!evo.isVirementRequestsAllItemsLoaded())
/*      */       {
/* 5695 */         evo.setVirementRequests(getVirementRequestDAO().getAll(evo.getModelId(), dependants, evo.getVirementRequests()));
/*      */ 
/* 5702 */         evo.setVirementRequestsAllItemsLoaded(true);
/*      */       }
/* 5704 */       getVirementRequestDAO().getDependants(evo.getVirementRequests(), dependants);
/*      */     }
/*      */ 
/* 5708 */     if (dependants.indexOf("<36>") > -1)
/*      */     {
/* 5711 */       if (!evo.isResponsibilityAreasAllItemsLoaded())
/*      */       {
/* 5713 */         evo.setResponsibilityAreas(getResponsibilityAreaDAO().getAll(evo.getModelId(), dependants, evo.getResponsibilityAreas()));
/*      */ 
/* 5720 */         evo.setResponsibilityAreasAllItemsLoaded(true);
/*      */       }
/*      */ 
/*      */     }
/*      */ 
/* 5725 */     if ((dependants.indexOf("<37>") > -1) || (dependants.indexOf("<38>") > -1) || (dependants.indexOf("<39>") > -1) || (dependants.indexOf("<40>") > -1))
/*      */     {
/* 5731 */       if (!evo.isUserDefinedWeightingProfilesAllItemsLoaded())
/*      */       {
/* 5733 */         evo.setUserDefinedWeightingProfiles(getWeightingProfileDAO().getAll(evo.getModelId(), dependants, evo.getUserDefinedWeightingProfiles()));
/*      */ 
/* 5740 */         evo.setUserDefinedWeightingProfilesAllItemsLoaded(true);
/*      */       }
/* 5742 */       getWeightingProfileDAO().getDependants(evo.getUserDefinedWeightingProfiles(), dependants);
/*      */     }
/*      */ 
/* 5746 */     if ((dependants.indexOf("<41>") > -1) || (dependants.indexOf("<42>") > -1) || (dependants.indexOf("<43>") > -1) || (dependants.indexOf("<44>") > -1) || (dependants.indexOf("<45>") > -1) || (dependants.indexOf("<46>") > -1))
/*      */     {
/* 5754 */       if (!evo.isCellCalcDeploymentsAllItemsLoaded())
/*      */       {
/* 5756 */         evo.setCellCalcDeployments(getCcDeploymentDAO().getAll(evo.getModelId(), dependants, evo.getCellCalcDeployments()));
/*      */ 
/* 5763 */         evo.setCellCalcDeploymentsAllItemsLoaded(true);
/*      */       }
/* 5765 */       getCcDeploymentDAO().getDependants(evo.getCellCalcDeployments(), dependants);
/*      */     }
/*      */ 
/* 5769 */     if (dependants.indexOf("<47>") > -1)
/*      */     {
/* 5772 */       if (!evo.isFormRebuildsAllItemsLoaded())
/*      */       {
/* 5774 */         evo.setFormRebuilds(getFormRebuildDAO().getAll(evo.getModelId(), dependants, evo.getFormRebuilds()));
/*      */ 
/* 5781 */         evo.setFormRebuildsAllItemsLoaded(true);
/*      */       }
/*      */ 
/*      */     }
/*      */ 
/* 5786 */     if (dependants.indexOf("<48>") > -1)
/*      */     {
/* 5789 */       if (!evo.isAssocImportGridsAllItemsLoaded())
/*      */       {
/* 5791 */         evo.setAssocImportGrids(getImportGridDAO().getAll(evo.getModelId(), dependants, evo.getAssocImportGrids()));
/*      */ 
/* 5798 */         evo.setAssocImportGridsAllItemsLoaded(true);
/*      */       }
/*      */     }
/*      */   }
/*      */ 
/*      */   public EntityList getPickerDataForDimInModel(int modelId, int dimType)
/*      */   {
/* 5853 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 5854 */     PreparedStatement stmt = null;
/*      */ 
/* 5856 */     StartupDetailsForPickerELO results = new StartupDetailsForPickerELO();
/*      */     try
/*      */     {
/* 5859 */       int col = 1;
/* 5860 */       stmt = getConnection().prepareStatement(" select   mdr.DIMENSION_SEQ_NUM seq,  d.DIMENSION_ID,  d.vis_id,  d.description,  d.type,  cursor  (  select  h.HIERARCHY_ID,   h.VIS_ID,   h.description,  cursor  (  select   s.structure_id, s.structure_element_id,  s.vis_id,  s.description,  s.leaf,  s.CAL_ELEM_TYPE, s.position  from   structure_element s  where   H.DIMENSION_ID = d.DIMENSION_ID  and H.HIERARCHY_ID = S.STRUCTURE_ID  and S.PARENT_ID = 0  )se  from   HIERARCHY h  where  H.DIMENSION_ID = d.DIMENSION_ID  ) hierarchy  from   dimension d,  model_dimension_rel mdr,  model m  where  m.model_id = ?   and mdr.model_id = m.model_id  and mdr.DIMENSION_ID = d.DIMENSION_ID  and mdr.DIMENSION_TYPE = ? order by mdr.DIMENSION_SEQ_NUM");
/* 5861 */       stmt.setInt(col++, modelId);
/* 5862 */       stmt.setInt(col++, dimType);
/*      */ 
/* 5865 */       processStartUpResults(results, stmt);
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 5869 */       sqle.printStackTrace();
/* 5870 */       throw new RuntimeException(getEntityName() + " getPickerDataForDimInModel", sqle);
/*      */     }
/*      */     catch (Exception e)
/*      */     {
/* 5874 */       e.printStackTrace();
/* 5875 */       throw new RuntimeException(getEntityName() + " getPickerDataForDimInModel", e);
/*      */     }
/*      */     finally
/*      */     {
/* 5879 */       closeStatement(stmt);
/* 5880 */       closeConnection();
/*      */     }
/*      */ 
/* 5883 */     if (timer != null)
/*      */     {
/* 5885 */       timer.logDebug("getPickerDataForDimInModel", "  modelId=" + modelId);
/*      */     }
/*      */ 
/* 5888 */     return results;
/*      */   }
/*      */ 
/*      */   private EntityList processStartUpResults(StartupDetailsForPickerELO elo, PreparedStatement stmt)
/*      */     throws SQLException
/*      */   {
/* 5894 */     ResultSet resultSet1 = null;
/* 5895 */     ResultSet resultSet2 = null;
/* 5896 */     ResultSet resultSet3 = null;
/*      */ 
/* 5898 */     resultSet1 = stmt.executeQuery();
/* 5899 */     while (resultSet1.next())
/*      */     {
/* 5901 */       int col = 1;
/*      */ 
/* 5904 */       resultSet1.getInt(col++);
/* 5905 */       int id = resultSet1.getInt(col++);
/* 5906 */       String visId = resultSet1.getString(col++);
/* 5907 */       String description = resultSet1.getString(col++);
/* 5908 */       int type = resultSet1.getInt(col++);
/* 5909 */       resultSet2 = (ResultSet)resultSet1.getObject(col++);
/*      */ 
/* 5911 */       StartupDetailsForPickerLevel2ELO hier = new StartupDetailsForPickerLevel2ELO();
/*      */ 
/* 5913 */       while (resultSet2.next())
/*      */       {
/* 5915 */         int col2 = 1;
/*      */ 
/* 5917 */         int hid = resultSet2.getInt(col2++);
/* 5918 */         String hvisid = resultSet2.getString(col2++);
/* 5919 */         String hdesc = resultSet2.getString(col2++);
/* 5920 */         resultSet3 = (ResultSet)resultSet2.getObject(col2++);
/*      */ 
/* 5922 */         StartupDetailsForPickerLevel3ELO se = new StartupDetailsForPickerLevel3ELO();
/* 5923 */         while (resultSet3.next())
/*      */         {
/* 5925 */           int col3 = 1;
/*      */ 
/* 5927 */           int sid = resultSet3.getInt(col3++);
/* 5928 */           int seid = resultSet3.getInt(col3++);
/* 5929 */           String sevisid = resultSet3.getString(col3++);
/* 5930 */           String sedesc = resultSet3.getString(col3++);
/* 5931 */           boolean leaf = resultSet3.getString(col3++).equals("Y");
/* 5932 */           int calType = resultSet3.getInt(col3++);
/* 5933 */           int position = resultSet3.getInt(col3++);
/*      */ 
/* 5935 */           StructureElementPK sePk = new StructureElementPK(sid, seid);
/* 5936 */           StructureElementRefImpl seref = new StructureElementRefImpl(sePk, sevisid);
/*      */ 
/* 5938 */           se.add(seref, sid, seid, sevisid, sedesc, leaf, calType, position);
/*      */         }
/* 5940 */         resultSet3.close();
/* 5941 */         hier.add(hid, hvisid, hdesc, se);
/*      */       }
/* 5943 */       resultSet2.close();
/* 5944 */       elo.add(id, visId, description, hier, new DimensionRefImpl(new DimensionPK(id), visId, type));
/*      */     }
/* 5946 */     resultSet1.close();
/*      */ 
/* 5948 */     return elo;
/*      */   }
/*      */ 
/*      */   public EntityList getPickerDataForModel(int modelId)
/*      */   {
/* 6001 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 6002 */     PreparedStatement stmt = null;
/*      */ 
/* 6004 */     StartupDetailsForPickerELO results = new StartupDetailsForPickerELO();
/*      */     try
/*      */     {
/* 6007 */       int col = 1;
/* 6008 */       stmt = getConnection().prepareStatement(" select   mdr.DIMENSION_SEQ_NUM seq,  d.DIMENSION_ID,  d.vis_id,  d.description,  d.type,  cursor  (  select  h.HIERARCHY_ID,   h.VIS_ID,   h.description,  cursor  (  select   s.structure_id, s.structure_element_id,  s.vis_id,  s.description,  s.leaf,  s.CAL_ELEM_TYPE,  s.position  from   structure_element s  where   H.DIMENSION_ID = d.DIMENSION_ID  and H.HIERARCHY_ID = S.STRUCTURE_ID  and S.PARENT_ID = 0  )se  from   HIERARCHY h  where  H.DIMENSION_ID = d.DIMENSION_ID  ) hierarchy  from   dimension d,  model_dimension_rel mdr,  model m  where  m.model_id = ?   and mdr.model_id = m.model_id  and mdr.DIMENSION_ID = d.DIMENSION_ID  order by mdr.DIMENSION_SEQ_NUM");
/* 6009 */       stmt.setInt(col++, modelId);
/*      */ 
/* 6011 */       processStartUpResults(results, stmt);
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 6015 */       sqle.printStackTrace();
/* 6016 */       throw new RuntimeException(getEntityName() + " getPickerDataForDimInModel", sqle);
/*      */     }
/*      */     catch (Exception e)
/*      */     {
/* 6020 */       e.printStackTrace();
/* 6021 */       throw new RuntimeException(getEntityName() + " getPickerDataForDimInModel", e);
/*      */     }
/*      */     finally
/*      */     {
/* 6025 */       closeStatement(stmt);
/* 6026 */       closeConnection();
/*      */     }
/*      */ 
/* 6029 */     if (timer != null)
/*      */     {
/* 6031 */       timer.logDebug("getPickerDataForDimInModel", "  modelId=" + modelId);
/*      */     }
/*      */ 
/* 6034 */     return results;
/*      */   }
/*      */ 
/*      */   public EntityList getPickerDataForModelDimTypes(int modelId, int[] types)
/*      */   {
/* 6039 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 6040 */     PreparedStatement stmt = null;
/*      */ 
/* 6042 */     StartupDetailsForPickerELO results = new StartupDetailsForPickerELO();
/*      */     try
/*      */     {
/* 6045 */       int col = 1;
/* 6046 */       StringBuffer sb = new StringBuffer();
/* 6047 */       sb.append(" select   mdr.DIMENSION_SEQ_NUM seq,  d.DIMENSION_ID,  d.vis_id,  d.description,  d.type,  cursor  (  select  h.HIERARCHY_ID,   h.VIS_ID,   h.description,  cursor  (  select   s.structure_id, s.structure_element_id,  s.vis_id,  s.description,  s.leaf,  s.CAL_ELEM_TYPE,  s.position  from   structure_element s  where   H.DIMENSION_ID = d.DIMENSION_ID  and H.HIERARCHY_ID = S.STRUCTURE_ID  and S.PARENT_ID = 0  )se  from   HIERARCHY h  where  H.DIMENSION_ID = d.DIMENSION_ID  ) hierarchy  from   dimension d,  model_dimension_rel mdr,  model m  where  m.model_id = ?   and mdr.model_id = m.model_id  and mdr.DIMENSION_ID = d.DIMENSION_ID ");
/* 6048 */       sb.append("and mdr.DIMENSION_TYPE in (");
/* 6049 */       for (int i = 0; i < types.length; i++)
/*      */       {
/* 6051 */         if (i != 0) {
/* 6052 */           sb.append(",");
/*      */         }
/* 6054 */         sb.append("?");
/*      */       }
/* 6056 */       sb.append(")");
/* 6057 */       sb.append(" order by mdr.DIMENSION_SEQ_NUM");
/* 6058 */       stmt = getConnection().prepareStatement(sb.toString());
/* 6059 */       stmt.setInt(col++, modelId);
/* 6060 */       for (int i = 0; i < types.length; i++) {
/* 6061 */         stmt.setInt(col++, types[i]);
/*      */       }
/* 6063 */       processStartUpResults(results, stmt);
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 6067 */       sqle.printStackTrace();
/* 6068 */       throw new RuntimeException(getEntityName() + " getPickerDataForDimInModel", sqle);
/*      */     }
/*      */     catch (Exception e)
/*      */     {
/* 6072 */       e.printStackTrace();
/* 6073 */       throw new RuntimeException(getEntityName() + " getPickerDataForDimInModel", e);
/*      */     }
/*      */     finally
/*      */     {
/* 6077 */       closeStatement(stmt);
/* 6078 */       closeConnection();
/*      */     }
/*      */ 
/* 6081 */     if (timer != null)
/*      */     {
/* 6083 */       timer.logDebug("getPickerDataForDimInModel", "  modelId=" + modelId);
/*      */     }
/*      */ 
/* 6086 */     return results;
/*      */   }

    /**
     * Returns dimensions depending on the model id and the sequence number.
     * 
     * @param modelId
     * @param seq
     * @return StartupDetailsForPickerELO
     */
    public EntityList getPickerDataForModelDimSeq(int modelId, int[] seq) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        PreparedStatement stmt = null;

        StartupDetailsForPickerELO results = new StartupDetailsForPickerELO();
        try {
            int col = 1;
            StringBuffer sb = new StringBuffer();
            sb.append(" select   mdr.DIMENSION_SEQ_NUM seq,  d.DIMENSION_ID,  d.vis_id,  d.description,  d.type,  cursor  (  select  h.HIERARCHY_ID,   h.VIS_ID,   h.description,  cursor  (  select   s.structure_id, s.structure_element_id,  s.vis_id,  s.description,  s.leaf,  s.CAL_ELEM_TYPE,  s.position  from   structure_element s  where   H.DIMENSION_ID = d.DIMENSION_ID  and H.HIERARCHY_ID = S.STRUCTURE_ID  and S.PARENT_ID = 0  )se  from   HIERARCHY h  where  H.DIMENSION_ID = d.DIMENSION_ID  ) hierarchy  from   dimension d,  model_dimension_rel mdr,  model m  where  m.model_id = ?   and mdr.model_id = m.model_id  and mdr.DIMENSION_ID = d.DIMENSION_ID ");
            sb.append("and mdr.DIMENSION_SEQ_NUM in (");
            for (int i = 0; i < seq.length; i++) {
                if (i != 0) {
                    sb.append(",");
                }
                sb.append("?");
            }
            sb.append(")");
            sb.append(" order by mdr.DIMENSION_SEQ_NUM");
            stmt = getConnection().prepareStatement(sb.toString());
            stmt.setInt(col++, modelId);
            for (int i = 0; i < seq.length; i++) {
                stmt.setInt(col++, seq[i]);
            }
            processStartUpResults(results, stmt);
        } catch (SQLException sqle) {
            sqle.printStackTrace();
            throw new RuntimeException(getEntityName() + " getPickerDataForDimInModel", sqle);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(getEntityName() + " getPickerDataForDimInModel", e);
        } finally {
            closeStatement(stmt);
            closeConnection();
        }

        if (timer != null) {
            timer.logDebug("getPickerDataForDimInModel", "  modelId=" + modelId);
        }

        return results;
    }
 
/*      */   public EntityList getPickerDataForModelRA(int modelId)
/*      */   {
/* 6189 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 6190 */     PreparedStatement stmt = null;
/*      */ 
/* 6192 */     StartupDetailsForPickerELO results = new StartupDetailsForPickerELO();
/*      */     try
/*      */     {
/* 6196 */       int col = 1;
/* 6197 */       stmt = getConnection().prepareStatement(" select   mdr.DIMENSION_SEQ_NUM seq,  d.DIMENSION_ID,  d.vis_id,  d.description,  d.type,  cursor  (  select  h.HIERARCHY_ID,   h.VIS_ID,   h.description,  cursor  (  select   s.structure_id, s.structure_element_id,  s.vis_id,  s.description,  s.leaf,  s.CAL_ELEM_TYPE,  s.position  from   structure_element s  where   H.DIMENSION_ID = d.DIMENSION_ID  and H.HIERARCHY_ID = S.STRUCTURE_ID  and S.PARENT_ID = 0  )se  from   HIERARCHY h  where  H.DIMENSION_ID = d.DIMENSION_ID  and h.HIERARCHY_ID = m.BUDGET_HIERARCHY_ID  ) hierarchy  from   dimension d,  model_dimension_rel mdr,  model m  where  m.model_id = ?   and mdr.model_id = m.model_id  and mdr.DIMENSION_ID = d.DIMENSION_ID  and mdr.DIMENSION_SEQ_NUM = 0");
/* 6198 */       stmt.setInt(col++, modelId);
/*      */ 
/* 6201 */       processStartUpResults(results, stmt);
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 6206 */       sqle.printStackTrace();
/* 6207 */       throw new RuntimeException(getEntityName() + " getPickerDataForModelRA", sqle);
/*      */     }
/*      */     catch (Exception e)
/*      */     {
/* 6211 */       e.printStackTrace();
/* 6212 */       throw new RuntimeException(getEntityName() + " getPickerDataForModelRA", e);
/*      */     }
/*      */     finally
/*      */     {
/* 6216 */       closeStatement(stmt);
/* 6217 */       closeConnection();
/*      */     }
/*      */ 
/* 6220 */     if (timer != null)
/*      */     {
/* 6222 */       timer.logDebug("getPickerDataForModelRA", "  modelId=" + modelId);
/*      */     }
/*      */ 
/* 6225 */     return results;
/*      */   }
/*      */ 
/*      */   public Properties queryModelProperties(int financeCubeId)
/*      */   {
/* 6235 */     Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
/* 6236 */     PreparedStatement stmt = null;
/* 6237 */     Properties results = new Properties();
/* 6238 */     ResultSet rs = null;
/*      */     try
/*      */     {
/* 6241 */       int col = 1;
/* 6242 */       stmt = getConnection().prepareStatement("select property_name, property_value from model_property where model_id = (select model_id from finance_cube                   where finance_cube_id = ?)");
/*      */ 
/* 6245 */       stmt.setInt(col++, financeCubeId);
/*      */ 
/* 6247 */       rs = stmt.executeQuery();
/*      */ 
/* 6249 */       while (rs.next())
/* 6250 */         results.put(rs.getString("property_name"), rs.getString("property_value"));
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 6254 */       sqle.printStackTrace();
/* 6255 */       throw new RuntimeException(getEntityName() + " queryModelProperties", sqle);
/*      */     }
/*      */     catch (Exception e)
/*      */     {
/* 6259 */       e.printStackTrace();
/* 6260 */       throw new RuntimeException(getEntityName() + " queryModelProperties", e);
/*      */     }
/*      */     finally
/*      */     {
/* 6264 */       closeResultSet(rs);
/* 6265 */       closeStatement(stmt);
/* 6266 */       closeConnection();
/*      */     }
/*      */ 
/* 6269 */     if (timer != null) {
/* 6270 */       timer.logDebug("queryModelProperties", "  financeCubeId=" + financeCubeId);
/*      */     }
/* 6272 */     return results;
/*      */   }
/*      */ 
/*      */   public int getNextSeq()
/*      */   {
/* 6277 */     PreparedStatement stmt = null;
/* 6278 */     int nextSeq = -1;
/* 6279 */     ResultSet rs = null;
/*      */     try
/*      */     {
/* 6282 */       stmt = getConnection().prepareStatement("update MODEL_SEQ set SEQ_NUM = SEQ_NUM + 1");
/* 6283 */       stmt.executeUpdate();
/*      */ 
/* 6285 */       stmt = getConnection().prepareStatement("select SEQ_NUM - 1 from MODEL_SEQ");
/* 6286 */       rs = stmt.executeQuery();
/*      */ 
/* 6288 */       if (rs.next()) {
/* 6289 */         int i = rs.getInt(1);
/*      */         return i;
/*      */       }
/* 6291 */       throw new IllegalStateException("next sequence not found");
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 6295 */       sqle.printStackTrace();
/* 6296 */       throw new RuntimeException(getEntityName() + " getNextSeq", sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 6300 */       closeResultSet(rs);
/* 6301 */       closeStatement(stmt);
/* 6302 */       closeConnection(); } //throw localObject;
/*      */   }

	public EntityList getModelUserSecurity() {
		Timer timer = _log.isDebugEnabled() ? new Timer(_log) : null;

		String[] columnNames = {"Model", "ModelDisplay", "NumUsers", "UserSummary", "Hierarchy"};

		EntityListImpl results = new EntityListImpl(columnNames, new Object[0][columnNames.length]);
		
//		SqlBuilder sqlb = new SqlBuilder(new String[]{"with init as", "(", "select  distinct MODEL_ID, m.VIS_ID as MODEL_VIS_ID, m.DESCRIPTION as MODEL_DESCRIPTION", "        ,h.HIERARCHY_ID, h.VIS_ID as HIERARCHY_VIS_ID", "        ,USER_ID, NAME", "from    MODEL m", "join    HIERARCHY h on (h.HIERARCHY_ID = m.BUDGET_HIERARCHY_ID)", "left", "join    BUDGET_USER using (MODEL_ID)", "left", "join    USR using (USER_ID)", ")", ",init2 as", "(", "select  m.*",
//				"        ,row_number() over (partition by MODEL_ID order by NAME) as SEQ", "        ,(select count(*) from init t where t.MODEL_ID = m.MODEL_ID and NAME is not null) as NUM_USERS", "from    init m", ")", "select  MODEL_ID, MODEL_VIS_ID, MODEL_DESCRIPTION, HIERARCHY_ID, HIERARCHY_VIS_ID", "        ,NUM_USERS", "        ,WM_CONCAT(NAME)", "        ||", "        case when NUM_USERS > 50 then '...' end", "        as USER_SUMMARY", "from    init2", "where   SEQ < 51",
//				"group   by MODEL_ID, MODEL_VIS_ID, MODEL_DESCRIPTION, HIERARCHY_ID, HIERARCHY_VIS_ID, NUM_USERS", "order   by MODEL_VIS_ID"});
		SqlBuilder sqlb = new SqlBuilder(new String[]{"with init as", "(", "select  distinct MODEL_ID, m.VIS_ID as MODEL_VIS_ID, m.DESCRIPTION as MODEL_DESCRIPTION", "        ,h.HIERARCHY_ID, h.VIS_ID as HIERARCHY_VIS_ID", "        ,USER_ID, NAME", "from    MODEL m", "join    HIERARCHY h on (h.HIERARCHY_ID = m.BUDGET_HIERARCHY_ID)", "left", "join    BUDGET_USER using (MODEL_ID)", "left", "join    USR using (USER_ID)", ")", ",init2 as", "(", "select  m.*",
				"        ,row_number() over (partition by MODEL_ID order by NAME) as SEQ", "        ,(select count(*) from init t where t.MODEL_ID = m.MODEL_ID and NAME is not null) as NUM_USERS", "from    init m", ")", "select  MODEL_ID, MODEL_VIS_ID, MODEL_DESCRIPTION, HIERARCHY_ID, HIERARCHY_VIS_ID", "        ,NUM_USERS", "        ,LISTAGG(NAME,',') WITHIN GROUP (ORDER BY NAME)", "        ||", "        case when NUM_USERS > 50 then '...' end", "        as USER_SUMMARY", "from    init2", "where   SEQ < 51",
				"group   by MODEL_ID, MODEL_VIS_ID, MODEL_DESCRIPTION, HIERARCHY_ID, HIERARCHY_VIS_ID, NUM_USERS", "order   by MODEL_VIS_ID"});
//		SqlBuilder sqlb = new SqlBuilder(new String[] { "with init as", "(", "select  distinct MODEL_ID, m.VIS_ID as MODEL_VIS_ID, m.DESCRIPTION as MODEL_DESCRIPTION", "        ,h.HIERARCHY_ID, h.VIS_ID as HIERARCHY_VIS_ID", "        ,USER_ID, NAME", "from    MODEL m", "join    HIERARCHY h on (h.HIERARCHY_ID = m.BUDGET_HIERARCHY_ID)", "left", "join    BUDGET_USER using (MODEL_ID)", "left", "join    USR using (USER_ID)", ")", ",init2 as", "(", "select  m.*", "        ,row_number() over (partition by MODEL_ID order by NAME) as SEQ", "        ,(select count(*) from init t where t.MODEL_ID = m.MODEL_ID and NAME is not null) as NUM_USERS", "from    init m", ")", "select  MODEL_ID, MODEL_VIS_ID, MODEL_DESCRIPTION, HIERARCHY_ID, HIERARCHY_VIS_ID", "        ,NUM_USERS", "        ,WM_CONCAT(NAME)", "        ||", "        case when NUM_USERS > 50 then '...' end", "        as USER_SUMMARY", "from    init2", "where   SEQ < 51", "group   by MODEL_ID, MODEL_VIS_ID, MODEL_DESCRIPTION, HIERARCHY_ID, HIERARCHY_VIS_ID, NUM_USERS", "order   by MODEL_VIS_ID" });
		SqlExecutor sqle = new SqlExecutor("getModelUserSecurity", getDataSource(), sqlb, _log);
		ResultSet resultSet = sqle.getResultSet();
		try {
			while (resultSet.next()) {
				List row = new ArrayList();
				row.add(new ModelRefImpl(new ModelPK(resultSet.getInt("MODEL_ID")), resultSet.getString("MODEL_VIS_ID")));

				row.add(resultSet.getString("MODEL_VIS_ID") + " - " + resultSet.getString("MODEL_DESCRIPTION"));
				row.add(Integer.valueOf(resultSet.getInt("NUM_USERS")));
				row.add(resultSet.getString("USER_SUMMARY"));
				row.add(new HierarchyRefImpl(new HierarchyPK(resultSet.getInt("HIERARCHY_ID")), resultSet.getString("HIERARCHY_VIS_ID")));

				results.add(row);
			}
		} catch (SQLException e) {
			throw handleSQLException(sqlb.toString(), e);
		} finally {
			sqle.close();
		}

		if (timer != null) {
			timer.logDebug("getModelUserSecurity", " items=" + results.getNumRows());
		}

		return results;
	}
/*      */ 
/*      */   public List<Integer> getReadOnlyRaAccessPositions(int modelId, int userId)
/*      */   {
/* 6321 */     List result = new ArrayList();
/*      */ 
/* 6326 */     Integer object = null;
/*      */ 
/* 6328 */     AllRootsForModelELO roots = getAllRootsForModel(modelId);
/* 6329 */     roots.next();
/* 6330 */     int structureId = roots.getStructureId();
/*      */ 
/* 6332 */     PreparedStatement stmt = null;
/* 6333 */     ResultSet rs = null;
/*      */     try
/*      */     {
/* 6336 */       stmt = getConnection().prepareStatement(this.sRAAccess);
/* 6337 */       stmt.setInt(1, structureId);
/* 6338 */       stmt.setInt(2, modelId);
/* 6339 */       stmt.setInt(3, userId);
/*      */ 
/* 6341 */       rs = stmt.executeQuery();
/*      */ 
/* 6343 */       while (rs.next())
/*      */       {
/* 6345 */         int type = rs.getInt("RA_ACCESS_MODE");
/* 6346 */         int start = rs.getInt("POSITION");
/* 6347 */         int end = rs.getInt("END_POSITION");
/* 6348 */         if (type == 1)
/*      */         {
/* 6350 */           for (int i = start; i <= end; i++)
/*      */           {
/* 6352 */             object = Integer.valueOf(i);
/* 6353 */             result.add(object);
/*      */           }
/* 6350 */           continue;
/*      */         }
/*      */ 
/* 6358 */         if (result.isEmpty())
/*      */           continue;
/* 6360 */         for (int i = start; i <= end; i++)
/*      */         {
/* 6362 */           if (result.isEmpty())
/*      */             break;
/* 6364 */           object = Integer.valueOf(i);
/* 6365 */           result.remove(object);
/*      */         }
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 6372 */       sqle.printStackTrace();
/* 6373 */       throw new RuntimeException(getEntityName() + " getNextSeq", sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 6377 */       closeResultSet(rs);
/* 6378 */       closeStatement(stmt);
/* 6379 */       closeConnection();
/*      */     }
/*      */ 
/* 6382 */     return result;
/*      */   }
/*      */ 
/*      */   public EntityList getModelDimensionHierarchies(int modelId)
/*      */   {
/* 6400 */     PreparedStatement ps = null;
/* 6401 */     ResultSet rs = null;
/*      */     try
/*      */     {
/* 6404 */       ps = getConnection().prepareStatement("select dimension_id, mdr.dimension_seq_num, h.hierarchy_id, h.vis_id\nfrom model_dimension_rel mdr\njoin hierarchy h using( dimension_id )\nwhere model_id = ?\norder by dimension_seq_num");
/*      */ 
/* 6410 */       ps.setInt(1, modelId);
/*      */ 
/* 6412 */       EntityListImpl localEntityListImpl = JdbcUtils.extractToEntityListImpl(this.sQUERY_MODEL_DIMENSION_HIERARCHIES, rs = ps.executeQuery());
/*      */       return localEntityListImpl;
/*      */     }
/*      */     catch (SQLException sqle)
/*      */     {
/* 6416 */       throw handleSQLException("getModelDimensionHierachies", sqle);
/*      */     }
/*      */     finally
/*      */     {
/* 6420 */       closeResultSet(rs);
/* 6421 */       closeStatement(ps);
/* 6422 */       closeConnection(); } //throw localObject;
/*      */   }

    public void importDataModel(int globalModelId, int modelId, String dataType) {
        Timer timer = this._log.isDebugEnabled() ? new Timer(this._log) : null;
        
        CallableStatement stmt = null;
        try {
            stmt = getConnection().prepareCall("{ call model_utils.importDataModel(?,?,?) }");
            stmt.setInt(1, globalModelId);
            stmt.setInt(2, modelId);
            stmt.setString(3, dataType);
    
            stmt.execute();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            if (timer != null) {
                timer.logDebug("importDataModel", new StringBuilder().append("globalModelId=").append(globalModelId).append(" modelId=").append(modelId).append(" dataType=").append(dataType).toString());
            }
            closeStatement(stmt);
            closeConnection();
        }
    }

}